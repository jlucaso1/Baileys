// code generated by pbf v4.0.1
// @ts-ignore
import type Pbf from 'pbf';

export enum ADVEncryptionType {
    E2EE = 0,
    HOSTED = 1,
}

export enum KeepType {
    UNKNOWN = 0,
    KEEP_FOR_ALL = 1,
    UNDO_KEEP_FOR_ALL = 2,
}

export enum MediaVisibility {
    DEFAULT = 0,
    OFF = 1,
    ON = 2,
}

export interface ADVDeviceIdentity {
    rawId?: number;
    timestamp?: number;
    keyIndex?: number;
    accountType?: ADVEncryptionType;
    deviceType?: ADVEncryptionType;
}

export function readADVDeviceIdentity(pbf: Pbf, end?: number) {
    return pbf.readFields(readADVDeviceIdentityField, {rawId: 0 as number, timestamp: 0 as number, keyIndex: 0 as number, accountType: 0 as ADVEncryptionType, deviceType: 0 as ADVEncryptionType}, end);
}
function readADVDeviceIdentityField(tag: number, obj: ADVDeviceIdentity, pbf: Pbf) {
    if (tag === 1) obj.rawId = pbf.readVarint();
    else if (tag === 2) obj.timestamp = pbf.readVarint();
    else if (tag === 3) obj.keyIndex = pbf.readVarint();
    else if (tag === 4) obj.accountType = pbf.readVarint();
    else if (tag === 5) obj.deviceType = pbf.readVarint();
}
export function writeADVDeviceIdentity(obj: ADVDeviceIdentity, pbf: Pbf) {
    if (obj.rawId !== undefined) pbf.writeVarintField(1, obj.rawId);
    if (obj.timestamp !== undefined) pbf.writeVarintField(2, obj.timestamp);
    if (obj.keyIndex !== undefined) pbf.writeVarintField(3, obj.keyIndex);
    if (obj.accountType !== undefined) pbf.writeVarintField(4, obj.accountType);
    if (obj.deviceType !== undefined) pbf.writeVarintField(5, obj.deviceType);
}

export interface ADVKeyIndexList {
    rawId?: number;
    timestamp?: number;
    currentIndex?: number;
    validIndexes?: number[];
    accountType?: ADVEncryptionType;
}

export function readADVKeyIndexList(pbf: Pbf, end?: number) {
    return pbf.readFields(readADVKeyIndexListField, {rawId: 0 as number, timestamp: 0 as number, currentIndex: 0 as number, validIndexes: [] as number[], accountType: 0 as ADVEncryptionType}, end);
}
function readADVKeyIndexListField(tag: number, obj: ADVKeyIndexList, pbf: Pbf) {
    if (tag === 1) obj.rawId = pbf.readVarint();
    else if (tag === 2) obj.timestamp = pbf.readVarint();
    else if (tag === 3) obj.currentIndex = pbf.readVarint();
    else if (tag === 4) pbf.readPackedVarint(obj.validIndexes);
    else if (tag === 5) obj.accountType = pbf.readVarint();
}
export function writeADVKeyIndexList(obj: ADVKeyIndexList, pbf: Pbf) {
    if (obj.rawId !== undefined) pbf.writeVarintField(1, obj.rawId);
    if (obj.timestamp !== undefined) pbf.writeVarintField(2, obj.timestamp);
    if (obj.currentIndex !== undefined) pbf.writeVarintField(3, obj.currentIndex);
    if (obj.validIndexes) pbf.writePackedVarint(4, obj.validIndexes);
    if (obj.accountType !== undefined) pbf.writeVarintField(5, obj.accountType);
}

export interface ADVSignedDeviceIdentity {
    details?: Uint8Array;
    accountSignatureKey?: Uint8Array;
    accountSignature?: Uint8Array;
    deviceSignature?: Uint8Array;
}

export function readADVSignedDeviceIdentity(pbf: Pbf, end?: number) {
    return pbf.readFields(readADVSignedDeviceIdentityField, {details: undefined as unknown as Uint8Array, accountSignatureKey: undefined as unknown as Uint8Array, accountSignature: undefined as unknown as Uint8Array, deviceSignature: undefined as unknown as Uint8Array}, end);
}
function readADVSignedDeviceIdentityField(tag: number, obj: ADVSignedDeviceIdentity, pbf: Pbf) {
    if (tag === 1) obj.details = pbf.readBytes();
    else if (tag === 2) obj.accountSignatureKey = pbf.readBytes();
    else if (tag === 3) obj.accountSignature = pbf.readBytes();
    else if (tag === 4) obj.deviceSignature = pbf.readBytes();
}
export function writeADVSignedDeviceIdentity(obj: ADVSignedDeviceIdentity, pbf: Pbf) {
    if (obj.details != null) pbf.writeBytesField(1, obj.details);
    if (obj.accountSignatureKey != null) pbf.writeBytesField(2, obj.accountSignatureKey);
    if (obj.accountSignature != null) pbf.writeBytesField(3, obj.accountSignature);
    if (obj.deviceSignature != null) pbf.writeBytesField(4, obj.deviceSignature);
}

export interface ADVSignedDeviceIdentityHMAC {
    details?: Uint8Array;
    hmac?: Uint8Array;
    accountType?: ADVEncryptionType;
}

export function readADVSignedDeviceIdentityHMAC(pbf: Pbf, end?: number) {
    return pbf.readFields(readADVSignedDeviceIdentityHMACField, {details: undefined as unknown as Uint8Array, hmac: undefined as unknown as Uint8Array, accountType: 0 as ADVEncryptionType}, end);
}
function readADVSignedDeviceIdentityHMACField(tag: number, obj: ADVSignedDeviceIdentityHMAC, pbf: Pbf) {
    if (tag === 1) obj.details = pbf.readBytes();
    else if (tag === 2) obj.hmac = pbf.readBytes();
    else if (tag === 3) obj.accountType = pbf.readVarint();
}
export function writeADVSignedDeviceIdentityHMAC(obj: ADVSignedDeviceIdentityHMAC, pbf: Pbf) {
    if (obj.details != null) pbf.writeBytesField(1, obj.details);
    if (obj.hmac != null) pbf.writeBytesField(2, obj.hmac);
    if (obj.accountType !== undefined) pbf.writeVarintField(3, obj.accountType);
}

export interface ADVSignedKeyIndexList {
    details?: Uint8Array;
    accountSignature?: Uint8Array;
    accountSignatureKey?: Uint8Array;
}

export function readADVSignedKeyIndexList(pbf: Pbf, end?: number) {
    return pbf.readFields(readADVSignedKeyIndexListField, {details: undefined as unknown as Uint8Array, accountSignature: undefined as unknown as Uint8Array, accountSignatureKey: undefined as unknown as Uint8Array}, end);
}
function readADVSignedKeyIndexListField(tag: number, obj: ADVSignedKeyIndexList, pbf: Pbf) {
    if (tag === 1) obj.details = pbf.readBytes();
    else if (tag === 2) obj.accountSignature = pbf.readBytes();
    else if (tag === 3) obj.accountSignatureKey = pbf.readBytes();
}
export function writeADVSignedKeyIndexList(obj: ADVSignedKeyIndexList, pbf: Pbf) {
    if (obj.details != null) pbf.writeBytesField(1, obj.details);
    if (obj.accountSignature != null) pbf.writeBytesField(2, obj.accountSignature);
    if (obj.accountSignatureKey != null) pbf.writeBytesField(3, obj.accountSignatureKey);
}

export interface ActionLink {
    url?: string;
    buttonTitle?: string;
}

export function readActionLink(pbf: Pbf, end?: number) {
    return pbf.readFields(readActionLinkField, {url: "" as string, buttonTitle: "" as string}, end);
}
function readActionLinkField(tag: number, obj: ActionLink, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.buttonTitle = pbf.readString();
}
export function writeActionLink(obj: ActionLink, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.buttonTitle !== undefined) pbf.writeStringField(2, obj.buttonTitle);
}

export interface AutoDownloadSettings {
    downloadImages?: boolean;
    downloadAudio?: boolean;
    downloadVideo?: boolean;
    downloadDocuments?: boolean;
}

export function readAutoDownloadSettings(pbf: Pbf, end?: number) {
    return pbf.readFields(readAutoDownloadSettingsField, {downloadImages: false as boolean, downloadAudio: false as boolean, downloadVideo: false as boolean, downloadDocuments: false as boolean}, end);
}
function readAutoDownloadSettingsField(tag: number, obj: AutoDownloadSettings, pbf: Pbf) {
    if (tag === 1) obj.downloadImages = pbf.readBoolean();
    else if (tag === 2) obj.downloadAudio = pbf.readBoolean();
    else if (tag === 3) obj.downloadVideo = pbf.readBoolean();
    else if (tag === 4) obj.downloadDocuments = pbf.readBoolean();
}
export function writeAutoDownloadSettings(obj: AutoDownloadSettings, pbf: Pbf) {
    if (obj.downloadImages !== undefined) pbf.writeBooleanField(1, obj.downloadImages);
    if (obj.downloadAudio !== undefined) pbf.writeBooleanField(2, obj.downloadAudio);
    if (obj.downloadVideo !== undefined) pbf.writeBooleanField(3, obj.downloadVideo);
    if (obj.downloadDocuments !== undefined) pbf.writeBooleanField(4, obj.downloadDocuments);
}

export interface AvatarUserSettings {
    fbid?: string;
    password?: string;
}

export function readAvatarUserSettings(pbf: Pbf, end?: number) {
    return pbf.readFields(readAvatarUserSettingsField, {fbid: "" as string, password: "" as string}, end);
}
function readAvatarUserSettingsField(tag: number, obj: AvatarUserSettings, pbf: Pbf) {
    if (tag === 1) obj.fbid = pbf.readString();
    else if (tag === 2) obj.password = pbf.readString();
}
export function writeAvatarUserSettings(obj: AvatarUserSettings, pbf: Pbf) {
    if (obj.fbid !== undefined) pbf.writeStringField(1, obj.fbid);
    if (obj.password !== undefined) pbf.writeStringField(2, obj.password);
}

export interface BizAccountLinkInfo {
    whatsappBizAcctFbid?: number;
    whatsappAcctNumber?: string;
    issueTime?: number;
    hostStorage?: BizAccountLinkInfoHostStorageType;
    accountType?: BizAccountLinkInfoAccountType;
}

export function readBizAccountLinkInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readBizAccountLinkInfoField, {whatsappBizAcctFbid: 0 as number, whatsappAcctNumber: "" as string, issueTime: 0 as number, hostStorage: 0 as BizAccountLinkInfoHostStorageType, accountType: 0 as BizAccountLinkInfoAccountType}, end);
}
function readBizAccountLinkInfoField(tag: number, obj: BizAccountLinkInfo, pbf: Pbf) {
    if (tag === 1) obj.whatsappBizAcctFbid = pbf.readVarint();
    else if (tag === 2) obj.whatsappAcctNumber = pbf.readString();
    else if (tag === 3) obj.issueTime = pbf.readVarint();
    else if (tag === 4) obj.hostStorage = pbf.readVarint();
    else if (tag === 5) obj.accountType = pbf.readVarint();
}
export function writeBizAccountLinkInfo(obj: BizAccountLinkInfo, pbf: Pbf) {
    if (obj.whatsappBizAcctFbid !== undefined) pbf.writeVarintField(1, obj.whatsappBizAcctFbid);
    if (obj.whatsappAcctNumber !== undefined) pbf.writeStringField(2, obj.whatsappAcctNumber);
    if (obj.issueTime !== undefined) pbf.writeVarintField(3, obj.issueTime);
    if (obj.hostStorage !== undefined) pbf.writeVarintField(4, obj.hostStorage);
    if (obj.accountType !== undefined) pbf.writeVarintField(5, obj.accountType);
}

export enum BizAccountLinkInfoAccountType {
    ENTERPRISE = 0,
}

export enum BizAccountLinkInfoHostStorageType {
    ON_PREMISE = 0,
    FACEBOOK = 1,
}

export interface BizAccountPayload {
    vnameCert?: VerifiedNameCertificate;
    bizAcctLinkInfo?: Uint8Array;
}

export function readBizAccountPayload(pbf: Pbf, end?: number) {
    return pbf.readFields(readBizAccountPayloadField, {vnameCert: undefined as unknown as VerifiedNameCertificate, bizAcctLinkInfo: undefined as unknown as Uint8Array}, end);
}
function readBizAccountPayloadField(tag: number, obj: BizAccountPayload, pbf: Pbf) {
    if (tag === 1) obj.vnameCert = readVerifiedNameCertificate(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.bizAcctLinkInfo = pbf.readBytes();
}
export function writeBizAccountPayload(obj: BizAccountPayload, pbf: Pbf) {
    if (obj.vnameCert) pbf.writeMessage(1, writeVerifiedNameCertificate, obj.vnameCert);
    if (obj.bizAcctLinkInfo != null) pbf.writeBytesField(2, obj.bizAcctLinkInfo);
}

export interface BizIdentityInfo {
    vlevel?: BizIdentityInfoVerifiedLevelValue;
    vnameCert?: VerifiedNameCertificate;
    signed?: boolean;
    revoked?: boolean;
    hostStorage?: BizIdentityInfoHostStorageType;
    actualActors?: BizIdentityInfoActualActorsType;
    privacyModeTs?: number;
    featureControls?: number;
}

export function readBizIdentityInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readBizIdentityInfoField, {vlevel: 0 as BizIdentityInfoVerifiedLevelValue, vnameCert: undefined as unknown as VerifiedNameCertificate, signed: false as boolean, revoked: false as boolean, hostStorage: 0 as BizIdentityInfoHostStorageType, actualActors: 0 as BizIdentityInfoActualActorsType, privacyModeTs: 0 as number, featureControls: 0 as number}, end);
}
function readBizIdentityInfoField(tag: number, obj: BizIdentityInfo, pbf: Pbf) {
    if (tag === 1) obj.vlevel = pbf.readVarint();
    else if (tag === 2) obj.vnameCert = readVerifiedNameCertificate(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.signed = pbf.readBoolean();
    else if (tag === 4) obj.revoked = pbf.readBoolean();
    else if (tag === 5) obj.hostStorage = pbf.readVarint();
    else if (tag === 6) obj.actualActors = pbf.readVarint();
    else if (tag === 7) obj.privacyModeTs = pbf.readVarint();
    else if (tag === 8) obj.featureControls = pbf.readVarint();
}
export function writeBizIdentityInfo(obj: BizIdentityInfo, pbf: Pbf) {
    if (obj.vlevel !== undefined) pbf.writeVarintField(1, obj.vlevel);
    if (obj.vnameCert) pbf.writeMessage(2, writeVerifiedNameCertificate, obj.vnameCert);
    if (obj.signed !== undefined) pbf.writeBooleanField(3, obj.signed);
    if (obj.revoked !== undefined) pbf.writeBooleanField(4, obj.revoked);
    if (obj.hostStorage !== undefined) pbf.writeVarintField(5, obj.hostStorage);
    if (obj.actualActors !== undefined) pbf.writeVarintField(6, obj.actualActors);
    if (obj.privacyModeTs !== undefined) pbf.writeVarintField(7, obj.privacyModeTs);
    if (obj.featureControls !== undefined) pbf.writeVarintField(8, obj.featureControls);
}

export enum BizIdentityInfoActualActorsType {
    SELF = 0,
    BSP = 1,
}

export enum BizIdentityInfoHostStorageType {
    ON_PREMISE = 0,
    FACEBOOK = 1,
}

export enum BizIdentityInfoVerifiedLevelValue {
    UNKNOWN = 0,
    LOW = 1,
    HIGH = 2,
}

export interface BotAvatarMetadata {
    sentiment?: number;
    behaviorGraph?: string;
    action?: number;
    intensity?: number;
    wordCount?: number;
}

export function readBotAvatarMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readBotAvatarMetadataField, {sentiment: 0 as number, behaviorGraph: "" as string, action: 0 as number, intensity: 0 as number, wordCount: 0 as number}, end);
}
function readBotAvatarMetadataField(tag: number, obj: BotAvatarMetadata, pbf: Pbf) {
    if (tag === 1) obj.sentiment = pbf.readVarint();
    else if (tag === 2) obj.behaviorGraph = pbf.readString();
    else if (tag === 3) obj.action = pbf.readVarint();
    else if (tag === 4) obj.intensity = pbf.readVarint();
    else if (tag === 5) obj.wordCount = pbf.readVarint();
}
export function writeBotAvatarMetadata(obj: BotAvatarMetadata, pbf: Pbf) {
    if (obj.sentiment !== undefined) pbf.writeVarintField(1, obj.sentiment);
    if (obj.behaviorGraph !== undefined) pbf.writeStringField(2, obj.behaviorGraph);
    if (obj.action !== undefined) pbf.writeVarintField(3, obj.action);
    if (obj.intensity !== undefined) pbf.writeVarintField(4, obj.intensity);
    if (obj.wordCount !== undefined) pbf.writeVarintField(5, obj.wordCount);
}

export interface BotMetadata {
    avatarMetadata?: BotAvatarMetadata;
    personaId?: string;
    pluginMetadata?: BotPluginMetadata;
    suggestedPromptMetadata?: BotSuggestedPromptMetadata;
    invokerJid?: string;
}

export function readBotMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readBotMetadataField, {avatarMetadata: undefined as unknown as BotAvatarMetadata, personaId: "" as string, pluginMetadata: undefined as unknown as BotPluginMetadata, suggestedPromptMetadata: undefined as unknown as BotSuggestedPromptMetadata, invokerJid: "" as string}, end);
}
function readBotMetadataField(tag: number, obj: BotMetadata, pbf: Pbf) {
    if (tag === 1) obj.avatarMetadata = readBotAvatarMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.personaId = pbf.readString();
    else if (tag === 3) obj.pluginMetadata = readBotPluginMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.suggestedPromptMetadata = readBotSuggestedPromptMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.invokerJid = pbf.readString();
}
export function writeBotMetadata(obj: BotMetadata, pbf: Pbf) {
    if (obj.avatarMetadata) pbf.writeMessage(1, writeBotAvatarMetadata, obj.avatarMetadata);
    if (obj.personaId !== undefined) pbf.writeStringField(2, obj.personaId);
    if (obj.pluginMetadata) pbf.writeMessage(3, writeBotPluginMetadata, obj.pluginMetadata);
    if (obj.suggestedPromptMetadata) pbf.writeMessage(4, writeBotSuggestedPromptMetadata, obj.suggestedPromptMetadata);
    if (obj.invokerJid !== undefined) pbf.writeStringField(5, obj.invokerJid);
}

export interface BotPluginMetadata {
    provider?: BotPluginMetadataSearchProvider;
    pluginType?: BotPluginMetadataPluginType;
    thumbnailCdnUrl?: string;
    profilePhotoCdnUrl?: string;
    searchProviderUrl?: string;
    referenceIndex?: number;
    expectedLinksCount?: number;
    pluginVersion?: number;
}

export function readBotPluginMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readBotPluginMetadataField, {provider: 0 as BotPluginMetadataSearchProvider, pluginType: 0 as BotPluginMetadataPluginType, thumbnailCdnUrl: "" as string, profilePhotoCdnUrl: "" as string, searchProviderUrl: "" as string, referenceIndex: 0 as number, expectedLinksCount: 0 as number, pluginVersion: 0 as number}, end);
}
function readBotPluginMetadataField(tag: number, obj: BotPluginMetadata, pbf: Pbf) {
    if (tag === 1) obj.provider = pbf.readVarint();
    else if (tag === 2) obj.pluginType = pbf.readVarint();
    else if (tag === 3) obj.thumbnailCdnUrl = pbf.readString();
    else if (tag === 4) obj.profilePhotoCdnUrl = pbf.readString();
    else if (tag === 5) obj.searchProviderUrl = pbf.readString();
    else if (tag === 6) obj.referenceIndex = pbf.readVarint();
    else if (tag === 7) obj.expectedLinksCount = pbf.readVarint();
    else if (tag === 8) obj.pluginVersion = pbf.readVarint();
}
export function writeBotPluginMetadata(obj: BotPluginMetadata, pbf: Pbf) {
    if (obj.provider !== undefined) pbf.writeVarintField(1, obj.provider);
    if (obj.pluginType !== undefined) pbf.writeVarintField(2, obj.pluginType);
    if (obj.thumbnailCdnUrl !== undefined) pbf.writeStringField(3, obj.thumbnailCdnUrl);
    if (obj.profilePhotoCdnUrl !== undefined) pbf.writeStringField(4, obj.profilePhotoCdnUrl);
    if (obj.searchProviderUrl !== undefined) pbf.writeStringField(5, obj.searchProviderUrl);
    if (obj.referenceIndex !== undefined) pbf.writeVarintField(6, obj.referenceIndex);
    if (obj.expectedLinksCount !== undefined) pbf.writeVarintField(7, obj.expectedLinksCount);
    if (obj.pluginVersion !== undefined) pbf.writeVarintField(8, obj.pluginVersion);
}

export enum BotPluginMetadataPluginType {
    REELS = 1,
    SEARCH = 2,
}

export enum BotPluginMetadataSearchProvider {
    BING = 1,
    GOOGLE = 2,
}

export interface BotSuggestedPromptMetadata {
    suggestedPrompts?: string[];
    selectedPromptIndex?: number;
}

export function readBotSuggestedPromptMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readBotSuggestedPromptMetadataField, {suggestedPrompts: [] as string[], selectedPromptIndex: 0 as number}, end);
}
function readBotSuggestedPromptMetadataField(tag: number, obj: BotSuggestedPromptMetadata, pbf: Pbf) {
    if (tag === 1) obj.suggestedPrompts?.push(pbf.readString());
    else if (tag === 2) obj.selectedPromptIndex = pbf.readVarint();
}
export function writeBotSuggestedPromptMetadata(obj: BotSuggestedPromptMetadata, pbf: Pbf) {
    if (obj.suggestedPrompts) for (const item of obj.suggestedPrompts) pbf.writeStringField(1, item);
    if (obj.selectedPromptIndex !== undefined) pbf.writeVarintField(2, obj.selectedPromptIndex);
}

export interface CallLogRecord {
    callResult?: CallLogRecordCallResult;
    isDndMode?: boolean;
    silenceReason?: CallLogRecordSilenceReason;
    duration?: number;
    startTime?: number;
    isIncoming?: boolean;
    isVideo?: boolean;
    isCallLink?: boolean;
    callLinkToken?: string;
    scheduledCallId?: string;
    callId?: string;
    callCreatorJid?: string;
    groupJid?: string;
    participants?: CallLogRecordParticipantInfo[];
    callType?: CallLogRecordCallType;
}

export function readCallLogRecord(pbf: Pbf, end?: number) {
    return pbf.readFields(readCallLogRecordField, {callResult: 0 as CallLogRecordCallResult, isDndMode: false as boolean, silenceReason: 0 as CallLogRecordSilenceReason, duration: 0 as number, startTime: 0 as number, isIncoming: false as boolean, isVideo: false as boolean, isCallLink: false as boolean, callLinkToken: "" as string, scheduledCallId: "" as string, callId: "" as string, callCreatorJid: "" as string, groupJid: "" as string, participants: [] as CallLogRecordParticipantInfo[], callType: 0 as CallLogRecordCallType}, end);
}
function readCallLogRecordField(tag: number, obj: CallLogRecord, pbf: Pbf) {
    if (tag === 1) obj.callResult = pbf.readVarint();
    else if (tag === 2) obj.isDndMode = pbf.readBoolean();
    else if (tag === 3) obj.silenceReason = pbf.readVarint();
    else if (tag === 4) obj.duration = pbf.readVarint(true);
    else if (tag === 5) obj.startTime = pbf.readVarint(true);
    else if (tag === 6) obj.isIncoming = pbf.readBoolean();
    else if (tag === 7) obj.isVideo = pbf.readBoolean();
    else if (tag === 8) obj.isCallLink = pbf.readBoolean();
    else if (tag === 9) obj.callLinkToken = pbf.readString();
    else if (tag === 10) obj.scheduledCallId = pbf.readString();
    else if (tag === 11) obj.callId = pbf.readString();
    else if (tag === 12) obj.callCreatorJid = pbf.readString();
    else if (tag === 13) obj.groupJid = pbf.readString();
    else if (tag === 14) obj.participants?.push(readCallLogRecordParticipantInfo(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 15) obj.callType = pbf.readVarint();
}
export function writeCallLogRecord(obj: CallLogRecord, pbf: Pbf) {
    if (obj.callResult !== undefined) pbf.writeVarintField(1, obj.callResult);
    if (obj.isDndMode !== undefined) pbf.writeBooleanField(2, obj.isDndMode);
    if (obj.silenceReason !== undefined) pbf.writeVarintField(3, obj.silenceReason);
    if (obj.duration !== undefined) pbf.writeVarintField(4, obj.duration);
    if (obj.startTime !== undefined) pbf.writeVarintField(5, obj.startTime);
    if (obj.isIncoming !== undefined) pbf.writeBooleanField(6, obj.isIncoming);
    if (obj.isVideo !== undefined) pbf.writeBooleanField(7, obj.isVideo);
    if (obj.isCallLink !== undefined) pbf.writeBooleanField(8, obj.isCallLink);
    if (obj.callLinkToken !== undefined) pbf.writeStringField(9, obj.callLinkToken);
    if (obj.scheduledCallId !== undefined) pbf.writeStringField(10, obj.scheduledCallId);
    if (obj.callId !== undefined) pbf.writeStringField(11, obj.callId);
    if (obj.callCreatorJid !== undefined) pbf.writeStringField(12, obj.callCreatorJid);
    if (obj.groupJid !== undefined) pbf.writeStringField(13, obj.groupJid);
    if (obj.participants) for (const item of obj.participants) pbf.writeMessage(14, writeCallLogRecordParticipantInfo, item);
    if (obj.callType !== undefined) pbf.writeVarintField(15, obj.callType);
}

export enum CallLogRecordCallResult {
    CONNECTED = 0,
    REJECTED = 1,
    CANCELLED = 2,
    ACCEPTEDELSEWHERE = 3,
    MISSED = 4,
    INVALID = 5,
    UNAVAILABLE = 6,
    UPCOMING = 7,
    FAILED = 8,
    ABANDONED = 9,
    ONGOING = 10,
}

export enum CallLogRecordCallType {
    REGULAR = 0,
    SCHEDULED_CALL = 1,
    VOICE_CHAT = 2,
}

export enum CallLogRecordSilenceReason {
    NONE = 0,
    SCHEDULED = 1,
    PRIVACY = 2,
    LIGHTWEIGHT = 3,
}

export interface CallLogRecordParticipantInfo {
    userJid?: string;
    callResult?: CallLogRecordCallResult;
}

export function readCallLogRecordParticipantInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readCallLogRecordParticipantInfoField, {userJid: "" as string, callResult: 0 as CallLogRecordCallResult}, end);
}
function readCallLogRecordParticipantInfoField(tag: number, obj: CallLogRecordParticipantInfo, pbf: Pbf) {
    if (tag === 1) obj.userJid = pbf.readString();
    else if (tag === 2) obj.callResult = pbf.readVarint();
}
export function writeCallLogRecordParticipantInfo(obj: CallLogRecordParticipantInfo, pbf: Pbf) {
    if (obj.userJid !== undefined) pbf.writeStringField(1, obj.userJid);
    if (obj.callResult !== undefined) pbf.writeVarintField(2, obj.callResult);
}

export interface CertChain {
    leaf?: CertChainNoiseCertificate;
    intermediate?: CertChainNoiseCertificate;
}

export function readCertChain(pbf: Pbf, end?: number) {
    return pbf.readFields(readCertChainField, {leaf: undefined as unknown as CertChainNoiseCertificate, intermediate: undefined as unknown as CertChainNoiseCertificate}, end);
}
function readCertChainField(tag: number, obj: CertChain, pbf: Pbf) {
    if (tag === 1) obj.leaf = readCertChainNoiseCertificate(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.intermediate = readCertChainNoiseCertificate(pbf, pbf.readVarint() + pbf.pos);
}
export function writeCertChain(obj: CertChain, pbf: Pbf) {
    if (obj.leaf) pbf.writeMessage(1, writeCertChainNoiseCertificate, obj.leaf);
    if (obj.intermediate) pbf.writeMessage(2, writeCertChainNoiseCertificate, obj.intermediate);
}

export interface CertChainNoiseCertificate {
    details?: Uint8Array;
    signature?: Uint8Array;
}

export function readCertChainNoiseCertificate(pbf: Pbf, end?: number) {
    return pbf.readFields(readCertChainNoiseCertificateField, {details: undefined as unknown as Uint8Array, signature: undefined as unknown as Uint8Array}, end);
}
function readCertChainNoiseCertificateField(tag: number, obj: CertChainNoiseCertificate, pbf: Pbf) {
    if (tag === 1) obj.details = pbf.readBytes();
    else if (tag === 2) obj.signature = pbf.readBytes();
}
export function writeCertChainNoiseCertificate(obj: CertChainNoiseCertificate, pbf: Pbf) {
    if (obj.details != null) pbf.writeBytesField(1, obj.details);
    if (obj.signature != null) pbf.writeBytesField(2, obj.signature);
}

export interface CertChainNoiseCertificateDetails {
    serial?: number;
    issuerSerial?: number;
    key?: Uint8Array;
    notBefore?: number;
    notAfter?: number;
}

export function readCertChainNoiseCertificateDetails(pbf: Pbf, end?: number) {
    return pbf.readFields(readCertChainNoiseCertificateDetailsField, {serial: 0 as number, issuerSerial: 0 as number, key: undefined as unknown as Uint8Array, notBefore: 0 as number, notAfter: 0 as number}, end);
}
function readCertChainNoiseCertificateDetailsField(tag: number, obj: CertChainNoiseCertificateDetails, pbf: Pbf) {
    if (tag === 1) obj.serial = pbf.readVarint();
    else if (tag === 2) obj.issuerSerial = pbf.readVarint();
    else if (tag === 3) obj.key = pbf.readBytes();
    else if (tag === 4) obj.notBefore = pbf.readVarint();
    else if (tag === 5) obj.notAfter = pbf.readVarint();
}
export function writeCertChainNoiseCertificateDetails(obj: CertChainNoiseCertificateDetails, pbf: Pbf) {
    if (obj.serial !== undefined) pbf.writeVarintField(1, obj.serial);
    if (obj.issuerSerial !== undefined) pbf.writeVarintField(2, obj.issuerSerial);
    if (obj.key != null) pbf.writeBytesField(3, obj.key);
    if (obj.notBefore !== undefined) pbf.writeVarintField(4, obj.notBefore);
    if (obj.notAfter !== undefined) pbf.writeVarintField(5, obj.notAfter);
}

export interface ChatRowOpaqueData {
    draftMessage?: ChatRowOpaqueDataDraftMessage;
}

export function readChatRowOpaqueData(pbf: Pbf, end?: number) {
    return pbf.readFields(readChatRowOpaqueDataField, {draftMessage: undefined as unknown as ChatRowOpaqueDataDraftMessage}, end);
}
function readChatRowOpaqueDataField(tag: number, obj: ChatRowOpaqueData, pbf: Pbf) {
    if (tag === 1) obj.draftMessage = readChatRowOpaqueDataDraftMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeChatRowOpaqueData(obj: ChatRowOpaqueData, pbf: Pbf) {
    if (obj.draftMessage) pbf.writeMessage(1, writeChatRowOpaqueDataDraftMessage, obj.draftMessage);
}

export interface ChatRowOpaqueDataDraftMessage {
    text?: string;
    omittedUrl?: string;
    ctwaContextLinkData?: ChatRowOpaqueDataDraftMessageCtwaContextLinkData;
    ctwaContext?: ChatRowOpaqueDataDraftMessageCtwaContextData;
    timestamp?: number;
}

export function readChatRowOpaqueDataDraftMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readChatRowOpaqueDataDraftMessageField, {text: "" as string, omittedUrl: "" as string, ctwaContextLinkData: undefined as unknown as ChatRowOpaqueDataDraftMessageCtwaContextLinkData, ctwaContext: undefined as unknown as ChatRowOpaqueDataDraftMessageCtwaContextData, timestamp: 0 as number}, end);
}
function readChatRowOpaqueDataDraftMessageField(tag: number, obj: ChatRowOpaqueDataDraftMessage, pbf: Pbf) {
    if (tag === 1) obj.text = pbf.readString();
    else if (tag === 2) obj.omittedUrl = pbf.readString();
    else if (tag === 3) obj.ctwaContextLinkData = readChatRowOpaqueDataDraftMessageCtwaContextLinkData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.ctwaContext = readChatRowOpaqueDataDraftMessageCtwaContextData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.timestamp = pbf.readVarint(true);
}
export function writeChatRowOpaqueDataDraftMessage(obj: ChatRowOpaqueDataDraftMessage, pbf: Pbf) {
    if (obj.text !== undefined) pbf.writeStringField(1, obj.text);
    if (obj.omittedUrl !== undefined) pbf.writeStringField(2, obj.omittedUrl);
    if (obj.ctwaContextLinkData) pbf.writeMessage(3, writeChatRowOpaqueDataDraftMessageCtwaContextLinkData, obj.ctwaContextLinkData);
    if (obj.ctwaContext) pbf.writeMessage(4, writeChatRowOpaqueDataDraftMessageCtwaContextData, obj.ctwaContext);
    if (obj.timestamp !== undefined) pbf.writeVarintField(5, obj.timestamp);
}

export interface ChatRowOpaqueDataDraftMessageCtwaContextData {
    conversionSource?: string;
    conversionData?: Uint8Array;
    sourceUrl?: string;
    sourceId?: string;
    sourceType?: string;
    title?: string;
    description?: string;
    thumbnail?: string;
    thumbnailUrl?: string;
    mediaType?: ChatRowOpaqueDataDraftMessageCtwaContextDataContextInfoExternalAdReplyInfoMediaType;
    mediaUrl?: string;
    isSuspiciousLink?: boolean;
}

export function readChatRowOpaqueDataDraftMessageCtwaContextData(pbf: Pbf, end?: number) {
    return pbf.readFields(readChatRowOpaqueDataDraftMessageCtwaContextDataField, {conversionSource: "" as string, conversionData: undefined as unknown as Uint8Array, sourceUrl: "" as string, sourceId: "" as string, sourceType: "" as string, title: "" as string, description: "" as string, thumbnail: "" as string, thumbnailUrl: "" as string, mediaType: 0 as ChatRowOpaqueDataDraftMessageCtwaContextDataContextInfoExternalAdReplyInfoMediaType, mediaUrl: "" as string, isSuspiciousLink: false as boolean}, end);
}
function readChatRowOpaqueDataDraftMessageCtwaContextDataField(tag: number, obj: ChatRowOpaqueDataDraftMessageCtwaContextData, pbf: Pbf) {
    if (tag === 1) obj.conversionSource = pbf.readString();
    else if (tag === 2) obj.conversionData = pbf.readBytes();
    else if (tag === 3) obj.sourceUrl = pbf.readString();
    else if (tag === 4) obj.sourceId = pbf.readString();
    else if (tag === 5) obj.sourceType = pbf.readString();
    else if (tag === 6) obj.title = pbf.readString();
    else if (tag === 7) obj.description = pbf.readString();
    else if (tag === 8) obj.thumbnail = pbf.readString();
    else if (tag === 9) obj.thumbnailUrl = pbf.readString();
    else if (tag === 10) obj.mediaType = pbf.readVarint();
    else if (tag === 11) obj.mediaUrl = pbf.readString();
    else if (tag === 12) obj.isSuspiciousLink = pbf.readBoolean();
}
export function writeChatRowOpaqueDataDraftMessageCtwaContextData(obj: ChatRowOpaqueDataDraftMessageCtwaContextData, pbf: Pbf) {
    if (obj.conversionSource !== undefined) pbf.writeStringField(1, obj.conversionSource);
    if (obj.conversionData != null) pbf.writeBytesField(2, obj.conversionData);
    if (obj.sourceUrl !== undefined) pbf.writeStringField(3, obj.sourceUrl);
    if (obj.sourceId !== undefined) pbf.writeStringField(4, obj.sourceId);
    if (obj.sourceType !== undefined) pbf.writeStringField(5, obj.sourceType);
    if (obj.title !== undefined) pbf.writeStringField(6, obj.title);
    if (obj.description !== undefined) pbf.writeStringField(7, obj.description);
    if (obj.thumbnail !== undefined) pbf.writeStringField(8, obj.thumbnail);
    if (obj.thumbnailUrl !== undefined) pbf.writeStringField(9, obj.thumbnailUrl);
    if (obj.mediaType !== undefined) pbf.writeVarintField(10, obj.mediaType);
    if (obj.mediaUrl !== undefined) pbf.writeStringField(11, obj.mediaUrl);
    if (obj.isSuspiciousLink !== undefined) pbf.writeBooleanField(12, obj.isSuspiciousLink);
}

export enum ChatRowOpaqueDataDraftMessageCtwaContextDataContextInfoExternalAdReplyInfoMediaType {
    NONE = 0,
    IMAGE = 1,
    VIDEO = 2,
}

export interface ChatRowOpaqueDataDraftMessageCtwaContextLinkData {
    context?: string;
    sourceUrl?: string;
    icebreaker?: string;
    phone?: string;
}

export function readChatRowOpaqueDataDraftMessageCtwaContextLinkData(pbf: Pbf, end?: number) {
    return pbf.readFields(readChatRowOpaqueDataDraftMessageCtwaContextLinkDataField, {context: "" as string, sourceUrl: "" as string, icebreaker: "" as string, phone: "" as string}, end);
}
function readChatRowOpaqueDataDraftMessageCtwaContextLinkDataField(tag: number, obj: ChatRowOpaqueDataDraftMessageCtwaContextLinkData, pbf: Pbf) {
    if (tag === 1) obj.context = pbf.readString();
    else if (tag === 2) obj.sourceUrl = pbf.readString();
    else if (tag === 3) obj.icebreaker = pbf.readString();
    else if (tag === 4) obj.phone = pbf.readString();
}
export function writeChatRowOpaqueDataDraftMessageCtwaContextLinkData(obj: ChatRowOpaqueDataDraftMessageCtwaContextLinkData, pbf: Pbf) {
    if (obj.context !== undefined) pbf.writeStringField(1, obj.context);
    if (obj.sourceUrl !== undefined) pbf.writeStringField(2, obj.sourceUrl);
    if (obj.icebreaker !== undefined) pbf.writeStringField(3, obj.icebreaker);
    if (obj.phone !== undefined) pbf.writeStringField(4, obj.phone);
}

export interface ClientPayload {
    username?: number;
    passive?: boolean;
    userAgent?: ClientPayloadUserAgent;
    webInfo?: ClientPayloadWebInfo;
    pushName?: string;
    sessionId?: number;
    shortConnect?: boolean;
    connectType?: ClientPayloadConnectType;
    connectReason?: ClientPayloadConnectReason;
    shards?: number[];
    dnsSource?: ClientPayloadDNSSource;
    connectAttemptCount?: number;
    device?: number;
    devicePairingData?: ClientPayloadDevicePairingRegistrationData;
    product?: ClientPayloadProduct;
    fbCat?: Uint8Array;
    fbUserAgent?: Uint8Array;
    oc?: boolean;
    lc?: number;
    iosAppExtension?: ClientPayloadIOSAppExtension;
    fbAppId?: number;
    fbDeviceId?: Uint8Array;
    pull?: boolean;
    paddingBytes?: Uint8Array;
    yearClass?: number;
    memClass?: number;
    interopData?: ClientPayloadInteropData;
}

export function readClientPayload(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadField, {username: 0 as number, passive: false as boolean, userAgent: undefined as unknown as ClientPayloadUserAgent, webInfo: undefined as unknown as ClientPayloadWebInfo, pushName: "" as string, sessionId: 0 as number, shortConnect: false as boolean, connectType: 0 as ClientPayloadConnectType, connectReason: 0 as ClientPayloadConnectReason, shards: [] as number[], dnsSource: undefined as unknown as ClientPayloadDNSSource, connectAttemptCount: 0 as number, device: 0 as number, devicePairingData: undefined as unknown as ClientPayloadDevicePairingRegistrationData, product: 0 as ClientPayloadProduct, fbCat: undefined as unknown as Uint8Array, fbUserAgent: undefined as unknown as Uint8Array, oc: false as boolean, lc: 0 as number, iosAppExtension: 0 as ClientPayloadIOSAppExtension, fbAppId: 0 as number, fbDeviceId: undefined as unknown as Uint8Array, pull: false as boolean, paddingBytes: undefined as unknown as Uint8Array, yearClass: 0 as number, memClass: 0 as number, interopData: undefined as unknown as ClientPayloadInteropData}, end);
}
function readClientPayloadField(tag: number, obj: ClientPayload, pbf: Pbf) {
    if (tag === 1) obj.username = pbf.readVarint();
    else if (tag === 3) obj.passive = pbf.readBoolean();
    else if (tag === 5) obj.userAgent = readClientPayloadUserAgent(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.webInfo = readClientPayloadWebInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.pushName = pbf.readString();
    else if (tag === 9) obj.sessionId = pbf.readSFixed32();
    else if (tag === 10) obj.shortConnect = pbf.readBoolean();
    else if (tag === 12) obj.connectType = pbf.readVarint();
    else if (tag === 13) obj.connectReason = pbf.readVarint();
    else if (tag === 14) pbf.readPackedVarint(obj.shards, true);
    else if (tag === 15) obj.dnsSource = readClientPayloadDNSSource(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 16) obj.connectAttemptCount = pbf.readVarint();
    else if (tag === 18) obj.device = pbf.readVarint();
    else if (tag === 19) obj.devicePairingData = readClientPayloadDevicePairingRegistrationData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 20) obj.product = pbf.readVarint();
    else if (tag === 21) obj.fbCat = pbf.readBytes();
    else if (tag === 22) obj.fbUserAgent = pbf.readBytes();
    else if (tag === 23) obj.oc = pbf.readBoolean();
    else if (tag === 24) obj.lc = pbf.readVarint(true);
    else if (tag === 30) obj.iosAppExtension = pbf.readVarint();
    else if (tag === 31) obj.fbAppId = pbf.readVarint();
    else if (tag === 32) obj.fbDeviceId = pbf.readBytes();
    else if (tag === 33) obj.pull = pbf.readBoolean();
    else if (tag === 34) obj.paddingBytes = pbf.readBytes();
    else if (tag === 36) obj.yearClass = pbf.readVarint(true);
    else if (tag === 37) obj.memClass = pbf.readVarint(true);
    else if (tag === 38) obj.interopData = readClientPayloadInteropData(pbf, pbf.readVarint() + pbf.pos);
}
export function writeClientPayload(obj: ClientPayload, pbf: Pbf) {
    if (obj.username !== undefined) pbf.writeVarintField(1, obj.username);
    if (obj.passive !== undefined) pbf.writeBooleanField(3, obj.passive);
    if (obj.userAgent) pbf.writeMessage(5, writeClientPayloadUserAgent, obj.userAgent);
    if (obj.webInfo) pbf.writeMessage(6, writeClientPayloadWebInfo, obj.webInfo);
    if (obj.pushName !== undefined) pbf.writeStringField(7, obj.pushName);
    if (obj.sessionId !== undefined) pbf.writeSFixed32Field(9, obj.sessionId);
    if (obj.shortConnect !== undefined) pbf.writeBooleanField(10, obj.shortConnect);
    if (obj.connectType !== undefined) pbf.writeVarintField(12, obj.connectType);
    if (obj.connectReason !== undefined) pbf.writeVarintField(13, obj.connectReason);
    if (obj.shards) for (const item of obj.shards) pbf.writeVarintField(14, item);
    if (obj.dnsSource) pbf.writeMessage(15, writeClientPayloadDNSSource, obj.dnsSource);
    if (obj.connectAttemptCount !== undefined) pbf.writeVarintField(16, obj.connectAttemptCount);
    if (obj.device !== undefined) pbf.writeVarintField(18, obj.device);
    if (obj.devicePairingData) pbf.writeMessage(19, writeClientPayloadDevicePairingRegistrationData, obj.devicePairingData);
    if (obj.product !== undefined) pbf.writeVarintField(20, obj.product);
    if (obj.fbCat != null) pbf.writeBytesField(21, obj.fbCat);
    if (obj.fbUserAgent != null) pbf.writeBytesField(22, obj.fbUserAgent);
    if (obj.oc !== undefined) pbf.writeBooleanField(23, obj.oc);
    if (obj.lc !== undefined) pbf.writeVarintField(24, obj.lc);
    if (obj.iosAppExtension !== undefined) pbf.writeVarintField(30, obj.iosAppExtension);
    if (obj.fbAppId !== undefined) pbf.writeVarintField(31, obj.fbAppId);
    if (obj.fbDeviceId != null) pbf.writeBytesField(32, obj.fbDeviceId);
    if (obj.pull !== undefined) pbf.writeBooleanField(33, obj.pull);
    if (obj.paddingBytes != null) pbf.writeBytesField(34, obj.paddingBytes);
    if (obj.yearClass !== undefined) pbf.writeVarintField(36, obj.yearClass);
    if (obj.memClass !== undefined) pbf.writeVarintField(37, obj.memClass);
    if (obj.interopData) pbf.writeMessage(38, writeClientPayloadInteropData, obj.interopData);
}

export enum ClientPayloadConnectReason {
    PUSH = 0,
    USER_ACTIVATED = 1,
    SCHEDULED = 2,
    ERROR_RECONNECT = 3,
    NETWORK_SWITCH = 4,
    PING_RECONNECT = 5,
    UNKNOWN = 6,
}

export enum ClientPayloadConnectType {
    CELLULAR_UNKNOWN = 0,
    WIFI_UNKNOWN = 1,
    CELLULAR_EDGE = 100,
    CELLULAR_IDEN = 101,
    CELLULAR_UMTS = 102,
    CELLULAR_EVDO = 103,
    CELLULAR_GPRS = 104,
    CELLULAR_HSDPA = 105,
    CELLULAR_HSUPA = 106,
    CELLULAR_HSPA = 107,
    CELLULAR_CDMA = 108,
    CELLULAR_1XRTT = 109,
    CELLULAR_EHRPD = 110,
    CELLULAR_LTE = 111,
    CELLULAR_HSPAP = 112,
}

export enum ClientPayloadIOSAppExtension {
    SHARE_EXTENSION = 0,
    SERVICE_EXTENSION = 1,
    INTENTS_EXTENSION = 2,
}

export enum ClientPayloadProduct {
    WHATSAPP = 0,
    MESSENGER = 1,
    INTEROP = 2,
    INTEROP_MSGR = 3,
}

export interface ClientPayloadDNSSource {
    dnsMethod?: ClientPayloadDNSSourceDNSResolutionMethod;
    appCached?: boolean;
}

export function readClientPayloadDNSSource(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadDNSSourceField, {dnsMethod: 0 as ClientPayloadDNSSourceDNSResolutionMethod, appCached: false as boolean}, end);
}
function readClientPayloadDNSSourceField(tag: number, obj: ClientPayloadDNSSource, pbf: Pbf) {
    if (tag === 15) obj.dnsMethod = pbf.readVarint();
    else if (tag === 16) obj.appCached = pbf.readBoolean();
}
export function writeClientPayloadDNSSource(obj: ClientPayloadDNSSource, pbf: Pbf) {
    if (obj.dnsMethod !== undefined) pbf.writeVarintField(15, obj.dnsMethod);
    if (obj.appCached !== undefined) pbf.writeBooleanField(16, obj.appCached);
}

export enum ClientPayloadDNSSourceDNSResolutionMethod {
    SYSTEM = 0,
    GOOGLE = 1,
    HARDCODED = 2,
    OVERRIDE = 3,
    FALLBACK = 4,
}

export interface ClientPayloadDevicePairingRegistrationData {
    eRegid?: Uint8Array;
    eKeytype?: Uint8Array;
    eIdent?: Uint8Array;
    eSkeyId?: Uint8Array;
    eSkeyVal?: Uint8Array;
    eSkeySig?: Uint8Array;
    buildHash?: Uint8Array;
    deviceProps?: Uint8Array;
}

export function readClientPayloadDevicePairingRegistrationData(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadDevicePairingRegistrationDataField, {eRegid: undefined as unknown as Uint8Array, eKeytype: undefined as unknown as Uint8Array, eIdent: undefined as unknown as Uint8Array, eSkeyId: undefined as unknown as Uint8Array, eSkeyVal: undefined as unknown as Uint8Array, eSkeySig: undefined as unknown as Uint8Array, buildHash: undefined as unknown as Uint8Array, deviceProps: undefined as unknown as Uint8Array}, end);
}
function readClientPayloadDevicePairingRegistrationDataField(tag: number, obj: ClientPayloadDevicePairingRegistrationData, pbf: Pbf) {
    if (tag === 1) obj.eRegid = pbf.readBytes();
    else if (tag === 2) obj.eKeytype = pbf.readBytes();
    else if (tag === 3) obj.eIdent = pbf.readBytes();
    else if (tag === 4) obj.eSkeyId = pbf.readBytes();
    else if (tag === 5) obj.eSkeyVal = pbf.readBytes();
    else if (tag === 6) obj.eSkeySig = pbf.readBytes();
    else if (tag === 7) obj.buildHash = pbf.readBytes();
    else if (tag === 8) obj.deviceProps = pbf.readBytes();
}
export function writeClientPayloadDevicePairingRegistrationData(obj: ClientPayloadDevicePairingRegistrationData, pbf: Pbf) {
    if (obj.eRegid != null) pbf.writeBytesField(1, obj.eRegid);
    if (obj.eKeytype != null) pbf.writeBytesField(2, obj.eKeytype);
    if (obj.eIdent != null) pbf.writeBytesField(3, obj.eIdent);
    if (obj.eSkeyId != null) pbf.writeBytesField(4, obj.eSkeyId);
    if (obj.eSkeyVal != null) pbf.writeBytesField(5, obj.eSkeyVal);
    if (obj.eSkeySig != null) pbf.writeBytesField(6, obj.eSkeySig);
    if (obj.buildHash != null) pbf.writeBytesField(7, obj.buildHash);
    if (obj.deviceProps != null) pbf.writeBytesField(8, obj.deviceProps);
}

export interface ClientPayloadInteropData {
    accountId?: number;
    token?: Uint8Array;
}

export function readClientPayloadInteropData(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadInteropDataField, {accountId: 0 as number, token: undefined as unknown as Uint8Array}, end);
}
function readClientPayloadInteropDataField(tag: number, obj: ClientPayloadInteropData, pbf: Pbf) {
    if (tag === 1) obj.accountId = pbf.readVarint();
    else if (tag === 2) obj.token = pbf.readBytes();
}
export function writeClientPayloadInteropData(obj: ClientPayloadInteropData, pbf: Pbf) {
    if (obj.accountId !== undefined) pbf.writeVarintField(1, obj.accountId);
    if (obj.token != null) pbf.writeBytesField(2, obj.token);
}

export interface ClientPayloadUserAgent {
    platform?: ClientPayloadUserAgentPlatform;
    appVersion?: ClientPayloadUserAgentAppVersion;
    mcc?: string;
    mnc?: string;
    osVersion?: string;
    manufacturer?: string;
    device?: string;
    osBuildNumber?: string;
    phoneId?: string;
    releaseChannel?: ClientPayloadUserAgentReleaseChannel;
    localeLanguageIso6391?: string;
    localeCountryIso31661Alpha2?: string;
    deviceBoard?: string;
    deviceExpId?: string;
    deviceType?: ClientPayloadUserAgentDeviceType;
}

export function readClientPayloadUserAgent(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadUserAgentField, {platform: 0 as ClientPayloadUserAgentPlatform, appVersion: undefined as unknown as ClientPayloadUserAgentAppVersion, mcc: "" as string, mnc: "" as string, osVersion: "" as string, manufacturer: "" as string, device: "" as string, osBuildNumber: "" as string, phoneId: "" as string, releaseChannel: 0 as ClientPayloadUserAgentReleaseChannel, localeLanguageIso6391: "" as string, localeCountryIso31661Alpha2: "" as string, deviceBoard: "" as string, deviceExpId: "" as string, deviceType: 0 as ClientPayloadUserAgentDeviceType}, end);
}
function readClientPayloadUserAgentField(tag: number, obj: ClientPayloadUserAgent, pbf: Pbf) {
    if (tag === 1) obj.platform = pbf.readVarint();
    else if (tag === 2) obj.appVersion = readClientPayloadUserAgentAppVersion(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.mcc = pbf.readString();
    else if (tag === 4) obj.mnc = pbf.readString();
    else if (tag === 5) obj.osVersion = pbf.readString();
    else if (tag === 6) obj.manufacturer = pbf.readString();
    else if (tag === 7) obj.device = pbf.readString();
    else if (tag === 8) obj.osBuildNumber = pbf.readString();
    else if (tag === 9) obj.phoneId = pbf.readString();
    else if (tag === 10) obj.releaseChannel = pbf.readVarint();
    else if (tag === 11) obj.localeLanguageIso6391 = pbf.readString();
    else if (tag === 12) obj.localeCountryIso31661Alpha2 = pbf.readString();
    else if (tag === 13) obj.deviceBoard = pbf.readString();
    else if (tag === 14) obj.deviceExpId = pbf.readString();
    else if (tag === 15) obj.deviceType = pbf.readVarint();
}
export function writeClientPayloadUserAgent(obj: ClientPayloadUserAgent, pbf: Pbf) {
    if (obj.platform !== undefined) pbf.writeVarintField(1, obj.platform);
    if (obj.appVersion) pbf.writeMessage(2, writeClientPayloadUserAgentAppVersion, obj.appVersion);
    if (obj.mcc !== undefined) pbf.writeStringField(3, obj.mcc);
    if (obj.mnc !== undefined) pbf.writeStringField(4, obj.mnc);
    if (obj.osVersion !== undefined) pbf.writeStringField(5, obj.osVersion);
    if (obj.manufacturer !== undefined) pbf.writeStringField(6, obj.manufacturer);
    if (obj.device !== undefined) pbf.writeStringField(7, obj.device);
    if (obj.osBuildNumber !== undefined) pbf.writeStringField(8, obj.osBuildNumber);
    if (obj.phoneId !== undefined) pbf.writeStringField(9, obj.phoneId);
    if (obj.releaseChannel !== undefined) pbf.writeVarintField(10, obj.releaseChannel);
    if (obj.localeLanguageIso6391 !== undefined) pbf.writeStringField(11, obj.localeLanguageIso6391);
    if (obj.localeCountryIso31661Alpha2 !== undefined) pbf.writeStringField(12, obj.localeCountryIso31661Alpha2);
    if (obj.deviceBoard !== undefined) pbf.writeStringField(13, obj.deviceBoard);
    if (obj.deviceExpId !== undefined) pbf.writeStringField(14, obj.deviceExpId);
    if (obj.deviceType !== undefined) pbf.writeVarintField(15, obj.deviceType);
}

export enum ClientPayloadUserAgentDeviceType {
    PHONE = 0,
    TABLET = 1,
    DESKTOP = 2,
    WEARABLE = 3,
    VR = 4,
}

export enum ClientPayloadUserAgentPlatform {
    ANDROID = 0,
    IOS = 1,
    WINDOWS_PHONE = 2,
    BLACKBERRY = 3,
    BLACKBERRYX = 4,
    S40 = 5,
    S60 = 6,
    PYTHON_CLIENT = 7,
    TIZEN = 8,
    ENTERPRISE = 9,
    SMB_ANDROID = 10,
    KAIOS = 11,
    SMB_IOS = 12,
    WINDOWS = 13,
    WEB = 14,
    PORTAL = 15,
    GREEN_ANDROID = 16,
    GREEN_IPHONE = 17,
    BLUE_ANDROID = 18,
    BLUE_IPHONE = 19,
    FBLITE_ANDROID = 20,
    MLITE_ANDROID = 21,
    IGLITE_ANDROID = 22,
    PAGE = 23,
    MACOS = 24,
    OCULUS_MSG = 25,
    OCULUS_CALL = 26,
    MILAN = 27,
    CAPI = 28,
    WEAROS = 29,
    ARDEVICE = 30,
    VRDEVICE = 31,
    BLUE_WEB = 32,
    IPAD = 33,
    TEST = 34,
    SMART_GLASSES = 35,
}

export enum ClientPayloadUserAgentReleaseChannel {
    RELEASE = 0,
    BETA = 1,
    ALPHA = 2,
    DEBUG = 3,
}

export interface ClientPayloadUserAgentAppVersion {
    primary?: number;
    secondary?: number;
    tertiary?: number;
    quaternary?: number;
    quinary?: number;
}

export function readClientPayloadUserAgentAppVersion(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadUserAgentAppVersionField, {primary: 0 as number, secondary: 0 as number, tertiary: 0 as number, quaternary: 0 as number, quinary: 0 as number}, end);
}
function readClientPayloadUserAgentAppVersionField(tag: number, obj: ClientPayloadUserAgentAppVersion, pbf: Pbf) {
    if (tag === 1) obj.primary = pbf.readVarint();
    else if (tag === 2) obj.secondary = pbf.readVarint();
    else if (tag === 3) obj.tertiary = pbf.readVarint();
    else if (tag === 4) obj.quaternary = pbf.readVarint();
    else if (tag === 5) obj.quinary = pbf.readVarint();
}
export function writeClientPayloadUserAgentAppVersion(obj: ClientPayloadUserAgentAppVersion, pbf: Pbf) {
    if (obj.primary !== undefined) pbf.writeVarintField(1, obj.primary);
    if (obj.secondary !== undefined) pbf.writeVarintField(2, obj.secondary);
    if (obj.tertiary !== undefined) pbf.writeVarintField(3, obj.tertiary);
    if (obj.quaternary !== undefined) pbf.writeVarintField(4, obj.quaternary);
    if (obj.quinary !== undefined) pbf.writeVarintField(5, obj.quinary);
}

export interface ClientPayloadWebInfo {
    refToken?: string;
    version?: string;
    webdPayload?: ClientPayloadWebInfoWebdPayload;
    webSubPlatform?: ClientPayloadWebInfoWebSubPlatform;
}

export function readClientPayloadWebInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadWebInfoField, {refToken: "" as string, version: "" as string, webdPayload: undefined as unknown as ClientPayloadWebInfoWebdPayload, webSubPlatform: 0 as ClientPayloadWebInfoWebSubPlatform}, end);
}
function readClientPayloadWebInfoField(tag: number, obj: ClientPayloadWebInfo, pbf: Pbf) {
    if (tag === 1) obj.refToken = pbf.readString();
    else if (tag === 2) obj.version = pbf.readString();
    else if (tag === 3) obj.webdPayload = readClientPayloadWebInfoWebdPayload(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.webSubPlatform = pbf.readVarint();
}
export function writeClientPayloadWebInfo(obj: ClientPayloadWebInfo, pbf: Pbf) {
    if (obj.refToken !== undefined) pbf.writeStringField(1, obj.refToken);
    if (obj.version !== undefined) pbf.writeStringField(2, obj.version);
    if (obj.webdPayload) pbf.writeMessage(3, writeClientPayloadWebInfoWebdPayload, obj.webdPayload);
    if (obj.webSubPlatform !== undefined) pbf.writeVarintField(4, obj.webSubPlatform);
}

export enum ClientPayloadWebInfoWebSubPlatform {
    WEB_BROWSER = 0,
    APP_STORE = 1,
    WIN_STORE = 2,
    DARWIN = 3,
    WIN32 = 4,
}

export interface ClientPayloadWebInfoWebdPayload {
    usesParticipantInKey?: boolean;
    supportsStarredMessages?: boolean;
    supportsDocumentMessages?: boolean;
    supportsUrlMessages?: boolean;
    supportsMediaRetry?: boolean;
    supportsE2EImage?: boolean;
    supportsE2EVideo?: boolean;
    supportsE2EAudio?: boolean;
    supportsE2EDocument?: boolean;
    documentTypes?: string;
    features?: Uint8Array;
}

export function readClientPayloadWebInfoWebdPayload(pbf: Pbf, end?: number) {
    return pbf.readFields(readClientPayloadWebInfoWebdPayloadField, {usesParticipantInKey: false as boolean, supportsStarredMessages: false as boolean, supportsDocumentMessages: false as boolean, supportsUrlMessages: false as boolean, supportsMediaRetry: false as boolean, supportsE2EImage: false as boolean, supportsE2EVideo: false as boolean, supportsE2EAudio: false as boolean, supportsE2EDocument: false as boolean, documentTypes: "" as string, features: undefined as unknown as Uint8Array}, end);
}
function readClientPayloadWebInfoWebdPayloadField(tag: number, obj: ClientPayloadWebInfoWebdPayload, pbf: Pbf) {
    if (tag === 1) obj.usesParticipantInKey = pbf.readBoolean();
    else if (tag === 2) obj.supportsStarredMessages = pbf.readBoolean();
    else if (tag === 3) obj.supportsDocumentMessages = pbf.readBoolean();
    else if (tag === 4) obj.supportsUrlMessages = pbf.readBoolean();
    else if (tag === 5) obj.supportsMediaRetry = pbf.readBoolean();
    else if (tag === 6) obj.supportsE2EImage = pbf.readBoolean();
    else if (tag === 7) obj.supportsE2EVideo = pbf.readBoolean();
    else if (tag === 8) obj.supportsE2EAudio = pbf.readBoolean();
    else if (tag === 9) obj.supportsE2EDocument = pbf.readBoolean();
    else if (tag === 10) obj.documentTypes = pbf.readString();
    else if (tag === 11) obj.features = pbf.readBytes();
}
export function writeClientPayloadWebInfoWebdPayload(obj: ClientPayloadWebInfoWebdPayload, pbf: Pbf) {
    if (obj.usesParticipantInKey !== undefined) pbf.writeBooleanField(1, obj.usesParticipantInKey);
    if (obj.supportsStarredMessages !== undefined) pbf.writeBooleanField(2, obj.supportsStarredMessages);
    if (obj.supportsDocumentMessages !== undefined) pbf.writeBooleanField(3, obj.supportsDocumentMessages);
    if (obj.supportsUrlMessages !== undefined) pbf.writeBooleanField(4, obj.supportsUrlMessages);
    if (obj.supportsMediaRetry !== undefined) pbf.writeBooleanField(5, obj.supportsMediaRetry);
    if (obj.supportsE2EImage !== undefined) pbf.writeBooleanField(6, obj.supportsE2EImage);
    if (obj.supportsE2EVideo !== undefined) pbf.writeBooleanField(7, obj.supportsE2EVideo);
    if (obj.supportsE2EAudio !== undefined) pbf.writeBooleanField(8, obj.supportsE2EAudio);
    if (obj.supportsE2EDocument !== undefined) pbf.writeBooleanField(9, obj.supportsE2EDocument);
    if (obj.documentTypes !== undefined) pbf.writeStringField(10, obj.documentTypes);
    if (obj.features != null) pbf.writeBytesField(11, obj.features);
}

export interface CommentMetadata {
    commentParentKey?: MessageKey;
    replyCount?: number;
}

export function readCommentMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readCommentMetadataField, {commentParentKey: undefined as unknown as MessageKey, replyCount: 0 as number}, end);
}
function readCommentMetadataField(tag: number, obj: CommentMetadata, pbf: Pbf) {
    if (tag === 1) obj.commentParentKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.replyCount = pbf.readVarint();
}
export function writeCommentMetadata(obj: CommentMetadata, pbf: Pbf) {
    if (obj.commentParentKey) pbf.writeMessage(1, writeMessageKey, obj.commentParentKey);
    if (obj.replyCount !== undefined) pbf.writeVarintField(2, obj.replyCount);
}

export interface ContextInfo {
    stanzaId?: string;
    participant?: string;
    quotedMessage?: Message;
    remoteJid?: string;
    mentionedJid?: string[];
    conversionSource?: string;
    conversionData?: Uint8Array;
    conversionDelaySeconds?: number;
    forwardingScore?: number;
    isForwarded?: boolean;
    quotedAd?: ContextInfoAdReplyInfo;
    placeholderKey?: MessageKey;
    expiration?: number;
    ephemeralSettingTimestamp?: number;
    ephemeralSharedSecret?: Uint8Array;
    externalAdReply?: ContextInfoExternalAdReplyInfo;
    entryPointConversionSource?: string;
    entryPointConversionApp?: string;
    entryPointConversionDelaySeconds?: number;
    disappearingMode?: DisappearingMode;
    actionLink?: ActionLink;
    groupSubject?: string;
    parentGroupJid?: string;
    trustBannerType?: string;
    trustBannerAction?: number;
    isSampled?: boolean;
    groupMentions?: GroupMention[];
    utm?: ContextInfoUTMInfo;
    forwardedNewsletterMessageInfo?: ContextInfoForwardedNewsletterMessageInfo;
    businessMessageForwardInfo?: ContextInfoBusinessMessageForwardInfo;
    smbClientCampaignId?: string;
    smbServerCampaignId?: string;
    dataSharingContext?: ContextInfoDataSharingContext;
}

export function readContextInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readContextInfoField, {stanzaId: "" as string, participant: "" as string, quotedMessage: undefined as unknown as Message, remoteJid: "" as string, mentionedJid: [] as string[], conversionSource: "" as string, conversionData: undefined as unknown as Uint8Array, conversionDelaySeconds: 0 as number, forwardingScore: 0 as number, isForwarded: false as boolean, quotedAd: undefined as unknown as ContextInfoAdReplyInfo, placeholderKey: undefined as unknown as MessageKey, expiration: 0 as number, ephemeralSettingTimestamp: 0 as number, ephemeralSharedSecret: undefined as unknown as Uint8Array, externalAdReply: undefined as unknown as ContextInfoExternalAdReplyInfo, entryPointConversionSource: "" as string, entryPointConversionApp: "" as string, entryPointConversionDelaySeconds: 0 as number, disappearingMode: undefined as unknown as DisappearingMode, actionLink: undefined as unknown as ActionLink, groupSubject: "" as string, parentGroupJid: "" as string, trustBannerType: "" as string, trustBannerAction: 0 as number, isSampled: false as boolean, groupMentions: [] as GroupMention[], utm: undefined as unknown as ContextInfoUTMInfo, forwardedNewsletterMessageInfo: undefined as unknown as ContextInfoForwardedNewsletterMessageInfo, businessMessageForwardInfo: undefined as unknown as ContextInfoBusinessMessageForwardInfo, smbClientCampaignId: "" as string, smbServerCampaignId: "" as string, dataSharingContext: undefined as unknown as ContextInfoDataSharingContext}, end);
}
function readContextInfoField(tag: number, obj: ContextInfo, pbf: Pbf) {
    if (tag === 1) obj.stanzaId = pbf.readString();
    else if (tag === 2) obj.participant = pbf.readString();
    else if (tag === 3) obj.quotedMessage = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.remoteJid = pbf.readString();
    else if (tag === 15) obj.mentionedJid?.push(pbf.readString());
    else if (tag === 18) obj.conversionSource = pbf.readString();
    else if (tag === 19) obj.conversionData = pbf.readBytes();
    else if (tag === 20) obj.conversionDelaySeconds = pbf.readVarint();
    else if (tag === 21) obj.forwardingScore = pbf.readVarint();
    else if (tag === 22) obj.isForwarded = pbf.readBoolean();
    else if (tag === 23) obj.quotedAd = readContextInfoAdReplyInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 24) obj.placeholderKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 25) obj.expiration = pbf.readVarint();
    else if (tag === 26) obj.ephemeralSettingTimestamp = pbf.readVarint(true);
    else if (tag === 27) obj.ephemeralSharedSecret = pbf.readBytes();
    else if (tag === 28) obj.externalAdReply = readContextInfoExternalAdReplyInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 29) obj.entryPointConversionSource = pbf.readString();
    else if (tag === 30) obj.entryPointConversionApp = pbf.readString();
    else if (tag === 31) obj.entryPointConversionDelaySeconds = pbf.readVarint();
    else if (tag === 32) obj.disappearingMode = readDisappearingMode(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 33) obj.actionLink = readActionLink(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 34) obj.groupSubject = pbf.readString();
    else if (tag === 35) obj.parentGroupJid = pbf.readString();
    else if (tag === 37) obj.trustBannerType = pbf.readString();
    else if (tag === 38) obj.trustBannerAction = pbf.readVarint();
    else if (tag === 39) obj.isSampled = pbf.readBoolean();
    else if (tag === 40) obj.groupMentions?.push(readGroupMention(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 41) obj.utm = readContextInfoUTMInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 43) obj.forwardedNewsletterMessageInfo = readContextInfoForwardedNewsletterMessageInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 44) obj.businessMessageForwardInfo = readContextInfoBusinessMessageForwardInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 45) obj.smbClientCampaignId = pbf.readString();
    else if (tag === 46) obj.smbServerCampaignId = pbf.readString();
    else if (tag === 47) obj.dataSharingContext = readContextInfoDataSharingContext(pbf, pbf.readVarint() + pbf.pos);
}
export function writeContextInfo(obj: ContextInfo, pbf: Pbf) {
    if (obj.stanzaId !== undefined) pbf.writeStringField(1, obj.stanzaId);
    if (obj.participant !== undefined) pbf.writeStringField(2, obj.participant);
    if (obj.quotedMessage) pbf.writeMessage(3, writeMessage, obj.quotedMessage);
    if (obj.remoteJid !== undefined) pbf.writeStringField(4, obj.remoteJid);
    if (obj.mentionedJid) for (const item of obj.mentionedJid) pbf.writeStringField(15, item);
    if (obj.conversionSource !== undefined) pbf.writeStringField(18, obj.conversionSource);
    if (obj.conversionData != null) pbf.writeBytesField(19, obj.conversionData);
    if (obj.conversionDelaySeconds !== undefined) pbf.writeVarintField(20, obj.conversionDelaySeconds);
    if (obj.forwardingScore !== undefined) pbf.writeVarintField(21, obj.forwardingScore);
    if (obj.isForwarded !== undefined) pbf.writeBooleanField(22, obj.isForwarded);
    if (obj.quotedAd) pbf.writeMessage(23, writeContextInfoAdReplyInfo, obj.quotedAd);
    if (obj.placeholderKey) pbf.writeMessage(24, writeMessageKey, obj.placeholderKey);
    if (obj.expiration !== undefined) pbf.writeVarintField(25, obj.expiration);
    if (obj.ephemeralSettingTimestamp !== undefined) pbf.writeVarintField(26, obj.ephemeralSettingTimestamp);
    if (obj.ephemeralSharedSecret != null) pbf.writeBytesField(27, obj.ephemeralSharedSecret);
    if (obj.externalAdReply) pbf.writeMessage(28, writeContextInfoExternalAdReplyInfo, obj.externalAdReply);
    if (obj.entryPointConversionSource !== undefined) pbf.writeStringField(29, obj.entryPointConversionSource);
    if (obj.entryPointConversionApp !== undefined) pbf.writeStringField(30, obj.entryPointConversionApp);
    if (obj.entryPointConversionDelaySeconds !== undefined) pbf.writeVarintField(31, obj.entryPointConversionDelaySeconds);
    if (obj.disappearingMode) pbf.writeMessage(32, writeDisappearingMode, obj.disappearingMode);
    if (obj.actionLink) pbf.writeMessage(33, writeActionLink, obj.actionLink);
    if (obj.groupSubject !== undefined) pbf.writeStringField(34, obj.groupSubject);
    if (obj.parentGroupJid !== undefined) pbf.writeStringField(35, obj.parentGroupJid);
    if (obj.trustBannerType !== undefined) pbf.writeStringField(37, obj.trustBannerType);
    if (obj.trustBannerAction !== undefined) pbf.writeVarintField(38, obj.trustBannerAction);
    if (obj.isSampled !== undefined) pbf.writeBooleanField(39, obj.isSampled);
    if (obj.groupMentions) for (const item of obj.groupMentions) pbf.writeMessage(40, writeGroupMention, item);
    if (obj.utm) pbf.writeMessage(41, writeContextInfoUTMInfo, obj.utm);
    if (obj.forwardedNewsletterMessageInfo) pbf.writeMessage(43, writeContextInfoForwardedNewsletterMessageInfo, obj.forwardedNewsletterMessageInfo);
    if (obj.businessMessageForwardInfo) pbf.writeMessage(44, writeContextInfoBusinessMessageForwardInfo, obj.businessMessageForwardInfo);
    if (obj.smbClientCampaignId !== undefined) pbf.writeStringField(45, obj.smbClientCampaignId);
    if (obj.smbServerCampaignId !== undefined) pbf.writeStringField(46, obj.smbServerCampaignId);
    if (obj.dataSharingContext) pbf.writeMessage(47, writeContextInfoDataSharingContext, obj.dataSharingContext);
}

export interface ContextInfoAdReplyInfo {
    advertiserName?: string;
    mediaType?: ContextInfoAdReplyInfoMediaType;
    jpegThumbnail?: Uint8Array;
    caption?: string;
}

export function readContextInfoAdReplyInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readContextInfoAdReplyInfoField, {advertiserName: "" as string, mediaType: 0 as ContextInfoAdReplyInfoMediaType, jpegThumbnail: undefined as unknown as Uint8Array, caption: "" as string}, end);
}
function readContextInfoAdReplyInfoField(tag: number, obj: ContextInfoAdReplyInfo, pbf: Pbf) {
    if (tag === 1) obj.advertiserName = pbf.readString();
    else if (tag === 2) obj.mediaType = pbf.readVarint();
    else if (tag === 16) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 17) obj.caption = pbf.readString();
}
export function writeContextInfoAdReplyInfo(obj: ContextInfoAdReplyInfo, pbf: Pbf) {
    if (obj.advertiserName !== undefined) pbf.writeStringField(1, obj.advertiserName);
    if (obj.mediaType !== undefined) pbf.writeVarintField(2, obj.mediaType);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(16, obj.jpegThumbnail);
    if (obj.caption !== undefined) pbf.writeStringField(17, obj.caption);
}

export enum ContextInfoAdReplyInfoMediaType {
    NONE = 0,
    IMAGE = 1,
    VIDEO = 2,
}

export interface ContextInfoBusinessMessageForwardInfo {
    businessOwnerJid?: string;
}

export function readContextInfoBusinessMessageForwardInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readContextInfoBusinessMessageForwardInfoField, {businessOwnerJid: "" as string}, end);
}
function readContextInfoBusinessMessageForwardInfoField(tag: number, obj: ContextInfoBusinessMessageForwardInfo, pbf: Pbf) {
    if (tag === 1) obj.businessOwnerJid = pbf.readString();
}
export function writeContextInfoBusinessMessageForwardInfo(obj: ContextInfoBusinessMessageForwardInfo, pbf: Pbf) {
    if (obj.businessOwnerJid !== undefined) pbf.writeStringField(1, obj.businessOwnerJid);
}

export interface ContextInfoDataSharingContext {
    showMmDisclosure?: boolean;
}

export function readContextInfoDataSharingContext(pbf: Pbf, end?: number) {
    return pbf.readFields(readContextInfoDataSharingContextField, {showMmDisclosure: false as boolean}, end);
}
function readContextInfoDataSharingContextField(tag: number, obj: ContextInfoDataSharingContext, pbf: Pbf) {
    if (tag === 1) obj.showMmDisclosure = pbf.readBoolean();
}
export function writeContextInfoDataSharingContext(obj: ContextInfoDataSharingContext, pbf: Pbf) {
    if (obj.showMmDisclosure !== undefined) pbf.writeBooleanField(1, obj.showMmDisclosure);
}

export interface ContextInfoExternalAdReplyInfo {
    title?: string;
    body?: string;
    mediaType?: ContextInfoExternalAdReplyInfoMediaType;
    thumbnailUrl?: string;
    mediaUrl?: string;
    thumbnail?: Uint8Array;
    sourceType?: string;
    sourceId?: string;
    sourceUrl?: string;
    containsAutoReply?: boolean;
    renderLargerThumbnail?: boolean;
    showAdAttribution?: boolean;
    ctwaClid?: string;
    ref?: string;
}

export function readContextInfoExternalAdReplyInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readContextInfoExternalAdReplyInfoField, {title: "" as string, body: "" as string, mediaType: 0 as ContextInfoExternalAdReplyInfoMediaType, thumbnailUrl: "" as string, mediaUrl: "" as string, thumbnail: undefined as unknown as Uint8Array, sourceType: "" as string, sourceId: "" as string, sourceUrl: "" as string, containsAutoReply: false as boolean, renderLargerThumbnail: false as boolean, showAdAttribution: false as boolean, ctwaClid: "" as string, ref: "" as string}, end);
}
function readContextInfoExternalAdReplyInfoField(tag: number, obj: ContextInfoExternalAdReplyInfo, pbf: Pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.body = pbf.readString();
    else if (tag === 3) obj.mediaType = pbf.readVarint();
    else if (tag === 4) obj.thumbnailUrl = pbf.readString();
    else if (tag === 5) obj.mediaUrl = pbf.readString();
    else if (tag === 6) obj.thumbnail = pbf.readBytes();
    else if (tag === 7) obj.sourceType = pbf.readString();
    else if (tag === 8) obj.sourceId = pbf.readString();
    else if (tag === 9) obj.sourceUrl = pbf.readString();
    else if (tag === 10) obj.containsAutoReply = pbf.readBoolean();
    else if (tag === 11) obj.renderLargerThumbnail = pbf.readBoolean();
    else if (tag === 12) obj.showAdAttribution = pbf.readBoolean();
    else if (tag === 13) obj.ctwaClid = pbf.readString();
    else if (tag === 14) obj.ref = pbf.readString();
}
export function writeContextInfoExternalAdReplyInfo(obj: ContextInfoExternalAdReplyInfo, pbf: Pbf) {
    if (obj.title !== undefined) pbf.writeStringField(1, obj.title);
    if (obj.body !== undefined) pbf.writeStringField(2, obj.body);
    if (obj.mediaType !== undefined) pbf.writeVarintField(3, obj.mediaType);
    if (obj.thumbnailUrl !== undefined) pbf.writeStringField(4, obj.thumbnailUrl);
    if (obj.mediaUrl !== undefined) pbf.writeStringField(5, obj.mediaUrl);
    if (obj.thumbnail != null) pbf.writeBytesField(6, obj.thumbnail);
    if (obj.sourceType !== undefined) pbf.writeStringField(7, obj.sourceType);
    if (obj.sourceId !== undefined) pbf.writeStringField(8, obj.sourceId);
    if (obj.sourceUrl !== undefined) pbf.writeStringField(9, obj.sourceUrl);
    if (obj.containsAutoReply !== undefined) pbf.writeBooleanField(10, obj.containsAutoReply);
    if (obj.renderLargerThumbnail !== undefined) pbf.writeBooleanField(11, obj.renderLargerThumbnail);
    if (obj.showAdAttribution !== undefined) pbf.writeBooleanField(12, obj.showAdAttribution);
    if (obj.ctwaClid !== undefined) pbf.writeStringField(13, obj.ctwaClid);
    if (obj.ref !== undefined) pbf.writeStringField(14, obj.ref);
}

export enum ContextInfoExternalAdReplyInfoMediaType {
    NONE = 0,
    IMAGE = 1,
    VIDEO = 2,
}

export interface ContextInfoForwardedNewsletterMessageInfo {
    newsletterJid?: string;
    serverMessageId?: number;
    newsletterName?: string;
    contentType?: ContextInfoForwardedNewsletterMessageInfoContentType;
    accessibilityText?: string;
}

export function readContextInfoForwardedNewsletterMessageInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readContextInfoForwardedNewsletterMessageInfoField, {newsletterJid: "" as string, serverMessageId: 0 as number, newsletterName: "" as string, contentType: 0 as ContextInfoForwardedNewsletterMessageInfoContentType, accessibilityText: "" as string}, end);
}
function readContextInfoForwardedNewsletterMessageInfoField(tag: number, obj: ContextInfoForwardedNewsletterMessageInfo, pbf: Pbf) {
    if (tag === 1) obj.newsletterJid = pbf.readString();
    else if (tag === 2) obj.serverMessageId = pbf.readVarint(true);
    else if (tag === 3) obj.newsletterName = pbf.readString();
    else if (tag === 4) obj.contentType = pbf.readVarint();
    else if (tag === 5) obj.accessibilityText = pbf.readString();
}
export function writeContextInfoForwardedNewsletterMessageInfo(obj: ContextInfoForwardedNewsletterMessageInfo, pbf: Pbf) {
    if (obj.newsletterJid !== undefined) pbf.writeStringField(1, obj.newsletterJid);
    if (obj.serverMessageId !== undefined) pbf.writeVarintField(2, obj.serverMessageId);
    if (obj.newsletterName !== undefined) pbf.writeStringField(3, obj.newsletterName);
    if (obj.contentType !== undefined) pbf.writeVarintField(4, obj.contentType);
    if (obj.accessibilityText !== undefined) pbf.writeStringField(5, obj.accessibilityText);
}

export enum ContextInfoForwardedNewsletterMessageInfoContentType {
    UPDATE = 1,
    UPDATE_CARD = 2,
    LINK_CARD = 3,
}

export interface ContextInfoUTMInfo {
    utmSource?: string;
    utmCampaign?: string;
}

export function readContextInfoUTMInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readContextInfoUTMInfoField, {utmSource: "" as string, utmCampaign: "" as string}, end);
}
function readContextInfoUTMInfoField(tag: number, obj: ContextInfoUTMInfo, pbf: Pbf) {
    if (tag === 1) obj.utmSource = pbf.readString();
    else if (tag === 2) obj.utmCampaign = pbf.readString();
}
export function writeContextInfoUTMInfo(obj: ContextInfoUTMInfo, pbf: Pbf) {
    if (obj.utmSource !== undefined) pbf.writeStringField(1, obj.utmSource);
    if (obj.utmCampaign !== undefined) pbf.writeStringField(2, obj.utmCampaign);
}

export interface Conversation {
    id: string;
    messages?: HistorySyncMsg[];
    newJid?: string;
    oldJid?: string;
    lastMsgTimestamp?: number;
    unreadCount?: number;
    readOnly?: boolean;
    endOfHistoryTransfer?: boolean;
    ephemeralExpiration?: number;
    ephemeralSettingTimestamp?: number;
    endOfHistoryTransferType?: ConversationEndOfHistoryTransferType;
    conversationTimestamp?: number;
    name?: string;
    pHash?: string;
    notSpam?: boolean;
    archived?: boolean;
    disappearingMode?: DisappearingMode;
    unreadMentionCount?: number;
    markedAsUnread?: boolean;
    participant?: GroupParticipant[];
    tcToken?: Uint8Array;
    tcTokenTimestamp?: number;
    contactPrimaryIdentityKey?: Uint8Array;
    pinned?: number;
    muteEndTime?: number;
    wallpaper?: WallpaperSettings;
    mediaVisibility?: MediaVisibility;
    tcTokenSenderTimestamp?: number;
    suspended?: boolean;
    terminated?: boolean;
    createdAt?: number;
    createdBy?: string;
    description?: string;
    support?: boolean;
    isParentGroup?: boolean;
    parentGroupId?: string;
    isDefaultSubgroup?: boolean;
    displayName?: string;
    pnJid?: string;
    shareOwnPn?: boolean;
    pnhDuplicateLidThread?: boolean;
    lidJid?: string;
    username?: string;
    lidOriginType?: string;
    commentsCount?: number;
}

export function readConversation(pbf: Pbf, end?: number) {
    return pbf.readFields(readConversationField, {id: "" as string, messages: [] as HistorySyncMsg[], newJid: "" as string, oldJid: "" as string, lastMsgTimestamp: 0 as number, unreadCount: 0 as number, readOnly: false as boolean, endOfHistoryTransfer: false as boolean, ephemeralExpiration: 0 as number, ephemeralSettingTimestamp: 0 as number, endOfHistoryTransferType: 0 as ConversationEndOfHistoryTransferType, conversationTimestamp: 0 as number, name: "" as string, pHash: "" as string, notSpam: false as boolean, archived: false as boolean, disappearingMode: undefined as unknown as DisappearingMode, unreadMentionCount: 0 as number, markedAsUnread: false as boolean, participant: [] as GroupParticipant[], tcToken: undefined as unknown as Uint8Array, tcTokenTimestamp: 0 as number, contactPrimaryIdentityKey: undefined as unknown as Uint8Array, pinned: 0 as number, muteEndTime: 0 as number, wallpaper: undefined as unknown as WallpaperSettings, mediaVisibility: 0 as MediaVisibility, tcTokenSenderTimestamp: 0 as number, suspended: false as boolean, terminated: false as boolean, createdAt: 0 as number, createdBy: "" as string, description: "" as string, support: false as boolean, isParentGroup: false as boolean, parentGroupId: "" as string, isDefaultSubgroup: false as boolean, displayName: "" as string, pnJid: "" as string, shareOwnPn: false as boolean, pnhDuplicateLidThread: false as boolean, lidJid: "" as string, username: "" as string, lidOriginType: "" as string, commentsCount: 0 as number}, end);
}
function readConversationField(tag: number, obj: Conversation, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readString();
    else if (tag === 2) obj.messages?.push(readHistorySyncMsg(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.newJid = pbf.readString();
    else if (tag === 4) obj.oldJid = pbf.readString();
    else if (tag === 5) obj.lastMsgTimestamp = pbf.readVarint();
    else if (tag === 6) obj.unreadCount = pbf.readVarint();
    else if (tag === 7) obj.readOnly = pbf.readBoolean();
    else if (tag === 8) obj.endOfHistoryTransfer = pbf.readBoolean();
    else if (tag === 9) obj.ephemeralExpiration = pbf.readVarint();
    else if (tag === 10) obj.ephemeralSettingTimestamp = pbf.readVarint(true);
    else if (tag === 11) obj.endOfHistoryTransferType = pbf.readVarint();
    else if (tag === 12) obj.conversationTimestamp = pbf.readVarint();
    else if (tag === 13) obj.name = pbf.readString();
    else if (tag === 14) obj.pHash = pbf.readString();
    else if (tag === 15) obj.notSpam = pbf.readBoolean();
    else if (tag === 16) obj.archived = pbf.readBoolean();
    else if (tag === 17) obj.disappearingMode = readDisappearingMode(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.unreadMentionCount = pbf.readVarint();
    else if (tag === 19) obj.markedAsUnread = pbf.readBoolean();
    else if (tag === 20) obj.participant?.push(readGroupParticipant(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 21) obj.tcToken = pbf.readBytes();
    else if (tag === 22) obj.tcTokenTimestamp = pbf.readVarint();
    else if (tag === 23) obj.contactPrimaryIdentityKey = pbf.readBytes();
    else if (tag === 24) obj.pinned = pbf.readVarint();
    else if (tag === 25) obj.muteEndTime = pbf.readVarint();
    else if (tag === 26) obj.wallpaper = readWallpaperSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 27) obj.mediaVisibility = pbf.readVarint();
    else if (tag === 28) obj.tcTokenSenderTimestamp = pbf.readVarint();
    else if (tag === 29) obj.suspended = pbf.readBoolean();
    else if (tag === 30) obj.terminated = pbf.readBoolean();
    else if (tag === 31) obj.createdAt = pbf.readVarint();
    else if (tag === 32) obj.createdBy = pbf.readString();
    else if (tag === 33) obj.description = pbf.readString();
    else if (tag === 34) obj.support = pbf.readBoolean();
    else if (tag === 35) obj.isParentGroup = pbf.readBoolean();
    else if (tag === 37) obj.parentGroupId = pbf.readString();
    else if (tag === 36) obj.isDefaultSubgroup = pbf.readBoolean();
    else if (tag === 38) obj.displayName = pbf.readString();
    else if (tag === 39) obj.pnJid = pbf.readString();
    else if (tag === 40) obj.shareOwnPn = pbf.readBoolean();
    else if (tag === 41) obj.pnhDuplicateLidThread = pbf.readBoolean();
    else if (tag === 42) obj.lidJid = pbf.readString();
    else if (tag === 43) obj.username = pbf.readString();
    else if (tag === 44) obj.lidOriginType = pbf.readString();
    else if (tag === 45) obj.commentsCount = pbf.readVarint();
}
export function writeConversation(obj: Conversation, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeStringField(1, obj.id);
    if (obj.messages) for (const item of obj.messages) pbf.writeMessage(2, writeHistorySyncMsg, item);
    if (obj.newJid !== undefined) pbf.writeStringField(3, obj.newJid);
    if (obj.oldJid !== undefined) pbf.writeStringField(4, obj.oldJid);
    if (obj.lastMsgTimestamp !== undefined) pbf.writeVarintField(5, obj.lastMsgTimestamp);
    if (obj.unreadCount !== undefined) pbf.writeVarintField(6, obj.unreadCount);
    if (obj.readOnly !== undefined) pbf.writeBooleanField(7, obj.readOnly);
    if (obj.endOfHistoryTransfer !== undefined) pbf.writeBooleanField(8, obj.endOfHistoryTransfer);
    if (obj.ephemeralExpiration !== undefined) pbf.writeVarintField(9, obj.ephemeralExpiration);
    if (obj.ephemeralSettingTimestamp !== undefined) pbf.writeVarintField(10, obj.ephemeralSettingTimestamp);
    if (obj.endOfHistoryTransferType !== undefined) pbf.writeVarintField(11, obj.endOfHistoryTransferType);
    if (obj.conversationTimestamp !== undefined) pbf.writeVarintField(12, obj.conversationTimestamp);
    if (obj.name !== undefined) pbf.writeStringField(13, obj.name);
    if (obj.pHash !== undefined) pbf.writeStringField(14, obj.pHash);
    if (obj.notSpam !== undefined) pbf.writeBooleanField(15, obj.notSpam);
    if (obj.archived !== undefined) pbf.writeBooleanField(16, obj.archived);
    if (obj.disappearingMode) pbf.writeMessage(17, writeDisappearingMode, obj.disappearingMode);
    if (obj.unreadMentionCount !== undefined) pbf.writeVarintField(18, obj.unreadMentionCount);
    if (obj.markedAsUnread !== undefined) pbf.writeBooleanField(19, obj.markedAsUnread);
    if (obj.participant) for (const item of obj.participant) pbf.writeMessage(20, writeGroupParticipant, item);
    if (obj.tcToken != null) pbf.writeBytesField(21, obj.tcToken);
    if (obj.tcTokenTimestamp !== undefined) pbf.writeVarintField(22, obj.tcTokenTimestamp);
    if (obj.contactPrimaryIdentityKey != null) pbf.writeBytesField(23, obj.contactPrimaryIdentityKey);
    if (obj.pinned !== undefined) pbf.writeVarintField(24, obj.pinned);
    if (obj.muteEndTime !== undefined) pbf.writeVarintField(25, obj.muteEndTime);
    if (obj.wallpaper) pbf.writeMessage(26, writeWallpaperSettings, obj.wallpaper);
    if (obj.mediaVisibility !== undefined) pbf.writeVarintField(27, obj.mediaVisibility);
    if (obj.tcTokenSenderTimestamp !== undefined) pbf.writeVarintField(28, obj.tcTokenSenderTimestamp);
    if (obj.suspended !== undefined) pbf.writeBooleanField(29, obj.suspended);
    if (obj.terminated !== undefined) pbf.writeBooleanField(30, obj.terminated);
    if (obj.createdAt !== undefined) pbf.writeVarintField(31, obj.createdAt);
    if (obj.createdBy !== undefined) pbf.writeStringField(32, obj.createdBy);
    if (obj.description !== undefined) pbf.writeStringField(33, obj.description);
    if (obj.support !== undefined) pbf.writeBooleanField(34, obj.support);
    if (obj.isParentGroup !== undefined) pbf.writeBooleanField(35, obj.isParentGroup);
    if (obj.parentGroupId !== undefined) pbf.writeStringField(37, obj.parentGroupId);
    if (obj.isDefaultSubgroup !== undefined) pbf.writeBooleanField(36, obj.isDefaultSubgroup);
    if (obj.displayName !== undefined) pbf.writeStringField(38, obj.displayName);
    if (obj.pnJid !== undefined) pbf.writeStringField(39, obj.pnJid);
    if (obj.shareOwnPn !== undefined) pbf.writeBooleanField(40, obj.shareOwnPn);
    if (obj.pnhDuplicateLidThread !== undefined) pbf.writeBooleanField(41, obj.pnhDuplicateLidThread);
    if (obj.lidJid !== undefined) pbf.writeStringField(42, obj.lidJid);
    if (obj.username !== undefined) pbf.writeStringField(43, obj.username);
    if (obj.lidOriginType !== undefined) pbf.writeStringField(44, obj.lidOriginType);
    if (obj.commentsCount !== undefined) pbf.writeVarintField(45, obj.commentsCount);
}

export enum ConversationEndOfHistoryTransferType {
    COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY = 0,
    COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY = 1,
    COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY = 2,
}

export interface DeviceConsistencyCodeMessage {
    generation?: number;
    signature?: Uint8Array;
}

export function readDeviceConsistencyCodeMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readDeviceConsistencyCodeMessageField, {generation: 0 as number, signature: undefined as unknown as Uint8Array}, end);
}
function readDeviceConsistencyCodeMessageField(tag: number, obj: DeviceConsistencyCodeMessage, pbf: Pbf) {
    if (tag === 1) obj.generation = pbf.readVarint();
    else if (tag === 2) obj.signature = pbf.readBytes();
}
export function writeDeviceConsistencyCodeMessage(obj: DeviceConsistencyCodeMessage, pbf: Pbf) {
    if (obj.generation !== undefined) pbf.writeVarintField(1, obj.generation);
    if (obj.signature != null) pbf.writeBytesField(2, obj.signature);
}

export interface DeviceListMetadata {
    senderKeyHash?: Uint8Array;
    senderTimestamp?: number;
    senderKeyIndexes?: number[];
    senderAccountType?: ADVEncryptionType;
    receiverAccountType?: ADVEncryptionType;
    recipientKeyHash?: Uint8Array;
    recipientTimestamp?: number;
    recipientKeyIndexes?: number[];
}

export function readDeviceListMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readDeviceListMetadataField, {senderKeyHash: undefined as unknown as Uint8Array, senderTimestamp: 0 as number, senderKeyIndexes: [] as number[], senderAccountType: 0 as ADVEncryptionType, receiverAccountType: 0 as ADVEncryptionType, recipientKeyHash: undefined as unknown as Uint8Array, recipientTimestamp: 0 as number, recipientKeyIndexes: [] as number[]}, end);
}
function readDeviceListMetadataField(tag: number, obj: DeviceListMetadata, pbf: Pbf) {
    if (tag === 1) obj.senderKeyHash = pbf.readBytes();
    else if (tag === 2) obj.senderTimestamp = pbf.readVarint();
    else if (tag === 3) pbf.readPackedVarint(obj.senderKeyIndexes);
    else if (tag === 4) obj.senderAccountType = pbf.readVarint();
    else if (tag === 5) obj.receiverAccountType = pbf.readVarint();
    else if (tag === 8) obj.recipientKeyHash = pbf.readBytes();
    else if (tag === 9) obj.recipientTimestamp = pbf.readVarint();
    else if (tag === 10) pbf.readPackedVarint(obj.recipientKeyIndexes);
}
export function writeDeviceListMetadata(obj: DeviceListMetadata, pbf: Pbf) {
    if (obj.senderKeyHash != null) pbf.writeBytesField(1, obj.senderKeyHash);
    if (obj.senderTimestamp !== undefined) pbf.writeVarintField(2, obj.senderTimestamp);
    if (obj.senderKeyIndexes) pbf.writePackedVarint(3, obj.senderKeyIndexes);
    if (obj.senderAccountType !== undefined) pbf.writeVarintField(4, obj.senderAccountType);
    if (obj.receiverAccountType !== undefined) pbf.writeVarintField(5, obj.receiverAccountType);
    if (obj.recipientKeyHash != null) pbf.writeBytesField(8, obj.recipientKeyHash);
    if (obj.recipientTimestamp !== undefined) pbf.writeVarintField(9, obj.recipientTimestamp);
    if (obj.recipientKeyIndexes) pbf.writePackedVarint(10, obj.recipientKeyIndexes);
}

export interface DeviceProps {
    os?: string;
    version?: DevicePropsAppVersion;
    platformType?: DevicePropsPlatformType;
    requireFullSync?: boolean;
    historySyncConfig?: DevicePropsHistorySyncConfig;
}

export function readDeviceProps(pbf: Pbf, end?: number) {
    return pbf.readFields(readDevicePropsField, {os: "" as string, version: undefined as unknown as DevicePropsAppVersion, platformType: 0 as DevicePropsPlatformType, requireFullSync: false as boolean, historySyncConfig: undefined as unknown as DevicePropsHistorySyncConfig}, end);
}
function readDevicePropsField(tag: number, obj: DeviceProps, pbf: Pbf) {
    if (tag === 1) obj.os = pbf.readString();
    else if (tag === 2) obj.version = readDevicePropsAppVersion(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.platformType = pbf.readVarint();
    else if (tag === 4) obj.requireFullSync = pbf.readBoolean();
    else if (tag === 5) obj.historySyncConfig = readDevicePropsHistorySyncConfig(pbf, pbf.readVarint() + pbf.pos);
}
export function writeDeviceProps(obj: DeviceProps, pbf: Pbf) {
    if (obj.os !== undefined) pbf.writeStringField(1, obj.os);
    if (obj.version) pbf.writeMessage(2, writeDevicePropsAppVersion, obj.version);
    if (obj.platformType !== undefined) pbf.writeVarintField(3, obj.platformType);
    if (obj.requireFullSync !== undefined) pbf.writeBooleanField(4, obj.requireFullSync);
    if (obj.historySyncConfig) pbf.writeMessage(5, writeDevicePropsHistorySyncConfig, obj.historySyncConfig);
}

export enum DevicePropsPlatformType {
    UNKNOWN = 0,
    CHROME = 1,
    FIREFOX = 2,
    IE = 3,
    OPERA = 4,
    SAFARI = 5,
    EDGE = 6,
    DESKTOP = 7,
    IPAD = 8,
    ANDROID_TABLET = 9,
    OHANA = 10,
    ALOHA = 11,
    CATALINA = 12,
    TCL_TV = 13,
    IOS_PHONE = 14,
    IOS_CATALYST = 15,
    ANDROID_PHONE = 16,
    ANDROID_AMBIGUOUS = 17,
    WEAR_OS = 18,
    AR_WRIST = 19,
    AR_DEVICE = 20,
    UWP = 21,
    VR = 22,
}

export interface DevicePropsAppVersion {
    primary?: number;
    secondary?: number;
    tertiary?: number;
    quaternary?: number;
    quinary?: number;
}

export function readDevicePropsAppVersion(pbf: Pbf, end?: number) {
    return pbf.readFields(readDevicePropsAppVersionField, {primary: 0 as number, secondary: 0 as number, tertiary: 0 as number, quaternary: 0 as number, quinary: 0 as number}, end);
}
function readDevicePropsAppVersionField(tag: number, obj: DevicePropsAppVersion, pbf: Pbf) {
    if (tag === 1) obj.primary = pbf.readVarint();
    else if (tag === 2) obj.secondary = pbf.readVarint();
    else if (tag === 3) obj.tertiary = pbf.readVarint();
    else if (tag === 4) obj.quaternary = pbf.readVarint();
    else if (tag === 5) obj.quinary = pbf.readVarint();
}
export function writeDevicePropsAppVersion(obj: DevicePropsAppVersion, pbf: Pbf) {
    if (obj.primary !== undefined) pbf.writeVarintField(1, obj.primary);
    if (obj.secondary !== undefined) pbf.writeVarintField(2, obj.secondary);
    if (obj.tertiary !== undefined) pbf.writeVarintField(3, obj.tertiary);
    if (obj.quaternary !== undefined) pbf.writeVarintField(4, obj.quaternary);
    if (obj.quinary !== undefined) pbf.writeVarintField(5, obj.quinary);
}

export interface DevicePropsHistorySyncConfig {
    fullSyncDaysLimit?: number;
    fullSyncSizeMbLimit?: number;
    storageQuotaMb?: number;
    inlineInitialPayloadInE2EeMsg?: boolean;
    recentSyncDaysLimit?: number;
    supportCallLogHistory?: boolean;
    supportBotUserAgentChatHistory?: boolean;
    supportCagReactionsAndPolls?: boolean;
}

export function readDevicePropsHistorySyncConfig(pbf: Pbf, end?: number) {
    return pbf.readFields(readDevicePropsHistorySyncConfigField, {fullSyncDaysLimit: 0 as number, fullSyncSizeMbLimit: 0 as number, storageQuotaMb: 0 as number, inlineInitialPayloadInE2EeMsg: false as boolean, recentSyncDaysLimit: 0 as number, supportCallLogHistory: false as boolean, supportBotUserAgentChatHistory: false as boolean, supportCagReactionsAndPolls: false as boolean}, end);
}
function readDevicePropsHistorySyncConfigField(tag: number, obj: DevicePropsHistorySyncConfig, pbf: Pbf) {
    if (tag === 1) obj.fullSyncDaysLimit = pbf.readVarint();
    else if (tag === 2) obj.fullSyncSizeMbLimit = pbf.readVarint();
    else if (tag === 3) obj.storageQuotaMb = pbf.readVarint();
    else if (tag === 4) obj.inlineInitialPayloadInE2EeMsg = pbf.readBoolean();
    else if (tag === 5) obj.recentSyncDaysLimit = pbf.readVarint();
    else if (tag === 6) obj.supportCallLogHistory = pbf.readBoolean();
    else if (tag === 7) obj.supportBotUserAgentChatHistory = pbf.readBoolean();
    else if (tag === 8) obj.supportCagReactionsAndPolls = pbf.readBoolean();
}
export function writeDevicePropsHistorySyncConfig(obj: DevicePropsHistorySyncConfig, pbf: Pbf) {
    if (obj.fullSyncDaysLimit !== undefined) pbf.writeVarintField(1, obj.fullSyncDaysLimit);
    if (obj.fullSyncSizeMbLimit !== undefined) pbf.writeVarintField(2, obj.fullSyncSizeMbLimit);
    if (obj.storageQuotaMb !== undefined) pbf.writeVarintField(3, obj.storageQuotaMb);
    if (obj.inlineInitialPayloadInE2EeMsg !== undefined) pbf.writeBooleanField(4, obj.inlineInitialPayloadInE2EeMsg);
    if (obj.recentSyncDaysLimit !== undefined) pbf.writeVarintField(5, obj.recentSyncDaysLimit);
    if (obj.supportCallLogHistory !== undefined) pbf.writeBooleanField(6, obj.supportCallLogHistory);
    if (obj.supportBotUserAgentChatHistory !== undefined) pbf.writeBooleanField(7, obj.supportBotUserAgentChatHistory);
    if (obj.supportCagReactionsAndPolls !== undefined) pbf.writeBooleanField(8, obj.supportCagReactionsAndPolls);
}

export interface DisappearingMode {
    initiator?: DisappearingModeInitiator;
    trigger?: DisappearingModeTrigger;
    initiatorDeviceJid?: string;
    initiatedByMe?: boolean;
}

export function readDisappearingMode(pbf: Pbf, end?: number) {
    return pbf.readFields(readDisappearingModeField, {initiator: 0 as DisappearingModeInitiator, trigger: 0 as DisappearingModeTrigger, initiatorDeviceJid: "" as string, initiatedByMe: false as boolean}, end);
}
function readDisappearingModeField(tag: number, obj: DisappearingMode, pbf: Pbf) {
    if (tag === 1) obj.initiator = pbf.readVarint();
    else if (tag === 2) obj.trigger = pbf.readVarint();
    else if (tag === 3) obj.initiatorDeviceJid = pbf.readString();
    else if (tag === 4) obj.initiatedByMe = pbf.readBoolean();
}
export function writeDisappearingMode(obj: DisappearingMode, pbf: Pbf) {
    if (obj.initiator !== undefined) pbf.writeVarintField(1, obj.initiator);
    if (obj.trigger !== undefined) pbf.writeVarintField(2, obj.trigger);
    if (obj.initiatorDeviceJid !== undefined) pbf.writeStringField(3, obj.initiatorDeviceJid);
    if (obj.initiatedByMe !== undefined) pbf.writeBooleanField(4, obj.initiatedByMe);
}

export enum DisappearingModeInitiator {
    CHANGED_IN_CHAT = 0,
    INITIATED_BY_ME = 1,
    INITIATED_BY_OTHER = 2,
    BIZ_UPGRADE_FB_HOSTING = 3,
}

export enum DisappearingModeTrigger {
    UNKNOWN = 0,
    CHAT_SETTING = 1,
    ACCOUNT_SETTING = 2,
    BULK_CHANGE = 3,
    BIZ_SUPPORTS_FB_HOSTING = 4,
}

export interface EphemeralSetting {
    duration?: number;
    timestamp?: number;
}

export function readEphemeralSetting(pbf: Pbf, end?: number) {
    return pbf.readFields(readEphemeralSettingField, {duration: 0 as number, timestamp: 0 as number}, end);
}
function readEphemeralSettingField(tag: number, obj: EphemeralSetting, pbf: Pbf) {
    if (tag === 1) obj.duration = pbf.readSFixed32();
    else if (tag === 2) obj.timestamp = pbf.readSFixed64();
}
export function writeEphemeralSetting(obj: EphemeralSetting, pbf: Pbf) {
    if (obj.duration !== undefined) pbf.writeSFixed32Field(1, obj.duration);
    if (obj.timestamp !== undefined) pbf.writeSFixed64Field(2, obj.timestamp);
}

export interface EventResponse {
    eventResponseMessageKey?: MessageKey;
    timestampMs?: number;
    eventResponseMessage?: MessageEventResponseMessage;
    unread?: boolean;
}

export function readEventResponse(pbf: Pbf, end?: number) {
    return pbf.readFields(readEventResponseField, {eventResponseMessageKey: undefined as unknown as MessageKey, timestampMs: 0 as number, eventResponseMessage: undefined as unknown as MessageEventResponseMessage, unread: false as boolean}, end);
}
function readEventResponseField(tag: number, obj: EventResponse, pbf: Pbf) {
    if (tag === 1) obj.eventResponseMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.timestampMs = pbf.readVarint(true);
    else if (tag === 3) obj.eventResponseMessage = readMessageEventResponseMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.unread = pbf.readBoolean();
}
export function writeEventResponse(obj: EventResponse, pbf: Pbf) {
    if (obj.eventResponseMessageKey) pbf.writeMessage(1, writeMessageKey, obj.eventResponseMessageKey);
    if (obj.timestampMs !== undefined) pbf.writeVarintField(2, obj.timestampMs);
    if (obj.eventResponseMessage) pbf.writeMessage(3, writeMessageEventResponseMessage, obj.eventResponseMessage);
    if (obj.unread !== undefined) pbf.writeBooleanField(4, obj.unread);
}

export interface ExitCode {
    code?: number;
    text?: string;
}

export function readExitCode(pbf: Pbf, end?: number) {
    return pbf.readFields(readExitCodeField, {code: 0 as number, text: "" as string}, end);
}
function readExitCodeField(tag: number, obj: ExitCode, pbf: Pbf) {
    if (tag === 1) obj.code = pbf.readVarint();
    else if (tag === 2) obj.text = pbf.readString();
}
export function writeExitCode(obj: ExitCode, pbf: Pbf) {
    if (obj.code !== undefined) pbf.writeVarintField(1, obj.code);
    if (obj.text !== undefined) pbf.writeStringField(2, obj.text);
}

export interface ExternalBlobReference {
    mediaKey?: Uint8Array;
    directPath?: string;
    handle?: string;
    fileSizeBytes?: number;
    fileSha256?: Uint8Array;
    fileEncSha256?: Uint8Array;
}

export function readExternalBlobReference(pbf: Pbf, end?: number) {
    return pbf.readFields(readExternalBlobReferenceField, {mediaKey: undefined as unknown as Uint8Array, directPath: "" as string, handle: "" as string, fileSizeBytes: 0 as number, fileSha256: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array}, end);
}
function readExternalBlobReferenceField(tag: number, obj: ExternalBlobReference, pbf: Pbf) {
    if (tag === 1) obj.mediaKey = pbf.readBytes();
    else if (tag === 2) obj.directPath = pbf.readString();
    else if (tag === 3) obj.handle = pbf.readString();
    else if (tag === 4) obj.fileSizeBytes = pbf.readVarint();
    else if (tag === 5) obj.fileSha256 = pbf.readBytes();
    else if (tag === 6) obj.fileEncSha256 = pbf.readBytes();
}
export function writeExternalBlobReference(obj: ExternalBlobReference, pbf: Pbf) {
    if (obj.mediaKey != null) pbf.writeBytesField(1, obj.mediaKey);
    if (obj.directPath !== undefined) pbf.writeStringField(2, obj.directPath);
    if (obj.handle !== undefined) pbf.writeStringField(3, obj.handle);
    if (obj.fileSizeBytes !== undefined) pbf.writeVarintField(4, obj.fileSizeBytes);
    if (obj.fileSha256 != null) pbf.writeBytesField(5, obj.fileSha256);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(6, obj.fileEncSha256);
}

export interface GlobalSettings {
    lightThemeWallpaper?: WallpaperSettings;
    mediaVisibility?: MediaVisibility;
    darkThemeWallpaper?: WallpaperSettings;
    autoDownloadWiFi?: AutoDownloadSettings;
    autoDownloadCellular?: AutoDownloadSettings;
    autoDownloadRoaming?: AutoDownloadSettings;
    showIndividualNotificationsPreview?: boolean;
    showGroupNotificationsPreview?: boolean;
    disappearingModeDuration?: number;
    disappearingModeTimestamp?: number;
    avatarUserSettings?: AvatarUserSettings;
    fontSize?: number;
    securityNotifications?: boolean;
    autoUnarchiveChats?: boolean;
    videoQualityMode?: number;
    photoQualityMode?: number;
    individualNotificationSettings?: NotificationSettings;
    groupNotificationSettings?: NotificationSettings;
}

export function readGlobalSettings(pbf: Pbf, end?: number) {
    return pbf.readFields(readGlobalSettingsField, {lightThemeWallpaper: undefined as unknown as WallpaperSettings, mediaVisibility: 0 as MediaVisibility, darkThemeWallpaper: undefined as unknown as WallpaperSettings, autoDownloadWiFi: undefined as unknown as AutoDownloadSettings, autoDownloadCellular: undefined as unknown as AutoDownloadSettings, autoDownloadRoaming: undefined as unknown as AutoDownloadSettings, showIndividualNotificationsPreview: false as boolean, showGroupNotificationsPreview: false as boolean, disappearingModeDuration: 0 as number, disappearingModeTimestamp: 0 as number, avatarUserSettings: undefined as unknown as AvatarUserSettings, fontSize: 0 as number, securityNotifications: false as boolean, autoUnarchiveChats: false as boolean, videoQualityMode: 0 as number, photoQualityMode: 0 as number, individualNotificationSettings: undefined as unknown as NotificationSettings, groupNotificationSettings: undefined as unknown as NotificationSettings}, end);
}
function readGlobalSettingsField(tag: number, obj: GlobalSettings, pbf: Pbf) {
    if (tag === 1) obj.lightThemeWallpaper = readWallpaperSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.mediaVisibility = pbf.readVarint();
    else if (tag === 3) obj.darkThemeWallpaper = readWallpaperSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.autoDownloadWiFi = readAutoDownloadSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.autoDownloadCellular = readAutoDownloadSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.autoDownloadRoaming = readAutoDownloadSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.showIndividualNotificationsPreview = pbf.readBoolean();
    else if (tag === 8) obj.showGroupNotificationsPreview = pbf.readBoolean();
    else if (tag === 9) obj.disappearingModeDuration = pbf.readVarint(true);
    else if (tag === 10) obj.disappearingModeTimestamp = pbf.readVarint(true);
    else if (tag === 11) obj.avatarUserSettings = readAvatarUserSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 12) obj.fontSize = pbf.readVarint(true);
    else if (tag === 13) obj.securityNotifications = pbf.readBoolean();
    else if (tag === 14) obj.autoUnarchiveChats = pbf.readBoolean();
    else if (tag === 15) obj.videoQualityMode = pbf.readVarint(true);
    else if (tag === 16) obj.photoQualityMode = pbf.readVarint(true);
    else if (tag === 17) obj.individualNotificationSettings = readNotificationSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.groupNotificationSettings = readNotificationSettings(pbf, pbf.readVarint() + pbf.pos);
}
export function writeGlobalSettings(obj: GlobalSettings, pbf: Pbf) {
    if (obj.lightThemeWallpaper) pbf.writeMessage(1, writeWallpaperSettings, obj.lightThemeWallpaper);
    if (obj.mediaVisibility !== undefined) pbf.writeVarintField(2, obj.mediaVisibility);
    if (obj.darkThemeWallpaper) pbf.writeMessage(3, writeWallpaperSettings, obj.darkThemeWallpaper);
    if (obj.autoDownloadWiFi) pbf.writeMessage(4, writeAutoDownloadSettings, obj.autoDownloadWiFi);
    if (obj.autoDownloadCellular) pbf.writeMessage(5, writeAutoDownloadSettings, obj.autoDownloadCellular);
    if (obj.autoDownloadRoaming) pbf.writeMessage(6, writeAutoDownloadSettings, obj.autoDownloadRoaming);
    if (obj.showIndividualNotificationsPreview !== undefined) pbf.writeBooleanField(7, obj.showIndividualNotificationsPreview);
    if (obj.showGroupNotificationsPreview !== undefined) pbf.writeBooleanField(8, obj.showGroupNotificationsPreview);
    if (obj.disappearingModeDuration !== undefined) pbf.writeVarintField(9, obj.disappearingModeDuration);
    if (obj.disappearingModeTimestamp !== undefined) pbf.writeVarintField(10, obj.disappearingModeTimestamp);
    if (obj.avatarUserSettings) pbf.writeMessage(11, writeAvatarUserSettings, obj.avatarUserSettings);
    if (obj.fontSize !== undefined) pbf.writeVarintField(12, obj.fontSize);
    if (obj.securityNotifications !== undefined) pbf.writeBooleanField(13, obj.securityNotifications);
    if (obj.autoUnarchiveChats !== undefined) pbf.writeBooleanField(14, obj.autoUnarchiveChats);
    if (obj.videoQualityMode !== undefined) pbf.writeVarintField(15, obj.videoQualityMode);
    if (obj.photoQualityMode !== undefined) pbf.writeVarintField(16, obj.photoQualityMode);
    if (obj.individualNotificationSettings) pbf.writeMessage(17, writeNotificationSettings, obj.individualNotificationSettings);
    if (obj.groupNotificationSettings) pbf.writeMessage(18, writeNotificationSettings, obj.groupNotificationSettings);
}

export interface GroupMention {
    groupJid?: string;
    groupSubject?: string;
}

export function readGroupMention(pbf: Pbf, end?: number) {
    return pbf.readFields(readGroupMentionField, {groupJid: "" as string, groupSubject: "" as string}, end);
}
function readGroupMentionField(tag: number, obj: GroupMention, pbf: Pbf) {
    if (tag === 1) obj.groupJid = pbf.readString();
    else if (tag === 2) obj.groupSubject = pbf.readString();
}
export function writeGroupMention(obj: GroupMention, pbf: Pbf) {
    if (obj.groupJid !== undefined) pbf.writeStringField(1, obj.groupJid);
    if (obj.groupSubject !== undefined) pbf.writeStringField(2, obj.groupSubject);
}

export interface GroupParticipant {
    userJid: string;
    rank?: GroupParticipantRank;
}

export function readGroupParticipant(pbf: Pbf, end?: number) {
    return pbf.readFields(readGroupParticipantField, {userJid: "" as string, rank: 0 as GroupParticipantRank}, end);
}
function readGroupParticipantField(tag: number, obj: GroupParticipant, pbf: Pbf) {
    if (tag === 1) obj.userJid = pbf.readString();
    else if (tag === 2) obj.rank = pbf.readVarint();
}
export function writeGroupParticipant(obj: GroupParticipant, pbf: Pbf) {
    if (obj.userJid !== undefined) pbf.writeStringField(1, obj.userJid);
    if (obj.rank !== undefined) pbf.writeVarintField(2, obj.rank);
}

export enum GroupParticipantRank {
    REGULAR = 0,
    ADMIN = 1,
    SUPERADMIN = 2,
}

export interface HandshakeMessage {
    clientHello?: HandshakeMessageClientHello;
    serverHello?: HandshakeMessageServerHello;
    clientFinish?: HandshakeMessageClientFinish;
}

export function readHandshakeMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readHandshakeMessageField, {clientHello: undefined as unknown as HandshakeMessageClientHello, serverHello: undefined as unknown as HandshakeMessageServerHello, clientFinish: undefined as unknown as HandshakeMessageClientFinish}, end);
}
function readHandshakeMessageField(tag: number, obj: HandshakeMessage, pbf: Pbf) {
    if (tag === 2) obj.clientHello = readHandshakeMessageClientHello(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.serverHello = readHandshakeMessageServerHello(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.clientFinish = readHandshakeMessageClientFinish(pbf, pbf.readVarint() + pbf.pos);
}
export function writeHandshakeMessage(obj: HandshakeMessage, pbf: Pbf) {
    if (obj.clientHello) pbf.writeMessage(2, writeHandshakeMessageClientHello, obj.clientHello);
    if (obj.serverHello) pbf.writeMessage(3, writeHandshakeMessageServerHello, obj.serverHello);
    if (obj.clientFinish) pbf.writeMessage(4, writeHandshakeMessageClientFinish, obj.clientFinish);
}

export interface HandshakeMessageClientFinish {
    static?: Uint8Array;
    payload?: Uint8Array;
}

export function readHandshakeMessageClientFinish(pbf: Pbf, end?: number) {
    return pbf.readFields(readHandshakeMessageClientFinishField, {static: undefined as unknown as Uint8Array, payload: undefined as unknown as Uint8Array}, end);
}
function readHandshakeMessageClientFinishField(tag: number, obj: HandshakeMessageClientFinish, pbf: Pbf) {
    if (tag === 1) obj.static = pbf.readBytes();
    else if (tag === 2) obj.payload = pbf.readBytes();
}
export function writeHandshakeMessageClientFinish(obj: HandshakeMessageClientFinish, pbf: Pbf) {
    if (obj.static != null) pbf.writeBytesField(1, obj.static);
    if (obj.payload != null) pbf.writeBytesField(2, obj.payload);
}

export interface HandshakeMessageClientHello {
    ephemeral?: Uint8Array;
    static?: Uint8Array;
    payload?: Uint8Array;
}

export function readHandshakeMessageClientHello(pbf: Pbf, end?: number) {
    return pbf.readFields(readHandshakeMessageClientHelloField, {ephemeral: undefined as unknown as Uint8Array, static: undefined as unknown as Uint8Array, payload: undefined as unknown as Uint8Array}, end);
}
function readHandshakeMessageClientHelloField(tag: number, obj: HandshakeMessageClientHello, pbf: Pbf) {
    if (tag === 1) obj.ephemeral = pbf.readBytes();
    else if (tag === 2) obj.static = pbf.readBytes();
    else if (tag === 3) obj.payload = pbf.readBytes();
}
export function writeHandshakeMessageClientHello(obj: HandshakeMessageClientHello, pbf: Pbf) {
    if (obj.ephemeral != null) pbf.writeBytesField(1, obj.ephemeral);
    if (obj.static != null) pbf.writeBytesField(2, obj.static);
    if (obj.payload != null) pbf.writeBytesField(3, obj.payload);
}

export interface HandshakeMessageServerHello {
    ephemeral?: Uint8Array;
    static?: Uint8Array;
    payload?: Uint8Array;
}

export function readHandshakeMessageServerHello(pbf: Pbf, end?: number) {
    return pbf.readFields(readHandshakeMessageServerHelloField, {ephemeral: undefined as unknown as Uint8Array, static: undefined as unknown as Uint8Array, payload: undefined as unknown as Uint8Array}, end);
}
function readHandshakeMessageServerHelloField(tag: number, obj: HandshakeMessageServerHello, pbf: Pbf) {
    if (tag === 1) obj.ephemeral = pbf.readBytes();
    else if (tag === 2) obj.static = pbf.readBytes();
    else if (tag === 3) obj.payload = pbf.readBytes();
}
export function writeHandshakeMessageServerHello(obj: HandshakeMessageServerHello, pbf: Pbf) {
    if (obj.ephemeral != null) pbf.writeBytesField(1, obj.ephemeral);
    if (obj.static != null) pbf.writeBytesField(2, obj.static);
    if (obj.payload != null) pbf.writeBytesField(3, obj.payload);
}

export interface HistorySync {
    syncType: HistorySyncHistorySyncType;
    conversations?: Conversation[];
    statusV3Messages?: WebMessageInfo[];
    chunkOrder?: number;
    progress?: number;
    pushnames?: Pushname[];
    globalSettings?: GlobalSettings;
    threadIdUserSecret?: Uint8Array;
    threadDsTimeframeOffset?: number;
    recentStickers?: StickerMetadata[];
    pastParticipants?: PastParticipants[];
    callLogRecords?: CallLogRecord[];
    aiWaitListState?: HistorySyncBotAIWaitListState;
    phoneNumberToLidMappings?: PhoneNumberToLIDMapping[];
}

export function readHistorySync(pbf: Pbf, end?: number) {
    return pbf.readFields(readHistorySyncField, {syncType: 0 as HistorySyncHistorySyncType, conversations: [] as Conversation[], statusV3Messages: [] as WebMessageInfo[], chunkOrder: 0 as number, progress: 0 as number, pushnames: [] as Pushname[], globalSettings: undefined as unknown as GlobalSettings, threadIdUserSecret: undefined as unknown as Uint8Array, threadDsTimeframeOffset: 0 as number, recentStickers: [] as StickerMetadata[], pastParticipants: [] as PastParticipants[], callLogRecords: [] as CallLogRecord[], aiWaitListState: 0 as HistorySyncBotAIWaitListState, phoneNumberToLidMappings: [] as PhoneNumberToLIDMapping[]}, end);
}
function readHistorySyncField(tag: number, obj: HistorySync, pbf: Pbf) {
    if (tag === 1) obj.syncType = pbf.readVarint();
    else if (tag === 2) obj.conversations?.push(readConversation(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.statusV3Messages?.push(readWebMessageInfo(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.chunkOrder = pbf.readVarint();
    else if (tag === 6) obj.progress = pbf.readVarint();
    else if (tag === 7) obj.pushnames?.push(readPushname(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.globalSettings = readGlobalSettings(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.threadIdUserSecret = pbf.readBytes();
    else if (tag === 10) obj.threadDsTimeframeOffset = pbf.readVarint();
    else if (tag === 11) obj.recentStickers?.push(readStickerMetadata(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 12) obj.pastParticipants?.push(readPastParticipants(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 13) obj.callLogRecords?.push(readCallLogRecord(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 14) obj.aiWaitListState = pbf.readVarint();
    else if (tag === 15) obj.phoneNumberToLidMappings?.push(readPhoneNumberToLIDMapping(pbf, pbf.readVarint() + pbf.pos));
}
export function writeHistorySync(obj: HistorySync, pbf: Pbf) {
    if (obj.syncType !== undefined) pbf.writeVarintField(1, obj.syncType);
    if (obj.conversations) for (const item of obj.conversations) pbf.writeMessage(2, writeConversation, item);
    if (obj.statusV3Messages) for (const item of obj.statusV3Messages) pbf.writeMessage(3, writeWebMessageInfo, item);
    if (obj.chunkOrder !== undefined) pbf.writeVarintField(5, obj.chunkOrder);
    if (obj.progress !== undefined) pbf.writeVarintField(6, obj.progress);
    if (obj.pushnames) for (const item of obj.pushnames) pbf.writeMessage(7, writePushname, item);
    if (obj.globalSettings) pbf.writeMessage(8, writeGlobalSettings, obj.globalSettings);
    if (obj.threadIdUserSecret != null) pbf.writeBytesField(9, obj.threadIdUserSecret);
    if (obj.threadDsTimeframeOffset !== undefined) pbf.writeVarintField(10, obj.threadDsTimeframeOffset);
    if (obj.recentStickers) for (const item of obj.recentStickers) pbf.writeMessage(11, writeStickerMetadata, item);
    if (obj.pastParticipants) for (const item of obj.pastParticipants) pbf.writeMessage(12, writePastParticipants, item);
    if (obj.callLogRecords) for (const item of obj.callLogRecords) pbf.writeMessage(13, writeCallLogRecord, item);
    if (obj.aiWaitListState !== undefined) pbf.writeVarintField(14, obj.aiWaitListState);
    if (obj.phoneNumberToLidMappings) for (const item of obj.phoneNumberToLidMappings) pbf.writeMessage(15, writePhoneNumberToLIDMapping, item);
}

export enum HistorySyncBotAIWaitListState {
    IN_WAITLIST = 0,
    AI_AVAILABLE = 1,
}

export enum HistorySyncHistorySyncType {
    INITIAL_BOOTSTRAP = 0,
    INITIAL_STATUS_V3 = 1,
    FULL = 2,
    RECENT = 3,
    PUSH_NAME = 4,
    NON_BLOCKING_DATA = 5,
    ON_DEMAND = 6,
}

export interface HistorySyncMsg {
    message?: WebMessageInfo;
    msgOrderId?: number;
}

export function readHistorySyncMsg(pbf: Pbf, end?: number) {
    return pbf.readFields(readHistorySyncMsgField, {message: undefined as unknown as WebMessageInfo, msgOrderId: 0 as number}, end);
}
function readHistorySyncMsgField(tag: number, obj: HistorySyncMsg, pbf: Pbf) {
    if (tag === 1) obj.message = readWebMessageInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.msgOrderId = pbf.readVarint();
}
export function writeHistorySyncMsg(obj: HistorySyncMsg, pbf: Pbf) {
    if (obj.message) pbf.writeMessage(1, writeWebMessageInfo, obj.message);
    if (obj.msgOrderId !== undefined) pbf.writeVarintField(2, obj.msgOrderId);
}

export interface HydratedTemplateButton {
    index?: number;
    quickReplyButton?: HydratedTemplateButtonHydratedQuickReplyButton;
    urlButton?: HydratedTemplateButtonHydratedURLButton;
    callButton?: HydratedTemplateButtonHydratedCallButton;
}

export function readHydratedTemplateButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readHydratedTemplateButtonField, {index: 0 as number, quickReplyButton: undefined as unknown as HydratedTemplateButtonHydratedQuickReplyButton, urlButton: undefined as unknown as HydratedTemplateButtonHydratedURLButton, callButton: undefined as unknown as HydratedTemplateButtonHydratedCallButton}, end);
}
function readHydratedTemplateButtonField(tag: number, obj: HydratedTemplateButton, pbf: Pbf) {
    if (tag === 4) obj.index = pbf.readVarint();
    else if (tag === 1) { obj.quickReplyButton = readHydratedTemplateButtonHydratedQuickReplyButton(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.hydratedButton = "quickReplyButton"
; }
    else if (tag === 2) { obj.urlButton = readHydratedTemplateButtonHydratedURLButton(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.hydratedButton = "urlButton"
; }
    else if (tag === 3) { obj.callButton = readHydratedTemplateButtonHydratedCallButton(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.hydratedButton = "callButton"
; }
}
export function writeHydratedTemplateButton(obj: HydratedTemplateButton, pbf: Pbf) {
    if (obj.index !== undefined) pbf.writeVarintField(4, obj.index);
    if (obj.quickReplyButton) pbf.writeMessage(1, writeHydratedTemplateButtonHydratedQuickReplyButton, obj.quickReplyButton);
    if (obj.urlButton) pbf.writeMessage(2, writeHydratedTemplateButtonHydratedURLButton, obj.urlButton);
    if (obj.callButton) pbf.writeMessage(3, writeHydratedTemplateButtonHydratedCallButton, obj.callButton);
}

export interface HydratedTemplateButtonHydratedCallButton {
    displayText?: string;
    phoneNumber?: string;
}

export function readHydratedTemplateButtonHydratedCallButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readHydratedTemplateButtonHydratedCallButtonField, {displayText: "" as string, phoneNumber: "" as string}, end);
}
function readHydratedTemplateButtonHydratedCallButtonField(tag: number, obj: HydratedTemplateButtonHydratedCallButton, pbf: Pbf) {
    if (tag === 1) obj.displayText = pbf.readString();
    else if (tag === 2) obj.phoneNumber = pbf.readString();
}
export function writeHydratedTemplateButtonHydratedCallButton(obj: HydratedTemplateButtonHydratedCallButton, pbf: Pbf) {
    if (obj.displayText !== undefined) pbf.writeStringField(1, obj.displayText);
    if (obj.phoneNumber !== undefined) pbf.writeStringField(2, obj.phoneNumber);
}

export interface HydratedTemplateButtonHydratedQuickReplyButton {
    displayText?: string;
    id?: string;
}

export function readHydratedTemplateButtonHydratedQuickReplyButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readHydratedTemplateButtonHydratedQuickReplyButtonField, {displayText: "" as string, id: "" as string}, end);
}
function readHydratedTemplateButtonHydratedQuickReplyButtonField(tag: number, obj: HydratedTemplateButtonHydratedQuickReplyButton, pbf: Pbf) {
    if (tag === 1) obj.displayText = pbf.readString();
    else if (tag === 2) obj.id = pbf.readString();
}
export function writeHydratedTemplateButtonHydratedQuickReplyButton(obj: HydratedTemplateButtonHydratedQuickReplyButton, pbf: Pbf) {
    if (obj.displayText !== undefined) pbf.writeStringField(1, obj.displayText);
    if (obj.id !== undefined) pbf.writeStringField(2, obj.id);
}

export interface HydratedTemplateButtonHydratedURLButton {
    displayText?: string;
    url?: string;
    consentedUsersUrl?: string;
    webviewPresentation?: HydratedTemplateButtonHydratedURLButtonWebviewPresentationType;
}

export function readHydratedTemplateButtonHydratedURLButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readHydratedTemplateButtonHydratedURLButtonField, {displayText: "" as string, url: "" as string, consentedUsersUrl: "" as string, webviewPresentation: 0 as HydratedTemplateButtonHydratedURLButtonWebviewPresentationType}, end);
}
function readHydratedTemplateButtonHydratedURLButtonField(tag: number, obj: HydratedTemplateButtonHydratedURLButton, pbf: Pbf) {
    if (tag === 1) obj.displayText = pbf.readString();
    else if (tag === 2) obj.url = pbf.readString();
    else if (tag === 3) obj.consentedUsersUrl = pbf.readString();
    else if (tag === 4) obj.webviewPresentation = pbf.readVarint();
}
export function writeHydratedTemplateButtonHydratedURLButton(obj: HydratedTemplateButtonHydratedURLButton, pbf: Pbf) {
    if (obj.displayText !== undefined) pbf.writeStringField(1, obj.displayText);
    if (obj.url !== undefined) pbf.writeStringField(2, obj.url);
    if (obj.consentedUsersUrl !== undefined) pbf.writeStringField(3, obj.consentedUsersUrl);
    if (obj.webviewPresentation !== undefined) pbf.writeVarintField(4, obj.webviewPresentation);
}

export enum HydratedTemplateButtonHydratedURLButtonWebviewPresentationType {
    FULL = 1,
    TALL = 2,
    COMPACT = 3,
}

export interface IdentityKeyPairStructure {
    publicKey?: Uint8Array;
    privateKey?: Uint8Array;
}

export function readIdentityKeyPairStructure(pbf: Pbf, end?: number) {
    return pbf.readFields(readIdentityKeyPairStructureField, {publicKey: undefined as unknown as Uint8Array, privateKey: undefined as unknown as Uint8Array}, end);
}
function readIdentityKeyPairStructureField(tag: number, obj: IdentityKeyPairStructure, pbf: Pbf) {
    if (tag === 1) obj.publicKey = pbf.readBytes();
    else if (tag === 2) obj.privateKey = pbf.readBytes();
}
export function writeIdentityKeyPairStructure(obj: IdentityKeyPairStructure, pbf: Pbf) {
    if (obj.publicKey != null) pbf.writeBytesField(1, obj.publicKey);
    if (obj.privateKey != null) pbf.writeBytesField(2, obj.privateKey);
}

export interface InteractiveAnnotation {
    polygonVertices?: Point[];
    shouldSkipConfirmation?: boolean;
    location?: Location;
    newsletter?: ContextInfoForwardedNewsletterMessageInfo;
}

export function readInteractiveAnnotation(pbf: Pbf, end?: number) {
    return pbf.readFields(readInteractiveAnnotationField, {polygonVertices: [] as Point[], shouldSkipConfirmation: false as boolean, location: undefined as unknown as Location, newsletter: undefined as unknown as ContextInfoForwardedNewsletterMessageInfo}, end);
}
function readInteractiveAnnotationField(tag: number, obj: InteractiveAnnotation, pbf: Pbf) {
    if (tag === 1) obj.polygonVertices?.push(readPoint(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.shouldSkipConfirmation = pbf.readBoolean();
    else if (tag === 2) { obj.location = readLocation(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.action = "location"
; }
    else if (tag === 3) { obj.newsletter = readContextInfoForwardedNewsletterMessageInfo(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.action = "newsletter"
; }
}
export function writeInteractiveAnnotation(obj: InteractiveAnnotation, pbf: Pbf) {
    if (obj.polygonVertices) for (const item of obj.polygonVertices) pbf.writeMessage(1, writePoint, item);
    if (obj.shouldSkipConfirmation !== undefined) pbf.writeBooleanField(4, obj.shouldSkipConfirmation);
    if (obj.location) pbf.writeMessage(2, writeLocation, obj.location);
    if (obj.newsletter) pbf.writeMessage(3, writeContextInfoForwardedNewsletterMessageInfo, obj.newsletter);
}

export interface KeepInChat {
    keepType?: KeepType;
    serverTimestamp?: number;
    key?: MessageKey;
    deviceJid?: string;
    clientTimestampMs?: number;
    serverTimestampMs?: number;
}

export function readKeepInChat(pbf: Pbf, end?: number) {
    return pbf.readFields(readKeepInChatField, {keepType: 0 as KeepType, serverTimestamp: 0 as number, key: undefined as unknown as MessageKey, deviceJid: "" as string, clientTimestampMs: 0 as number, serverTimestampMs: 0 as number}, end);
}
function readKeepInChatField(tag: number, obj: KeepInChat, pbf: Pbf) {
    if (tag === 1) obj.keepType = pbf.readVarint();
    else if (tag === 2) obj.serverTimestamp = pbf.readVarint(true);
    else if (tag === 3) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.deviceJid = pbf.readString();
    else if (tag === 5) obj.clientTimestampMs = pbf.readVarint(true);
    else if (tag === 6) obj.serverTimestampMs = pbf.readVarint(true);
}
export function writeKeepInChat(obj: KeepInChat, pbf: Pbf) {
    if (obj.keepType !== undefined) pbf.writeVarintField(1, obj.keepType);
    if (obj.serverTimestamp !== undefined) pbf.writeVarintField(2, obj.serverTimestamp);
    if (obj.key) pbf.writeMessage(3, writeMessageKey, obj.key);
    if (obj.deviceJid !== undefined) pbf.writeStringField(4, obj.deviceJid);
    if (obj.clientTimestampMs !== undefined) pbf.writeVarintField(5, obj.clientTimestampMs);
    if (obj.serverTimestampMs !== undefined) pbf.writeVarintField(6, obj.serverTimestampMs);
}

export interface KeyExchangeMessage {
    id?: number;
    baseKey?: Uint8Array;
    ratchetKey?: Uint8Array;
    identityKey?: Uint8Array;
    baseKeySignature?: Uint8Array;
}

export function readKeyExchangeMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readKeyExchangeMessageField, {id: 0 as number, baseKey: undefined as unknown as Uint8Array, ratchetKey: undefined as unknown as Uint8Array, identityKey: undefined as unknown as Uint8Array, baseKeySignature: undefined as unknown as Uint8Array}, end);
}
function readKeyExchangeMessageField(tag: number, obj: KeyExchangeMessage, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.baseKey = pbf.readBytes();
    else if (tag === 3) obj.ratchetKey = pbf.readBytes();
    else if (tag === 4) obj.identityKey = pbf.readBytes();
    else if (tag === 5) obj.baseKeySignature = pbf.readBytes();
}
export function writeKeyExchangeMessage(obj: KeyExchangeMessage, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeVarintField(1, obj.id);
    if (obj.baseKey != null) pbf.writeBytesField(2, obj.baseKey);
    if (obj.ratchetKey != null) pbf.writeBytesField(3, obj.ratchetKey);
    if (obj.identityKey != null) pbf.writeBytesField(4, obj.identityKey);
    if (obj.baseKeySignature != null) pbf.writeBytesField(5, obj.baseKeySignature);
}

export interface KeyId {
    id?: Uint8Array;
}

export function readKeyId(pbf: Pbf, end?: number) {
    return pbf.readFields(readKeyIdField, {id: undefined as unknown as Uint8Array}, end);
}
function readKeyIdField(tag: number, obj: KeyId, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readBytes();
}
export function writeKeyId(obj: KeyId, pbf: Pbf) {
    if (obj.id != null) pbf.writeBytesField(1, obj.id);
}

export interface LocalizedName {
    lg?: string;
    lc?: string;
    verifiedName?: string;
}

export function readLocalizedName(pbf: Pbf, end?: number) {
    return pbf.readFields(readLocalizedNameField, {lg: "" as string, lc: "" as string, verifiedName: "" as string}, end);
}
function readLocalizedNameField(tag: number, obj: LocalizedName, pbf: Pbf) {
    if (tag === 1) obj.lg = pbf.readString();
    else if (tag === 2) obj.lc = pbf.readString();
    else if (tag === 3) obj.verifiedName = pbf.readString();
}
export function writeLocalizedName(obj: LocalizedName, pbf: Pbf) {
    if (obj.lg !== undefined) pbf.writeStringField(1, obj.lg);
    if (obj.lc !== undefined) pbf.writeStringField(2, obj.lc);
    if (obj.verifiedName !== undefined) pbf.writeStringField(3, obj.verifiedName);
}

export interface Location {
    degreesLatitude?: number;
    degreesLongitude?: number;
    name?: string;
}

export function readLocation(pbf: Pbf, end?: number) {
    return pbf.readFields(readLocationField, {degreesLatitude: 0 as number, degreesLongitude: 0 as number, name: "" as string}, end);
}
function readLocationField(tag: number, obj: Location, pbf: Pbf) {
    if (tag === 1) obj.degreesLatitude = pbf.readDouble();
    else if (tag === 2) obj.degreesLongitude = pbf.readDouble();
    else if (tag === 3) obj.name = pbf.readString();
}
export function writeLocation(obj: Location, pbf: Pbf) {
    if (obj.degreesLatitude !== undefined) pbf.writeDoubleField(1, obj.degreesLatitude);
    if (obj.degreesLongitude !== undefined) pbf.writeDoubleField(2, obj.degreesLongitude);
    if (obj.name !== undefined) pbf.writeStringField(3, obj.name);
}

export interface MediaData {
    localPath?: string;
}

export function readMediaData(pbf: Pbf, end?: number) {
    return pbf.readFields(readMediaDataField, {localPath: "" as string}, end);
}
function readMediaDataField(tag: number, obj: MediaData, pbf: Pbf) {
    if (tag === 1) obj.localPath = pbf.readString();
}
export function writeMediaData(obj: MediaData, pbf: Pbf) {
    if (obj.localPath !== undefined) pbf.writeStringField(1, obj.localPath);
}

export interface MediaEntry {
    fileSha256?: Uint8Array;
    mediaKey?: Uint8Array;
    fileEncSha256?: Uint8Array;
    directPath?: string;
    mediaKeyTimestamp?: number;
    serverMediaType?: string;
    uploadToken?: Uint8Array;
    validatedTimestamp?: Uint8Array;
    sidecar?: Uint8Array;
    objectId?: string;
    fbid?: string;
    downloadableThumbnail?: MediaEntryDownloadableThumbnail;
    handle?: string;
    filename?: string;
    progressiveJpegDetails?: MediaEntryProgressiveJpegDetails;
}

export function readMediaEntry(pbf: Pbf, end?: number) {
    return pbf.readFields(readMediaEntryField, {fileSha256: undefined as unknown as Uint8Array, mediaKey: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, directPath: "" as string, mediaKeyTimestamp: 0 as number, serverMediaType: "" as string, uploadToken: undefined as unknown as Uint8Array, validatedTimestamp: undefined as unknown as Uint8Array, sidecar: undefined as unknown as Uint8Array, objectId: "" as string, fbid: "" as string, downloadableThumbnail: undefined as unknown as MediaEntryDownloadableThumbnail, handle: "" as string, filename: "" as string, progressiveJpegDetails: undefined as unknown as MediaEntryProgressiveJpegDetails}, end);
}
function readMediaEntryField(tag: number, obj: MediaEntry, pbf: Pbf) {
    if (tag === 1) obj.fileSha256 = pbf.readBytes();
    else if (tag === 2) obj.mediaKey = pbf.readBytes();
    else if (tag === 3) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 4) obj.directPath = pbf.readString();
    else if (tag === 5) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 6) obj.serverMediaType = pbf.readString();
    else if (tag === 7) obj.uploadToken = pbf.readBytes();
    else if (tag === 8) obj.validatedTimestamp = pbf.readBytes();
    else if (tag === 9) obj.sidecar = pbf.readBytes();
    else if (tag === 10) obj.objectId = pbf.readString();
    else if (tag === 11) obj.fbid = pbf.readString();
    else if (tag === 12) obj.downloadableThumbnail = readMediaEntryDownloadableThumbnail(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 13) obj.handle = pbf.readString();
    else if (tag === 14) obj.filename = pbf.readString();
    else if (tag === 15) obj.progressiveJpegDetails = readMediaEntryProgressiveJpegDetails(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMediaEntry(obj: MediaEntry, pbf: Pbf) {
    if (obj.fileSha256 != null) pbf.writeBytesField(1, obj.fileSha256);
    if (obj.mediaKey != null) pbf.writeBytesField(2, obj.mediaKey);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(3, obj.fileEncSha256);
    if (obj.directPath !== undefined) pbf.writeStringField(4, obj.directPath);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(5, obj.mediaKeyTimestamp);
    if (obj.serverMediaType !== undefined) pbf.writeStringField(6, obj.serverMediaType);
    if (obj.uploadToken != null) pbf.writeBytesField(7, obj.uploadToken);
    if (obj.validatedTimestamp != null) pbf.writeBytesField(8, obj.validatedTimestamp);
    if (obj.sidecar != null) pbf.writeBytesField(9, obj.sidecar);
    if (obj.objectId !== undefined) pbf.writeStringField(10, obj.objectId);
    if (obj.fbid !== undefined) pbf.writeStringField(11, obj.fbid);
    if (obj.downloadableThumbnail) pbf.writeMessage(12, writeMediaEntryDownloadableThumbnail, obj.downloadableThumbnail);
    if (obj.handle !== undefined) pbf.writeStringField(13, obj.handle);
    if (obj.filename !== undefined) pbf.writeStringField(14, obj.filename);
    if (obj.progressiveJpegDetails) pbf.writeMessage(15, writeMediaEntryProgressiveJpegDetails, obj.progressiveJpegDetails);
}

export interface MediaEntryDownloadableThumbnail {
    fileSha256?: Uint8Array;
    fileEncSha256?: Uint8Array;
    directPath?: string;
    mediaKey?: Uint8Array;
    mediaKeyTimestamp?: number;
    objectId?: string;
}

export function readMediaEntryDownloadableThumbnail(pbf: Pbf, end?: number) {
    return pbf.readFields(readMediaEntryDownloadableThumbnailField, {fileSha256: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, directPath: "" as string, mediaKey: undefined as unknown as Uint8Array, mediaKeyTimestamp: 0 as number, objectId: "" as string}, end);
}
function readMediaEntryDownloadableThumbnailField(tag: number, obj: MediaEntryDownloadableThumbnail, pbf: Pbf) {
    if (tag === 1) obj.fileSha256 = pbf.readBytes();
    else if (tag === 2) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 3) obj.directPath = pbf.readString();
    else if (tag === 4) obj.mediaKey = pbf.readBytes();
    else if (tag === 5) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 6) obj.objectId = pbf.readString();
}
export function writeMediaEntryDownloadableThumbnail(obj: MediaEntryDownloadableThumbnail, pbf: Pbf) {
    if (obj.fileSha256 != null) pbf.writeBytesField(1, obj.fileSha256);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(2, obj.fileEncSha256);
    if (obj.directPath !== undefined) pbf.writeStringField(3, obj.directPath);
    if (obj.mediaKey != null) pbf.writeBytesField(4, obj.mediaKey);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(5, obj.mediaKeyTimestamp);
    if (obj.objectId !== undefined) pbf.writeStringField(6, obj.objectId);
}

export interface MediaEntryProgressiveJpegDetails {
    scanLengths?: number[];
    sidecar?: Uint8Array;
}

export function readMediaEntryProgressiveJpegDetails(pbf: Pbf, end?: number) {
    return pbf.readFields(readMediaEntryProgressiveJpegDetailsField, {scanLengths: [] as number[], sidecar: undefined as unknown as Uint8Array}, end);
}
function readMediaEntryProgressiveJpegDetailsField(tag: number, obj: MediaEntryProgressiveJpegDetails, pbf: Pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.scanLengths, true);
    else if (tag === 2) obj.sidecar = pbf.readBytes();
}
export function writeMediaEntryProgressiveJpegDetails(obj: MediaEntryProgressiveJpegDetails, pbf: Pbf) {
    if (obj.scanLengths) for (const item of obj.scanLengths) pbf.writeVarintField(1, item);
    if (obj.sidecar != null) pbf.writeBytesField(2, obj.sidecar);
}

export interface MediaNotifyMessage {
    expressPathUrl?: string;
    fileEncSha256?: Uint8Array;
    fileLength?: number;
}

export function readMediaNotifyMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMediaNotifyMessageField, {expressPathUrl: "" as string, fileEncSha256: undefined as unknown as Uint8Array, fileLength: 0 as number}, end);
}
function readMediaNotifyMessageField(tag: number, obj: MediaNotifyMessage, pbf: Pbf) {
    if (tag === 1) obj.expressPathUrl = pbf.readString();
    else if (tag === 2) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 3) obj.fileLength = pbf.readVarint();
}
export function writeMediaNotifyMessage(obj: MediaNotifyMessage, pbf: Pbf) {
    if (obj.expressPathUrl !== undefined) pbf.writeStringField(1, obj.expressPathUrl);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(2, obj.fileEncSha256);
    if (obj.fileLength !== undefined) pbf.writeVarintField(3, obj.fileLength);
}

export interface MediaRetryNotification {
    stanzaId?: string;
    directPath?: string;
    result?: MediaRetryNotificationResultType;
}

export function readMediaRetryNotification(pbf: Pbf, end?: number) {
    return pbf.readFields(readMediaRetryNotificationField, {stanzaId: "" as string, directPath: "" as string, result: 0 as MediaRetryNotificationResultType}, end);
}
function readMediaRetryNotificationField(tag: number, obj: MediaRetryNotification, pbf: Pbf) {
    if (tag === 1) obj.stanzaId = pbf.readString();
    else if (tag === 2) obj.directPath = pbf.readString();
    else if (tag === 3) obj.result = pbf.readVarint();
}
export function writeMediaRetryNotification(obj: MediaRetryNotification, pbf: Pbf) {
    if (obj.stanzaId !== undefined) pbf.writeStringField(1, obj.stanzaId);
    if (obj.directPath !== undefined) pbf.writeStringField(2, obj.directPath);
    if (obj.result !== undefined) pbf.writeVarintField(3, obj.result);
}

export enum MediaRetryNotificationResultType {
    GENERAL_ERROR = 0,
    SUCCESS = 1,
    NOT_FOUND = 2,
    DECRYPTION_ERROR = 3,
}

export interface Message {
    conversation?: string;
    senderKeyDistributionMessage?: MessageSenderKeyDistributionMessage;
    imageMessage?: MessageImageMessage;
    contactMessage?: MessageContactMessage;
    locationMessage?: MessageLocationMessage;
    extendedTextMessage?: MessageExtendedTextMessage;
    documentMessage?: MessageDocumentMessage;
    audioMessage?: MessageAudioMessage;
    videoMessage?: MessageVideoMessage;
    call?: MessageCall;
    chat?: MessageChat;
    protocolMessage?: MessageProtocolMessage;
    contactsArrayMessage?: MessageContactsArrayMessage;
    highlyStructuredMessage?: MessageHighlyStructuredMessage;
    fastRatchetKeySenderKeyDistributionMessage?: MessageSenderKeyDistributionMessage;
    sendPaymentMessage?: MessageSendPaymentMessage;
    liveLocationMessage?: MessageLiveLocationMessage;
    requestPaymentMessage?: MessageRequestPaymentMessage;
    declinePaymentRequestMessage?: MessageDeclinePaymentRequestMessage;
    cancelPaymentRequestMessage?: MessageCancelPaymentRequestMessage;
    templateMessage?: MessageTemplateMessage;
    stickerMessage?: MessageStickerMessage;
    groupInviteMessage?: MessageGroupInviteMessage;
    templateButtonReplyMessage?: MessageTemplateButtonReplyMessage;
    productMessage?: MessageProductMessage;
    deviceSentMessage?: MessageDeviceSentMessage;
    messageContextInfo?: MessageContextInfo;
    listMessage?: MessageListMessage;
    viewOnceMessage?: MessageFutureProofMessage;
    orderMessage?: MessageOrderMessage;
    listResponseMessage?: MessageListResponseMessage;
    ephemeralMessage?: MessageFutureProofMessage;
    invoiceMessage?: MessageInvoiceMessage;
    buttonsMessage?: MessageButtonsMessage;
    buttonsResponseMessage?: MessageButtonsResponseMessage;
    paymentInviteMessage?: MessagePaymentInviteMessage;
    interactiveMessage?: MessageInteractiveMessage;
    reactionMessage?: MessageReactionMessage;
    stickerSyncRmrMessage?: MessageStickerSyncRMRMessage;
    interactiveResponseMessage?: MessageInteractiveResponseMessage;
    pollCreationMessage?: MessagePollCreationMessage;
    pollUpdateMessage?: MessagePollUpdateMessage;
    keepInChatMessage?: MessageKeepInChatMessage;
    documentWithCaptionMessage?: MessageFutureProofMessage;
    requestPhoneNumberMessage?: MessageRequestPhoneNumberMessage;
    viewOnceMessageV2?: MessageFutureProofMessage;
    encReactionMessage?: MessageEncReactionMessage;
    editedMessage?: MessageFutureProofMessage;
    viewOnceMessageV2Extension?: MessageFutureProofMessage;
    pollCreationMessageV2?: MessagePollCreationMessage;
    scheduledCallCreationMessage?: MessageScheduledCallCreationMessage;
    groupMentionedMessage?: MessageFutureProofMessage;
    pinInChatMessage?: MessagePinInChatMessage;
    pollCreationMessageV3?: MessagePollCreationMessage;
    scheduledCallEditMessage?: MessageScheduledCallEditMessage;
    ptvMessage?: MessageVideoMessage;
    botInvokeMessage?: MessageFutureProofMessage;
    callLogMesssage?: MessageCallLogMessage;
    messageHistoryBundle?: MessageMessageHistoryBundle;
    encCommentMessage?: MessageEncCommentMessage;
    bcallMessage?: MessageBCallMessage;
    lottieStickerMessage?: MessageFutureProofMessage;
    eventMessage?: MessageEventMessage;
    commentMessage?: MessageCommentMessage;
    newsletterAdminInviteMessage?: MessageNewsletterAdminInviteMessage;
    extendedTextMessageWithParentKey?: MessageExtendedTextMessageWithParentKey;
    placeholderMessage?: MessagePlaceholderMessage;
    encEventUpdateMessage?: MessageEncEventUpdateMessage;
}

export function readMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageField, {conversation: "" as string, senderKeyDistributionMessage: undefined as unknown as MessageSenderKeyDistributionMessage, imageMessage: undefined as unknown as MessageImageMessage, contactMessage: undefined as unknown as MessageContactMessage, locationMessage: undefined as unknown as MessageLocationMessage, extendedTextMessage: undefined as unknown as MessageExtendedTextMessage, documentMessage: undefined as unknown as MessageDocumentMessage, audioMessage: undefined as unknown as MessageAudioMessage, videoMessage: undefined as unknown as MessageVideoMessage, call: undefined as unknown as MessageCall, chat: undefined as unknown as MessageChat, protocolMessage: undefined as unknown as MessageProtocolMessage, contactsArrayMessage: undefined as unknown as MessageContactsArrayMessage, highlyStructuredMessage: undefined as unknown as MessageHighlyStructuredMessage, fastRatchetKeySenderKeyDistributionMessage: undefined as unknown as MessageSenderKeyDistributionMessage, sendPaymentMessage: undefined as unknown as MessageSendPaymentMessage, liveLocationMessage: undefined as unknown as MessageLiveLocationMessage, requestPaymentMessage: undefined as unknown as MessageRequestPaymentMessage, declinePaymentRequestMessage: undefined as unknown as MessageDeclinePaymentRequestMessage, cancelPaymentRequestMessage: undefined as unknown as MessageCancelPaymentRequestMessage, templateMessage: undefined as unknown as MessageTemplateMessage, stickerMessage: undefined as unknown as MessageStickerMessage, groupInviteMessage: undefined as unknown as MessageGroupInviteMessage, templateButtonReplyMessage: undefined as unknown as MessageTemplateButtonReplyMessage, productMessage: undefined as unknown as MessageProductMessage, deviceSentMessage: undefined as unknown as MessageDeviceSentMessage, messageContextInfo: undefined as unknown as MessageContextInfo, listMessage: undefined as unknown as MessageListMessage, viewOnceMessage: undefined as unknown as MessageFutureProofMessage, orderMessage: undefined as unknown as MessageOrderMessage, listResponseMessage: undefined as unknown as MessageListResponseMessage, ephemeralMessage: undefined as unknown as MessageFutureProofMessage, invoiceMessage: undefined as unknown as MessageInvoiceMessage, buttonsMessage: undefined as unknown as MessageButtonsMessage, buttonsResponseMessage: undefined as unknown as MessageButtonsResponseMessage, paymentInviteMessage: undefined as unknown as MessagePaymentInviteMessage, interactiveMessage: undefined as unknown as MessageInteractiveMessage, reactionMessage: undefined as unknown as MessageReactionMessage, stickerSyncRmrMessage: undefined as unknown as MessageStickerSyncRMRMessage, interactiveResponseMessage: undefined as unknown as MessageInteractiveResponseMessage, pollCreationMessage: undefined as unknown as MessagePollCreationMessage, pollUpdateMessage: undefined as unknown as MessagePollUpdateMessage, keepInChatMessage: undefined as unknown as MessageKeepInChatMessage, documentWithCaptionMessage: undefined as unknown as MessageFutureProofMessage, requestPhoneNumberMessage: undefined as unknown as MessageRequestPhoneNumberMessage, viewOnceMessageV2: undefined as unknown as MessageFutureProofMessage, encReactionMessage: undefined as unknown as MessageEncReactionMessage, editedMessage: undefined as unknown as MessageFutureProofMessage, viewOnceMessageV2Extension: undefined as unknown as MessageFutureProofMessage, pollCreationMessageV2: undefined as unknown as MessagePollCreationMessage, scheduledCallCreationMessage: undefined as unknown as MessageScheduledCallCreationMessage, groupMentionedMessage: undefined as unknown as MessageFutureProofMessage, pinInChatMessage: undefined as unknown as MessagePinInChatMessage, pollCreationMessageV3: undefined as unknown as MessagePollCreationMessage, scheduledCallEditMessage: undefined as unknown as MessageScheduledCallEditMessage, ptvMessage: undefined as unknown as MessageVideoMessage, botInvokeMessage: undefined as unknown as MessageFutureProofMessage, callLogMesssage: undefined as unknown as MessageCallLogMessage, messageHistoryBundle: undefined as unknown as MessageMessageHistoryBundle, encCommentMessage: undefined as unknown as MessageEncCommentMessage, bcallMessage: undefined as unknown as MessageBCallMessage, lottieStickerMessage: undefined as unknown as MessageFutureProofMessage, eventMessage: undefined as unknown as MessageEventMessage, commentMessage: undefined as unknown as MessageCommentMessage, newsletterAdminInviteMessage: undefined as unknown as MessageNewsletterAdminInviteMessage, extendedTextMessageWithParentKey: undefined as unknown as MessageExtendedTextMessageWithParentKey, placeholderMessage: undefined as unknown as MessagePlaceholderMessage, encEventUpdateMessage: undefined as unknown as MessageEncEventUpdateMessage}, end);
}
function readMessageField(tag: number, obj: Message, pbf: Pbf) {
    if (tag === 1) obj.conversation = pbf.readString();
    else if (tag === 2) obj.senderKeyDistributionMessage = readMessageSenderKeyDistributionMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.imageMessage = readMessageImageMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.contactMessage = readMessageContactMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.locationMessage = readMessageLocationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.extendedTextMessage = readMessageExtendedTextMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.documentMessage = readMessageDocumentMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.audioMessage = readMessageAudioMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.videoMessage = readMessageVideoMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.call = readMessageCall(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 11) obj.chat = readMessageChat(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 12) obj.protocolMessage = readMessageProtocolMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 13) obj.contactsArrayMessage = readMessageContactsArrayMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 14) obj.highlyStructuredMessage = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 15) obj.fastRatchetKeySenderKeyDistributionMessage = readMessageSenderKeyDistributionMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 16) obj.sendPaymentMessage = readMessageSendPaymentMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.liveLocationMessage = readMessageLiveLocationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 22) obj.requestPaymentMessage = readMessageRequestPaymentMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 23) obj.declinePaymentRequestMessage = readMessageDeclinePaymentRequestMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 24) obj.cancelPaymentRequestMessage = readMessageCancelPaymentRequestMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 25) obj.templateMessage = readMessageTemplateMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 26) obj.stickerMessage = readMessageStickerMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 28) obj.groupInviteMessage = readMessageGroupInviteMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 29) obj.templateButtonReplyMessage = readMessageTemplateButtonReplyMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 30) obj.productMessage = readMessageProductMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 31) obj.deviceSentMessage = readMessageDeviceSentMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 35) obj.messageContextInfo = readMessageContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 36) obj.listMessage = readMessageListMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 37) obj.viewOnceMessage = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 38) obj.orderMessage = readMessageOrderMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 39) obj.listResponseMessage = readMessageListResponseMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 40) obj.ephemeralMessage = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 41) obj.invoiceMessage = readMessageInvoiceMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 42) obj.buttonsMessage = readMessageButtonsMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 43) obj.buttonsResponseMessage = readMessageButtonsResponseMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 44) obj.paymentInviteMessage = readMessagePaymentInviteMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 45) obj.interactiveMessage = readMessageInteractiveMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 46) obj.reactionMessage = readMessageReactionMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 47) obj.stickerSyncRmrMessage = readMessageStickerSyncRMRMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 48) obj.interactiveResponseMessage = readMessageInteractiveResponseMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 49) obj.pollCreationMessage = readMessagePollCreationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 50) obj.pollUpdateMessage = readMessagePollUpdateMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 51) obj.keepInChatMessage = readMessageKeepInChatMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 53) obj.documentWithCaptionMessage = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 54) obj.requestPhoneNumberMessage = readMessageRequestPhoneNumberMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 55) obj.viewOnceMessageV2 = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 56) obj.encReactionMessage = readMessageEncReactionMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 58) obj.editedMessage = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 59) obj.viewOnceMessageV2Extension = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 60) obj.pollCreationMessageV2 = readMessagePollCreationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 61) obj.scheduledCallCreationMessage = readMessageScheduledCallCreationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 62) obj.groupMentionedMessage = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 63) obj.pinInChatMessage = readMessagePinInChatMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 64) obj.pollCreationMessageV3 = readMessagePollCreationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 65) obj.scheduledCallEditMessage = readMessageScheduledCallEditMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 66) obj.ptvMessage = readMessageVideoMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 67) obj.botInvokeMessage = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 69) obj.callLogMesssage = readMessageCallLogMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 70) obj.messageHistoryBundle = readMessageMessageHistoryBundle(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 71) obj.encCommentMessage = readMessageEncCommentMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 72) obj.bcallMessage = readMessageBCallMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 74) obj.lottieStickerMessage = readMessageFutureProofMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 75) obj.eventMessage = readMessageEventMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 77) obj.commentMessage = readMessageCommentMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 78) obj.newsletterAdminInviteMessage = readMessageNewsletterAdminInviteMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 79) obj.extendedTextMessageWithParentKey = readMessageExtendedTextMessageWithParentKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 80) obj.placeholderMessage = readMessagePlaceholderMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 81) obj.encEventUpdateMessage = readMessageEncEventUpdateMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessage(obj: Message, pbf: Pbf) {
    if (obj.conversation !== undefined) pbf.writeStringField(1, obj.conversation);
    if (obj.senderKeyDistributionMessage) pbf.writeMessage(2, writeMessageSenderKeyDistributionMessage, obj.senderKeyDistributionMessage);
    if (obj.imageMessage) pbf.writeMessage(3, writeMessageImageMessage, obj.imageMessage);
    if (obj.contactMessage) pbf.writeMessage(4, writeMessageContactMessage, obj.contactMessage);
    if (obj.locationMessage) pbf.writeMessage(5, writeMessageLocationMessage, obj.locationMessage);
    if (obj.extendedTextMessage) pbf.writeMessage(6, writeMessageExtendedTextMessage, obj.extendedTextMessage);
    if (obj.documentMessage) pbf.writeMessage(7, writeMessageDocumentMessage, obj.documentMessage);
    if (obj.audioMessage) pbf.writeMessage(8, writeMessageAudioMessage, obj.audioMessage);
    if (obj.videoMessage) pbf.writeMessage(9, writeMessageVideoMessage, obj.videoMessage);
    if (obj.call) pbf.writeMessage(10, writeMessageCall, obj.call);
    if (obj.chat) pbf.writeMessage(11, writeMessageChat, obj.chat);
    if (obj.protocolMessage) pbf.writeMessage(12, writeMessageProtocolMessage, obj.protocolMessage);
    if (obj.contactsArrayMessage) pbf.writeMessage(13, writeMessageContactsArrayMessage, obj.contactsArrayMessage);
    if (obj.highlyStructuredMessage) pbf.writeMessage(14, writeMessageHighlyStructuredMessage, obj.highlyStructuredMessage);
    if (obj.fastRatchetKeySenderKeyDistributionMessage) pbf.writeMessage(15, writeMessageSenderKeyDistributionMessage, obj.fastRatchetKeySenderKeyDistributionMessage);
    if (obj.sendPaymentMessage) pbf.writeMessage(16, writeMessageSendPaymentMessage, obj.sendPaymentMessage);
    if (obj.liveLocationMessage) pbf.writeMessage(18, writeMessageLiveLocationMessage, obj.liveLocationMessage);
    if (obj.requestPaymentMessage) pbf.writeMessage(22, writeMessageRequestPaymentMessage, obj.requestPaymentMessage);
    if (obj.declinePaymentRequestMessage) pbf.writeMessage(23, writeMessageDeclinePaymentRequestMessage, obj.declinePaymentRequestMessage);
    if (obj.cancelPaymentRequestMessage) pbf.writeMessage(24, writeMessageCancelPaymentRequestMessage, obj.cancelPaymentRequestMessage);
    if (obj.templateMessage) pbf.writeMessage(25, writeMessageTemplateMessage, obj.templateMessage);
    if (obj.stickerMessage) pbf.writeMessage(26, writeMessageStickerMessage, obj.stickerMessage);
    if (obj.groupInviteMessage) pbf.writeMessage(28, writeMessageGroupInviteMessage, obj.groupInviteMessage);
    if (obj.templateButtonReplyMessage) pbf.writeMessage(29, writeMessageTemplateButtonReplyMessage, obj.templateButtonReplyMessage);
    if (obj.productMessage) pbf.writeMessage(30, writeMessageProductMessage, obj.productMessage);
    if (obj.deviceSentMessage) pbf.writeMessage(31, writeMessageDeviceSentMessage, obj.deviceSentMessage);
    if (obj.messageContextInfo) pbf.writeMessage(35, writeMessageContextInfo, obj.messageContextInfo);
    if (obj.listMessage) pbf.writeMessage(36, writeMessageListMessage, obj.listMessage);
    if (obj.viewOnceMessage) pbf.writeMessage(37, writeMessageFutureProofMessage, obj.viewOnceMessage);
    if (obj.orderMessage) pbf.writeMessage(38, writeMessageOrderMessage, obj.orderMessage);
    if (obj.listResponseMessage) pbf.writeMessage(39, writeMessageListResponseMessage, obj.listResponseMessage);
    if (obj.ephemeralMessage) pbf.writeMessage(40, writeMessageFutureProofMessage, obj.ephemeralMessage);
    if (obj.invoiceMessage) pbf.writeMessage(41, writeMessageInvoiceMessage, obj.invoiceMessage);
    if (obj.buttonsMessage) pbf.writeMessage(42, writeMessageButtonsMessage, obj.buttonsMessage);
    if (obj.buttonsResponseMessage) pbf.writeMessage(43, writeMessageButtonsResponseMessage, obj.buttonsResponseMessage);
    if (obj.paymentInviteMessage) pbf.writeMessage(44, writeMessagePaymentInviteMessage, obj.paymentInviteMessage);
    if (obj.interactiveMessage) pbf.writeMessage(45, writeMessageInteractiveMessage, obj.interactiveMessage);
    if (obj.reactionMessage) pbf.writeMessage(46, writeMessageReactionMessage, obj.reactionMessage);
    if (obj.stickerSyncRmrMessage) pbf.writeMessage(47, writeMessageStickerSyncRMRMessage, obj.stickerSyncRmrMessage);
    if (obj.interactiveResponseMessage) pbf.writeMessage(48, writeMessageInteractiveResponseMessage, obj.interactiveResponseMessage);
    if (obj.pollCreationMessage) pbf.writeMessage(49, writeMessagePollCreationMessage, obj.pollCreationMessage);
    if (obj.pollUpdateMessage) pbf.writeMessage(50, writeMessagePollUpdateMessage, obj.pollUpdateMessage);
    if (obj.keepInChatMessage) pbf.writeMessage(51, writeMessageKeepInChatMessage, obj.keepInChatMessage);
    if (obj.documentWithCaptionMessage) pbf.writeMessage(53, writeMessageFutureProofMessage, obj.documentWithCaptionMessage);
    if (obj.requestPhoneNumberMessage) pbf.writeMessage(54, writeMessageRequestPhoneNumberMessage, obj.requestPhoneNumberMessage);
    if (obj.viewOnceMessageV2) pbf.writeMessage(55, writeMessageFutureProofMessage, obj.viewOnceMessageV2);
    if (obj.encReactionMessage) pbf.writeMessage(56, writeMessageEncReactionMessage, obj.encReactionMessage);
    if (obj.editedMessage) pbf.writeMessage(58, writeMessageFutureProofMessage, obj.editedMessage);
    if (obj.viewOnceMessageV2Extension) pbf.writeMessage(59, writeMessageFutureProofMessage, obj.viewOnceMessageV2Extension);
    if (obj.pollCreationMessageV2) pbf.writeMessage(60, writeMessagePollCreationMessage, obj.pollCreationMessageV2);
    if (obj.scheduledCallCreationMessage) pbf.writeMessage(61, writeMessageScheduledCallCreationMessage, obj.scheduledCallCreationMessage);
    if (obj.groupMentionedMessage) pbf.writeMessage(62, writeMessageFutureProofMessage, obj.groupMentionedMessage);
    if (obj.pinInChatMessage) pbf.writeMessage(63, writeMessagePinInChatMessage, obj.pinInChatMessage);
    if (obj.pollCreationMessageV3) pbf.writeMessage(64, writeMessagePollCreationMessage, obj.pollCreationMessageV3);
    if (obj.scheduledCallEditMessage) pbf.writeMessage(65, writeMessageScheduledCallEditMessage, obj.scheduledCallEditMessage);
    if (obj.ptvMessage) pbf.writeMessage(66, writeMessageVideoMessage, obj.ptvMessage);
    if (obj.botInvokeMessage) pbf.writeMessage(67, writeMessageFutureProofMessage, obj.botInvokeMessage);
    if (obj.callLogMesssage) pbf.writeMessage(69, writeMessageCallLogMessage, obj.callLogMesssage);
    if (obj.messageHistoryBundle) pbf.writeMessage(70, writeMessageMessageHistoryBundle, obj.messageHistoryBundle);
    if (obj.encCommentMessage) pbf.writeMessage(71, writeMessageEncCommentMessage, obj.encCommentMessage);
    if (obj.bcallMessage) pbf.writeMessage(72, writeMessageBCallMessage, obj.bcallMessage);
    if (obj.lottieStickerMessage) pbf.writeMessage(74, writeMessageFutureProofMessage, obj.lottieStickerMessage);
    if (obj.eventMessage) pbf.writeMessage(75, writeMessageEventMessage, obj.eventMessage);
    if (obj.commentMessage) pbf.writeMessage(77, writeMessageCommentMessage, obj.commentMessage);
    if (obj.newsletterAdminInviteMessage) pbf.writeMessage(78, writeMessageNewsletterAdminInviteMessage, obj.newsletterAdminInviteMessage);
    if (obj.extendedTextMessageWithParentKey) pbf.writeMessage(79, writeMessageExtendedTextMessageWithParentKey, obj.extendedTextMessageWithParentKey);
    if (obj.placeholderMessage) pbf.writeMessage(80, writeMessagePlaceholderMessage, obj.placeholderMessage);
    if (obj.encEventUpdateMessage) pbf.writeMessage(81, writeMessageEncEventUpdateMessage, obj.encEventUpdateMessage);
}

export enum MessagePeerDataOperationRequestType {
    UPLOAD_STICKER = 0,
    SEND_RECENT_STICKER_BOOTSTRAP = 1,
    GENERATE_LINK_PREVIEW = 2,
    HISTORY_SYNC_ON_DEMAND = 3,
    PLACEHOLDER_MESSAGE_RESEND = 4,
}

export interface MessageAppStateFatalExceptionNotification {
    collectionNames?: string[];
    timestamp?: number;
}

export function readMessageAppStateFatalExceptionNotification(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAppStateFatalExceptionNotificationField, {collectionNames: [] as string[], timestamp: 0 as number}, end);
}
function readMessageAppStateFatalExceptionNotificationField(tag: number, obj: MessageAppStateFatalExceptionNotification, pbf: Pbf) {
    if (tag === 1) obj.collectionNames?.push(pbf.readString());
    else if (tag === 2) obj.timestamp = pbf.readVarint(true);
}
export function writeMessageAppStateFatalExceptionNotification(obj: MessageAppStateFatalExceptionNotification, pbf: Pbf) {
    if (obj.collectionNames) for (const item of obj.collectionNames) pbf.writeStringField(1, item);
    if (obj.timestamp !== undefined) pbf.writeVarintField(2, obj.timestamp);
}

export interface MessageAppStateSyncKey {
    keyId?: MessageAppStateSyncKeyId;
    keyData?: MessageAppStateSyncKeyData;
}

export function readMessageAppStateSyncKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAppStateSyncKeyField, {keyId: undefined as unknown as MessageAppStateSyncKeyId, keyData: undefined as unknown as MessageAppStateSyncKeyData}, end);
}
function readMessageAppStateSyncKeyField(tag: number, obj: MessageAppStateSyncKey, pbf: Pbf) {
    if (tag === 1) obj.keyId = readMessageAppStateSyncKeyId(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.keyData = readMessageAppStateSyncKeyData(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageAppStateSyncKey(obj: MessageAppStateSyncKey, pbf: Pbf) {
    if (obj.keyId) pbf.writeMessage(1, writeMessageAppStateSyncKeyId, obj.keyId);
    if (obj.keyData) pbf.writeMessage(2, writeMessageAppStateSyncKeyData, obj.keyData);
}

export interface MessageAppStateSyncKeyData {
    keyData?: Uint8Array;
    fingerprint?: MessageAppStateSyncKeyFingerprint;
    timestamp?: number;
}

export function readMessageAppStateSyncKeyData(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAppStateSyncKeyDataField, {keyData: undefined as unknown as Uint8Array, fingerprint: undefined as unknown as MessageAppStateSyncKeyFingerprint, timestamp: 0 as number}, end);
}
function readMessageAppStateSyncKeyDataField(tag: number, obj: MessageAppStateSyncKeyData, pbf: Pbf) {
    if (tag === 1) obj.keyData = pbf.readBytes();
    else if (tag === 2) obj.fingerprint = readMessageAppStateSyncKeyFingerprint(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.timestamp = pbf.readVarint(true);
}
export function writeMessageAppStateSyncKeyData(obj: MessageAppStateSyncKeyData, pbf: Pbf) {
    if (obj.keyData != null) pbf.writeBytesField(1, obj.keyData);
    if (obj.fingerprint) pbf.writeMessage(2, writeMessageAppStateSyncKeyFingerprint, obj.fingerprint);
    if (obj.timestamp !== undefined) pbf.writeVarintField(3, obj.timestamp);
}

export interface MessageAppStateSyncKeyFingerprint {
    rawId?: number;
    currentIndex?: number;
    deviceIndexes?: number[];
}

export function readMessageAppStateSyncKeyFingerprint(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAppStateSyncKeyFingerprintField, {rawId: 0 as number, currentIndex: 0 as number, deviceIndexes: [] as number[]}, end);
}
function readMessageAppStateSyncKeyFingerprintField(tag: number, obj: MessageAppStateSyncKeyFingerprint, pbf: Pbf) {
    if (tag === 1) obj.rawId = pbf.readVarint();
    else if (tag === 2) obj.currentIndex = pbf.readVarint();
    else if (tag === 3) pbf.readPackedVarint(obj.deviceIndexes);
}
export function writeMessageAppStateSyncKeyFingerprint(obj: MessageAppStateSyncKeyFingerprint, pbf: Pbf) {
    if (obj.rawId !== undefined) pbf.writeVarintField(1, obj.rawId);
    if (obj.currentIndex !== undefined) pbf.writeVarintField(2, obj.currentIndex);
    if (obj.deviceIndexes) pbf.writePackedVarint(3, obj.deviceIndexes);
}

export interface MessageAppStateSyncKeyId {
    keyId?: Uint8Array;
}

export function readMessageAppStateSyncKeyId(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAppStateSyncKeyIdField, {keyId: undefined as unknown as Uint8Array}, end);
}
function readMessageAppStateSyncKeyIdField(tag: number, obj: MessageAppStateSyncKeyId, pbf: Pbf) {
    if (tag === 1) obj.keyId = pbf.readBytes();
}
export function writeMessageAppStateSyncKeyId(obj: MessageAppStateSyncKeyId, pbf: Pbf) {
    if (obj.keyId != null) pbf.writeBytesField(1, obj.keyId);
}

export interface MessageAppStateSyncKeyRequest {
    keyIds?: MessageAppStateSyncKeyId[];
}

export function readMessageAppStateSyncKeyRequest(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAppStateSyncKeyRequestField, {keyIds: [] as MessageAppStateSyncKeyId[]}, end);
}
function readMessageAppStateSyncKeyRequestField(tag: number, obj: MessageAppStateSyncKeyRequest, pbf: Pbf) {
    if (tag === 1) obj.keyIds?.push(readMessageAppStateSyncKeyId(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessageAppStateSyncKeyRequest(obj: MessageAppStateSyncKeyRequest, pbf: Pbf) {
    if (obj.keyIds) for (const item of obj.keyIds) pbf.writeMessage(1, writeMessageAppStateSyncKeyId, item);
}

export interface MessageAppStateSyncKeyShare {
    keys?: MessageAppStateSyncKey[];
}

export function readMessageAppStateSyncKeyShare(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAppStateSyncKeyShareField, {keys: [] as MessageAppStateSyncKey[]}, end);
}
function readMessageAppStateSyncKeyShareField(tag: number, obj: MessageAppStateSyncKeyShare, pbf: Pbf) {
    if (tag === 1) obj.keys?.push(readMessageAppStateSyncKey(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessageAppStateSyncKeyShare(obj: MessageAppStateSyncKeyShare, pbf: Pbf) {
    if (obj.keys) for (const item of obj.keys) pbf.writeMessage(1, writeMessageAppStateSyncKey, item);
}

export interface MessageAudioMessage {
    url?: string;
    mimetype?: string;
    fileSha256?: Uint8Array;
    fileLength?: number;
    seconds?: number;
    ptt?: boolean;
    mediaKey?: Uint8Array;
    fileEncSha256?: Uint8Array;
    directPath?: string;
    mediaKeyTimestamp?: number;
    contextInfo?: ContextInfo;
    streamingSidecar?: Uint8Array;
    waveform?: Uint8Array;
    backgroundArgb?: number;
    viewOnce?: boolean;
}

export function readMessageAudioMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAudioMessageField, {url: "" as string, mimetype: "" as string, fileSha256: undefined as unknown as Uint8Array, fileLength: 0 as number, seconds: 0 as number, ptt: false as boolean, mediaKey: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, directPath: "" as string, mediaKeyTimestamp: 0 as number, contextInfo: undefined as unknown as ContextInfo, streamingSidecar: undefined as unknown as Uint8Array, waveform: undefined as unknown as Uint8Array, backgroundArgb: 0 as number, viewOnce: false as boolean}, end);
}
function readMessageAudioMessageField(tag: number, obj: MessageAudioMessage, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.mimetype = pbf.readString();
    else if (tag === 3) obj.fileSha256 = pbf.readBytes();
    else if (tag === 4) obj.fileLength = pbf.readVarint();
    else if (tag === 5) obj.seconds = pbf.readVarint();
    else if (tag === 6) obj.ptt = pbf.readBoolean();
    else if (tag === 7) obj.mediaKey = pbf.readBytes();
    else if (tag === 8) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 9) obj.directPath = pbf.readString();
    else if (tag === 10) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.streamingSidecar = pbf.readBytes();
    else if (tag === 19) obj.waveform = pbf.readBytes();
    else if (tag === 20) obj.backgroundArgb = pbf.readFixed32();
    else if (tag === 21) obj.viewOnce = pbf.readBoolean();
}
export function writeMessageAudioMessage(obj: MessageAudioMessage, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.mimetype !== undefined) pbf.writeStringField(2, obj.mimetype);
    if (obj.fileSha256 != null) pbf.writeBytesField(3, obj.fileSha256);
    if (obj.fileLength !== undefined) pbf.writeVarintField(4, obj.fileLength);
    if (obj.seconds !== undefined) pbf.writeVarintField(5, obj.seconds);
    if (obj.ptt !== undefined) pbf.writeBooleanField(6, obj.ptt);
    if (obj.mediaKey != null) pbf.writeBytesField(7, obj.mediaKey);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(8, obj.fileEncSha256);
    if (obj.directPath !== undefined) pbf.writeStringField(9, obj.directPath);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(10, obj.mediaKeyTimestamp);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
    if (obj.streamingSidecar != null) pbf.writeBytesField(18, obj.streamingSidecar);
    if (obj.waveform != null) pbf.writeBytesField(19, obj.waveform);
    if (obj.backgroundArgb !== undefined) pbf.writeFixed32Field(20, obj.backgroundArgb);
    if (obj.viewOnce !== undefined) pbf.writeBooleanField(21, obj.viewOnce);
}

export interface MessageBCallMessage {
    sessionId?: string;
    mediaType?: MessageBCallMessageMediaType;
    masterKey?: Uint8Array;
    caption?: string;
}

export function readMessageBCallMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageBCallMessageField, {sessionId: "" as string, mediaType: 0 as MessageBCallMessageMediaType, masterKey: undefined as unknown as Uint8Array, caption: "" as string}, end);
}
function readMessageBCallMessageField(tag: number, obj: MessageBCallMessage, pbf: Pbf) {
    if (tag === 1) obj.sessionId = pbf.readString();
    else if (tag === 2) obj.mediaType = pbf.readVarint();
    else if (tag === 3) obj.masterKey = pbf.readBytes();
    else if (tag === 4) obj.caption = pbf.readString();
}
export function writeMessageBCallMessage(obj: MessageBCallMessage, pbf: Pbf) {
    if (obj.sessionId !== undefined) pbf.writeStringField(1, obj.sessionId);
    if (obj.mediaType !== undefined) pbf.writeVarintField(2, obj.mediaType);
    if (obj.masterKey != null) pbf.writeBytesField(3, obj.masterKey);
    if (obj.caption !== undefined) pbf.writeStringField(4, obj.caption);
}

export enum MessageBCallMessageMediaType {
    UNKNOWN = 0,
    AUDIO = 1,
    VIDEO = 2,
}

export interface MessageBotFeedbackMessage {
    messageKey?: MessageKey;
    kind?: MessageBotFeedbackMessageBotFeedbackKind;
    text?: string;
    kindNegative?: number;
    kindPositive?: number;
}

export function readMessageBotFeedbackMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageBotFeedbackMessageField, {messageKey: undefined as unknown as MessageKey, kind: 0 as MessageBotFeedbackMessageBotFeedbackKind, text: "" as string, kindNegative: 0 as number, kindPositive: 0 as number}, end);
}
function readMessageBotFeedbackMessageField(tag: number, obj: MessageBotFeedbackMessage, pbf: Pbf) {
    if (tag === 1) obj.messageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.kind = pbf.readVarint();
    else if (tag === 3) obj.text = pbf.readString();
    else if (tag === 4) obj.kindNegative = pbf.readVarint();
    else if (tag === 5) obj.kindPositive = pbf.readVarint();
}
export function writeMessageBotFeedbackMessage(obj: MessageBotFeedbackMessage, pbf: Pbf) {
    if (obj.messageKey) pbf.writeMessage(1, writeMessageKey, obj.messageKey);
    if (obj.kind !== undefined) pbf.writeVarintField(2, obj.kind);
    if (obj.text !== undefined) pbf.writeStringField(3, obj.text);
    if (obj.kindNegative !== undefined) pbf.writeVarintField(4, obj.kindNegative);
    if (obj.kindPositive !== undefined) pbf.writeVarintField(5, obj.kindPositive);
}

export enum MessageBotFeedbackMessageBotFeedbackKind {
    BOT_FEEDBACK_POSITIVE = 0,
    BOT_FEEDBACK_NEGATIVE_GENERIC = 1,
    BOT_FEEDBACK_NEGATIVE_HELPFUL = 2,
    BOT_FEEDBACK_NEGATIVE_INTERESTING = 3,
    BOT_FEEDBACK_NEGATIVE_ACCURATE = 4,
    BOT_FEEDBACK_NEGATIVE_SAFE = 5,
    BOT_FEEDBACK_NEGATIVE_OTHER = 6,
    BOT_FEEDBACK_NEGATIVE_REFUSED = 7,
    BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING = 8,
    BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT = 9,
}

export enum MessageBotFeedbackMessageBotFeedbackKindMultipleNegative {
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC = 1,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL = 2,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING = 4,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE = 8,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE = 16,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER = 32,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED = 64,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING = 128,
    BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT = 256,
}

export enum MessageBotFeedbackMessageBotFeedbackKindMultiplePositive {
    BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC = 1,
}

export interface MessageButtonsMessage {
    contentText?: string;
    footerText?: string;
    contextInfo?: ContextInfo;
    buttons?: MessageButtonsMessageButton[];
    headerType?: MessageButtonsMessageHeaderType;
    text?: string;
    documentMessage?: MessageDocumentMessage;
    imageMessage?: MessageImageMessage;
    videoMessage?: MessageVideoMessage;
    locationMessage?: MessageLocationMessage;
}

export function readMessageButtonsMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageButtonsMessageField, {contentText: "" as string, footerText: "" as string, contextInfo: undefined as unknown as ContextInfo, buttons: [] as MessageButtonsMessageButton[], headerType: 0 as MessageButtonsMessageHeaderType, text: "" as string, documentMessage: undefined as unknown as MessageDocumentMessage, imageMessage: undefined as unknown as MessageImageMessage, videoMessage: undefined as unknown as MessageVideoMessage, locationMessage: undefined as unknown as MessageLocationMessage}, end);
}
function readMessageButtonsMessageField(tag: number, obj: MessageButtonsMessage, pbf: Pbf) {
    if (tag === 6) obj.contentText = pbf.readString();
    else if (tag === 7) obj.footerText = pbf.readString();
    else if (tag === 8) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.buttons?.push(readMessageButtonsMessageButton(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 10) obj.headerType = pbf.readVarint();
    else if (tag === 1) { obj.text = pbf.readString();
//@ts-ignore 
obj.header = "text"
; }
    else if (tag === 2) { obj.documentMessage = readMessageDocumentMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.header = "documentMessage"
; }
    else if (tag === 3) { obj.imageMessage = readMessageImageMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.header = "imageMessage"
; }
    else if (tag === 4) { obj.videoMessage = readMessageVideoMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.header = "videoMessage"
; }
    else if (tag === 5) { obj.locationMessage = readMessageLocationMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.header = "locationMessage"
; }
}
export function writeMessageButtonsMessage(obj: MessageButtonsMessage, pbf: Pbf) {
    if (obj.contentText !== undefined) pbf.writeStringField(6, obj.contentText);
    if (obj.footerText !== undefined) pbf.writeStringField(7, obj.footerText);
    if (obj.contextInfo) pbf.writeMessage(8, writeContextInfo, obj.contextInfo);
    if (obj.buttons) for (const item of obj.buttons) pbf.writeMessage(9, writeMessageButtonsMessageButton, item);
    if (obj.headerType !== undefined) pbf.writeVarintField(10, obj.headerType);
    if (obj.text != null) pbf.writeStringField(1, obj.text);
    if (obj.documentMessage) pbf.writeMessage(2, writeMessageDocumentMessage, obj.documentMessage);
    if (obj.imageMessage) pbf.writeMessage(3, writeMessageImageMessage, obj.imageMessage);
    if (obj.videoMessage) pbf.writeMessage(4, writeMessageVideoMessage, obj.videoMessage);
    if (obj.locationMessage) pbf.writeMessage(5, writeMessageLocationMessage, obj.locationMessage);
}

export enum MessageButtonsMessageHeaderType {
    UNKNOWN = 0,
    EMPTY = 1,
    TEXT = 2,
    DOCUMENT = 3,
    IMAGE = 4,
    VIDEO = 5,
    LOCATION = 6,
}

export interface MessageButtonsMessageButton {
    buttonId?: string;
    buttonText?: MessageButtonsMessageButtonButtonText;
    type?: MessageButtonsMessageButtonType;
    nativeFlowInfo?: MessageButtonsMessageButtonNativeFlowInfo;
}

export function readMessageButtonsMessageButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageButtonsMessageButtonField, {buttonId: "" as string, buttonText: undefined as unknown as MessageButtonsMessageButtonButtonText, type: 0 as MessageButtonsMessageButtonType, nativeFlowInfo: undefined as unknown as MessageButtonsMessageButtonNativeFlowInfo}, end);
}
function readMessageButtonsMessageButtonField(tag: number, obj: MessageButtonsMessageButton, pbf: Pbf) {
    if (tag === 1) obj.buttonId = pbf.readString();
    else if (tag === 2) obj.buttonText = readMessageButtonsMessageButtonButtonText(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.nativeFlowInfo = readMessageButtonsMessageButtonNativeFlowInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageButtonsMessageButton(obj: MessageButtonsMessageButton, pbf: Pbf) {
    if (obj.buttonId !== undefined) pbf.writeStringField(1, obj.buttonId);
    if (obj.buttonText) pbf.writeMessage(2, writeMessageButtonsMessageButtonButtonText, obj.buttonText);
    if (obj.type !== undefined) pbf.writeVarintField(3, obj.type);
    if (obj.nativeFlowInfo) pbf.writeMessage(4, writeMessageButtonsMessageButtonNativeFlowInfo, obj.nativeFlowInfo);
}

export enum MessageButtonsMessageButtonType {
    UNKNOWN = 0,
    RESPONSE = 1,
    NATIVE_FLOW = 2,
}

export interface MessageButtonsMessageButtonButtonText {
    displayText?: string;
}

export function readMessageButtonsMessageButtonButtonText(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageButtonsMessageButtonButtonTextField, {displayText: "" as string}, end);
}
function readMessageButtonsMessageButtonButtonTextField(tag: number, obj: MessageButtonsMessageButtonButtonText, pbf: Pbf) {
    if (tag === 1) obj.displayText = pbf.readString();
}
export function writeMessageButtonsMessageButtonButtonText(obj: MessageButtonsMessageButtonButtonText, pbf: Pbf) {
    if (obj.displayText !== undefined) pbf.writeStringField(1, obj.displayText);
}

export interface MessageButtonsMessageButtonNativeFlowInfo {
    name?: string;
    paramsJson?: string;
}

export function readMessageButtonsMessageButtonNativeFlowInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageButtonsMessageButtonNativeFlowInfoField, {name: "" as string, paramsJson: "" as string}, end);
}
function readMessageButtonsMessageButtonNativeFlowInfoField(tag: number, obj: MessageButtonsMessageButtonNativeFlowInfo, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.paramsJson = pbf.readString();
}
export function writeMessageButtonsMessageButtonNativeFlowInfo(obj: MessageButtonsMessageButtonNativeFlowInfo, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
    if (obj.paramsJson !== undefined) pbf.writeStringField(2, obj.paramsJson);
}

export interface MessageButtonsResponseMessage {
    selectedButtonId?: string;
    contextInfo?: ContextInfo;
    type?: MessageButtonsResponseMessageType;
    selectedDisplayText?: string;
}

export function readMessageButtonsResponseMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageButtonsResponseMessageField, {selectedButtonId: "" as string, contextInfo: undefined as unknown as ContextInfo, type: 0 as MessageButtonsResponseMessageType, selectedDisplayText: "" as string}, end);
}
function readMessageButtonsResponseMessageField(tag: number, obj: MessageButtonsResponseMessage, pbf: Pbf) {
    if (tag === 1) obj.selectedButtonId = pbf.readString();
    else if (tag === 3) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.type = pbf.readVarint();
    else if (tag === 2) { obj.selectedDisplayText = pbf.readString();
//@ts-ignore 
obj.response = "selectedDisplayText"
; }
}
export function writeMessageButtonsResponseMessage(obj: MessageButtonsResponseMessage, pbf: Pbf) {
    if (obj.selectedButtonId !== undefined) pbf.writeStringField(1, obj.selectedButtonId);
    if (obj.contextInfo) pbf.writeMessage(3, writeContextInfo, obj.contextInfo);
    if (obj.type !== undefined) pbf.writeVarintField(4, obj.type);
    if (obj.selectedDisplayText != null) pbf.writeStringField(2, obj.selectedDisplayText);
}

export enum MessageButtonsResponseMessageType {
    UNKNOWN = 0,
    DISPLAY_TEXT = 1,
}

export interface MessageCall {
    callKey?: Uint8Array;
    conversionSource?: string;
    conversionData?: Uint8Array;
    conversionDelaySeconds?: number;
}

export function readMessageCall(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageCallField, {callKey: undefined as unknown as Uint8Array, conversionSource: "" as string, conversionData: undefined as unknown as Uint8Array, conversionDelaySeconds: 0 as number}, end);
}
function readMessageCallField(tag: number, obj: MessageCall, pbf: Pbf) {
    if (tag === 1) obj.callKey = pbf.readBytes();
    else if (tag === 2) obj.conversionSource = pbf.readString();
    else if (tag === 3) obj.conversionData = pbf.readBytes();
    else if (tag === 4) obj.conversionDelaySeconds = pbf.readVarint();
}
export function writeMessageCall(obj: MessageCall, pbf: Pbf) {
    if (obj.callKey != null) pbf.writeBytesField(1, obj.callKey);
    if (obj.conversionSource !== undefined) pbf.writeStringField(2, obj.conversionSource);
    if (obj.conversionData != null) pbf.writeBytesField(3, obj.conversionData);
    if (obj.conversionDelaySeconds !== undefined) pbf.writeVarintField(4, obj.conversionDelaySeconds);
}

export interface MessageCallLogMessage {
    isVideo?: boolean;
    callOutcome?: MessageCallLogMessageCallOutcome;
    durationSecs?: number;
    callType?: MessageCallLogMessageCallType;
    participants?: MessageCallLogMessageCallParticipant[];
}

export function readMessageCallLogMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageCallLogMessageField, {isVideo: false as boolean, callOutcome: 0 as MessageCallLogMessageCallOutcome, durationSecs: 0 as number, callType: 0 as MessageCallLogMessageCallType, participants: [] as MessageCallLogMessageCallParticipant[]}, end);
}
function readMessageCallLogMessageField(tag: number, obj: MessageCallLogMessage, pbf: Pbf) {
    if (tag === 1) obj.isVideo = pbf.readBoolean();
    else if (tag === 2) obj.callOutcome = pbf.readVarint();
    else if (tag === 3) obj.durationSecs = pbf.readVarint(true);
    else if (tag === 4) obj.callType = pbf.readVarint();
    else if (tag === 5) obj.participants?.push(readMessageCallLogMessageCallParticipant(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessageCallLogMessage(obj: MessageCallLogMessage, pbf: Pbf) {
    if (obj.isVideo !== undefined) pbf.writeBooleanField(1, obj.isVideo);
    if (obj.callOutcome !== undefined) pbf.writeVarintField(2, obj.callOutcome);
    if (obj.durationSecs !== undefined) pbf.writeVarintField(3, obj.durationSecs);
    if (obj.callType !== undefined) pbf.writeVarintField(4, obj.callType);
    if (obj.participants) for (const item of obj.participants) pbf.writeMessage(5, writeMessageCallLogMessageCallParticipant, item);
}

export enum MessageCallLogMessageCallOutcome {
    CONNECTED = 0,
    MISSED = 1,
    FAILED = 2,
    REJECTED = 3,
    ACCEPTED_ELSEWHERE = 4,
    ONGOING = 5,
    SILENCED_BY_DND = 6,
    SILENCED_UNKNOWN_CALLER = 7,
}

export enum MessageCallLogMessageCallType {
    REGULAR = 0,
    SCHEDULED_CALL = 1,
    VOICE_CHAT = 2,
}

export interface MessageCallLogMessageCallParticipant {
    jid?: string;
    callOutcome?: MessageCallLogMessageCallOutcome;
}

export function readMessageCallLogMessageCallParticipant(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageCallLogMessageCallParticipantField, {jid: "" as string, callOutcome: 0 as MessageCallLogMessageCallOutcome}, end);
}
function readMessageCallLogMessageCallParticipantField(tag: number, obj: MessageCallLogMessageCallParticipant, pbf: Pbf) {
    if (tag === 1) obj.jid = pbf.readString();
    else if (tag === 2) obj.callOutcome = pbf.readVarint();
}
export function writeMessageCallLogMessageCallParticipant(obj: MessageCallLogMessageCallParticipant, pbf: Pbf) {
    if (obj.jid !== undefined) pbf.writeStringField(1, obj.jid);
    if (obj.callOutcome !== undefined) pbf.writeVarintField(2, obj.callOutcome);
}

export interface MessageCancelPaymentRequestMessage {
    key?: MessageKey;
}

export function readMessageCancelPaymentRequestMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageCancelPaymentRequestMessageField, {key: undefined as unknown as MessageKey}, end);
}
function readMessageCancelPaymentRequestMessageField(tag: number, obj: MessageCancelPaymentRequestMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageCancelPaymentRequestMessage(obj: MessageCancelPaymentRequestMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
}

export interface MessageChat {
    displayName?: string;
    id?: string;
}

export function readMessageChat(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageChatField, {displayName: "" as string, id: "" as string}, end);
}
function readMessageChatField(tag: number, obj: MessageChat, pbf: Pbf) {
    if (tag === 1) obj.displayName = pbf.readString();
    else if (tag === 2) obj.id = pbf.readString();
}
export function writeMessageChat(obj: MessageChat, pbf: Pbf) {
    if (obj.displayName !== undefined) pbf.writeStringField(1, obj.displayName);
    if (obj.id !== undefined) pbf.writeStringField(2, obj.id);
}

export interface MessageCommentMessage {
    message?: Message;
    targetMessageKey?: MessageKey;
}

export function readMessageCommentMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageCommentMessageField, {message: undefined as unknown as Message, targetMessageKey: undefined as unknown as MessageKey}, end);
}
function readMessageCommentMessageField(tag: number, obj: MessageCommentMessage, pbf: Pbf) {
    if (tag === 1) obj.message = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.targetMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageCommentMessage(obj: MessageCommentMessage, pbf: Pbf) {
    if (obj.message) pbf.writeMessage(1, writeMessage, obj.message);
    if (obj.targetMessageKey) pbf.writeMessage(2, writeMessageKey, obj.targetMessageKey);
}

export interface MessageContactMessage {
    displayName?: string;
    vcard?: string;
    contextInfo?: ContextInfo;
}

export function readMessageContactMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageContactMessageField, {displayName: "" as string, vcard: "" as string, contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessageContactMessageField(tag: number, obj: MessageContactMessage, pbf: Pbf) {
    if (tag === 1) obj.displayName = pbf.readString();
    else if (tag === 16) obj.vcard = pbf.readString();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageContactMessage(obj: MessageContactMessage, pbf: Pbf) {
    if (obj.displayName !== undefined) pbf.writeStringField(1, obj.displayName);
    if (obj.vcard !== undefined) pbf.writeStringField(16, obj.vcard);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
}

export interface MessageContactsArrayMessage {
    displayName?: string;
    contacts?: MessageContactMessage[];
    contextInfo?: ContextInfo;
}

export function readMessageContactsArrayMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageContactsArrayMessageField, {displayName: "" as string, contacts: [] as MessageContactMessage[], contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessageContactsArrayMessageField(tag: number, obj: MessageContactsArrayMessage, pbf: Pbf) {
    if (tag === 1) obj.displayName = pbf.readString();
    else if (tag === 2) obj.contacts?.push(readMessageContactMessage(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageContactsArrayMessage(obj: MessageContactsArrayMessage, pbf: Pbf) {
    if (obj.displayName !== undefined) pbf.writeStringField(1, obj.displayName);
    if (obj.contacts) for (const item of obj.contacts) pbf.writeMessage(2, writeMessageContactMessage, item);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
}

export interface MessageDeclinePaymentRequestMessage {
    key?: MessageKey;
}

export function readMessageDeclinePaymentRequestMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageDeclinePaymentRequestMessageField, {key: undefined as unknown as MessageKey}, end);
}
function readMessageDeclinePaymentRequestMessageField(tag: number, obj: MessageDeclinePaymentRequestMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageDeclinePaymentRequestMessage(obj: MessageDeclinePaymentRequestMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
}

export interface MessageDeviceSentMessage {
    destinationJid?: string;
    message?: Message;
    phash?: string;
}

export function readMessageDeviceSentMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageDeviceSentMessageField, {destinationJid: "" as string, message: undefined as unknown as Message, phash: "" as string}, end);
}
function readMessageDeviceSentMessageField(tag: number, obj: MessageDeviceSentMessage, pbf: Pbf) {
    if (tag === 1) obj.destinationJid = pbf.readString();
    else if (tag === 2) obj.message = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.phash = pbf.readString();
}
export function writeMessageDeviceSentMessage(obj: MessageDeviceSentMessage, pbf: Pbf) {
    if (obj.destinationJid !== undefined) pbf.writeStringField(1, obj.destinationJid);
    if (obj.message) pbf.writeMessage(2, writeMessage, obj.message);
    if (obj.phash !== undefined) pbf.writeStringField(3, obj.phash);
}

export interface MessageDocumentMessage {
    url?: string;
    mimetype?: string;
    title?: string;
    fileSha256?: Uint8Array;
    fileLength?: number;
    pageCount?: number;
    mediaKey?: Uint8Array;
    fileName?: string;
    fileEncSha256?: Uint8Array;
    directPath?: string;
    mediaKeyTimestamp?: number;
    contactVcard?: boolean;
    thumbnailDirectPath?: string;
    thumbnailSha256?: Uint8Array;
    thumbnailEncSha256?: Uint8Array;
    jpegThumbnail?: Uint8Array;
    contextInfo?: ContextInfo;
    thumbnailHeight?: number;
    thumbnailWidth?: number;
    caption?: string;
}

export function readMessageDocumentMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageDocumentMessageField, {url: "" as string, mimetype: "" as string, title: "" as string, fileSha256: undefined as unknown as Uint8Array, fileLength: 0 as number, pageCount: 0 as number, mediaKey: undefined as unknown as Uint8Array, fileName: "" as string, fileEncSha256: undefined as unknown as Uint8Array, directPath: "" as string, mediaKeyTimestamp: 0 as number, contactVcard: false as boolean, thumbnailDirectPath: "" as string, thumbnailSha256: undefined as unknown as Uint8Array, thumbnailEncSha256: undefined as unknown as Uint8Array, jpegThumbnail: undefined as unknown as Uint8Array, contextInfo: undefined as unknown as ContextInfo, thumbnailHeight: 0 as number, thumbnailWidth: 0 as number, caption: "" as string}, end);
}
function readMessageDocumentMessageField(tag: number, obj: MessageDocumentMessage, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.mimetype = pbf.readString();
    else if (tag === 3) obj.title = pbf.readString();
    else if (tag === 4) obj.fileSha256 = pbf.readBytes();
    else if (tag === 5) obj.fileLength = pbf.readVarint();
    else if (tag === 6) obj.pageCount = pbf.readVarint();
    else if (tag === 7) obj.mediaKey = pbf.readBytes();
    else if (tag === 8) obj.fileName = pbf.readString();
    else if (tag === 9) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 10) obj.directPath = pbf.readString();
    else if (tag === 11) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 12) obj.contactVcard = pbf.readBoolean();
    else if (tag === 13) obj.thumbnailDirectPath = pbf.readString();
    else if (tag === 14) obj.thumbnailSha256 = pbf.readBytes();
    else if (tag === 15) obj.thumbnailEncSha256 = pbf.readBytes();
    else if (tag === 16) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.thumbnailHeight = pbf.readVarint();
    else if (tag === 19) obj.thumbnailWidth = pbf.readVarint();
    else if (tag === 20) obj.caption = pbf.readString();
}
export function writeMessageDocumentMessage(obj: MessageDocumentMessage, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.mimetype !== undefined) pbf.writeStringField(2, obj.mimetype);
    if (obj.title !== undefined) pbf.writeStringField(3, obj.title);
    if (obj.fileSha256 != null) pbf.writeBytesField(4, obj.fileSha256);
    if (obj.fileLength !== undefined) pbf.writeVarintField(5, obj.fileLength);
    if (obj.pageCount !== undefined) pbf.writeVarintField(6, obj.pageCount);
    if (obj.mediaKey != null) pbf.writeBytesField(7, obj.mediaKey);
    if (obj.fileName !== undefined) pbf.writeStringField(8, obj.fileName);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(9, obj.fileEncSha256);
    if (obj.directPath !== undefined) pbf.writeStringField(10, obj.directPath);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(11, obj.mediaKeyTimestamp);
    if (obj.contactVcard !== undefined) pbf.writeBooleanField(12, obj.contactVcard);
    if (obj.thumbnailDirectPath !== undefined) pbf.writeStringField(13, obj.thumbnailDirectPath);
    if (obj.thumbnailSha256 != null) pbf.writeBytesField(14, obj.thumbnailSha256);
    if (obj.thumbnailEncSha256 != null) pbf.writeBytesField(15, obj.thumbnailEncSha256);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(16, obj.jpegThumbnail);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
    if (obj.thumbnailHeight !== undefined) pbf.writeVarintField(18, obj.thumbnailHeight);
    if (obj.thumbnailWidth !== undefined) pbf.writeVarintField(19, obj.thumbnailWidth);
    if (obj.caption !== undefined) pbf.writeStringField(20, obj.caption);
}

export interface MessageEncCommentMessage {
    targetMessageKey?: MessageKey;
    encPayload?: Uint8Array;
    encIv?: Uint8Array;
}

export function readMessageEncCommentMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageEncCommentMessageField, {targetMessageKey: undefined as unknown as MessageKey, encPayload: undefined as unknown as Uint8Array, encIv: undefined as unknown as Uint8Array}, end);
}
function readMessageEncCommentMessageField(tag: number, obj: MessageEncCommentMessage, pbf: Pbf) {
    if (tag === 1) obj.targetMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.encPayload = pbf.readBytes();
    else if (tag === 3) obj.encIv = pbf.readBytes();
}
export function writeMessageEncCommentMessage(obj: MessageEncCommentMessage, pbf: Pbf) {
    if (obj.targetMessageKey) pbf.writeMessage(1, writeMessageKey, obj.targetMessageKey);
    if (obj.encPayload != null) pbf.writeBytesField(2, obj.encPayload);
    if (obj.encIv != null) pbf.writeBytesField(3, obj.encIv);
}

export interface MessageEncEventUpdateMessage {
    eventCreationMessageKey?: MessageKey;
    encPayload?: Uint8Array;
    encIv?: Uint8Array;
}

export function readMessageEncEventUpdateMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageEncEventUpdateMessageField, {eventCreationMessageKey: undefined as unknown as MessageKey, encPayload: undefined as unknown as Uint8Array, encIv: undefined as unknown as Uint8Array}, end);
}
function readMessageEncEventUpdateMessageField(tag: number, obj: MessageEncEventUpdateMessage, pbf: Pbf) {
    if (tag === 1) obj.eventCreationMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.encPayload = pbf.readBytes();
    else if (tag === 3) obj.encIv = pbf.readBytes();
}
export function writeMessageEncEventUpdateMessage(obj: MessageEncEventUpdateMessage, pbf: Pbf) {
    if (obj.eventCreationMessageKey) pbf.writeMessage(1, writeMessageKey, obj.eventCreationMessageKey);
    if (obj.encPayload != null) pbf.writeBytesField(2, obj.encPayload);
    if (obj.encIv != null) pbf.writeBytesField(3, obj.encIv);
}

export interface MessageEncReactionMessage {
    targetMessageKey?: MessageKey;
    encPayload?: Uint8Array;
    encIv?: Uint8Array;
}

export function readMessageEncReactionMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageEncReactionMessageField, {targetMessageKey: undefined as unknown as MessageKey, encPayload: undefined as unknown as Uint8Array, encIv: undefined as unknown as Uint8Array}, end);
}
function readMessageEncReactionMessageField(tag: number, obj: MessageEncReactionMessage, pbf: Pbf) {
    if (tag === 1) obj.targetMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.encPayload = pbf.readBytes();
    else if (tag === 3) obj.encIv = pbf.readBytes();
}
export function writeMessageEncReactionMessage(obj: MessageEncReactionMessage, pbf: Pbf) {
    if (obj.targetMessageKey) pbf.writeMessage(1, writeMessageKey, obj.targetMessageKey);
    if (obj.encPayload != null) pbf.writeBytesField(2, obj.encPayload);
    if (obj.encIv != null) pbf.writeBytesField(3, obj.encIv);
}

export interface MessageEventEditMessage {
    eventEditMessage?: MessageEventMessage;
    editTimestampMs?: number;
}

export function readMessageEventEditMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageEventEditMessageField, {eventEditMessage: undefined as unknown as MessageEventMessage, editTimestampMs: 0 as number}, end);
}
function readMessageEventEditMessageField(tag: number, obj: MessageEventEditMessage, pbf: Pbf) {
    if (tag === 1) obj.eventEditMessage = readMessageEventMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.editTimestampMs = pbf.readVarint(true);
}
export function writeMessageEventEditMessage(obj: MessageEventEditMessage, pbf: Pbf) {
    if (obj.eventEditMessage) pbf.writeMessage(1, writeMessageEventMessage, obj.eventEditMessage);
    if (obj.editTimestampMs !== undefined) pbf.writeVarintField(2, obj.editTimestampMs);
}

export interface MessageEventMessage {
    contextInfo?: ContextInfo;
    isCanceled?: boolean;
    name?: string;
    description?: string;
    location?: MessageLocationMessage;
    joinLink?: string;
    startTime?: number;
}

export function readMessageEventMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageEventMessageField, {contextInfo: undefined as unknown as ContextInfo, isCanceled: false as boolean, name: "" as string, description: "" as string, location: undefined as unknown as MessageLocationMessage, joinLink: "" as string, startTime: 0 as number}, end);
}
function readMessageEventMessageField(tag: number, obj: MessageEventMessage, pbf: Pbf) {
    if (tag === 1) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.isCanceled = pbf.readBoolean();
    else if (tag === 3) obj.name = pbf.readString();
    else if (tag === 4) obj.description = pbf.readString();
    else if (tag === 5) obj.location = readMessageLocationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.joinLink = pbf.readString();
    else if (tag === 7) obj.startTime = pbf.readVarint(true);
}
export function writeMessageEventMessage(obj: MessageEventMessage, pbf: Pbf) {
    if (obj.contextInfo) pbf.writeMessage(1, writeContextInfo, obj.contextInfo);
    if (obj.isCanceled !== undefined) pbf.writeBooleanField(2, obj.isCanceled);
    if (obj.name !== undefined) pbf.writeStringField(3, obj.name);
    if (obj.description !== undefined) pbf.writeStringField(4, obj.description);
    if (obj.location) pbf.writeMessage(5, writeMessageLocationMessage, obj.location);
    if (obj.joinLink !== undefined) pbf.writeStringField(6, obj.joinLink);
    if (obj.startTime !== undefined) pbf.writeVarintField(7, obj.startTime);
}

export interface MessageEventResponseMessage {
    response?: MessageEventResponseMessageEventResponseType;
    timestampMs?: number;
}

export function readMessageEventResponseMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageEventResponseMessageField, {response: 0 as MessageEventResponseMessageEventResponseType, timestampMs: 0 as number}, end);
}
function readMessageEventResponseMessageField(tag: number, obj: MessageEventResponseMessage, pbf: Pbf) {
    if (tag === 1) obj.response = pbf.readVarint();
    else if (tag === 2) obj.timestampMs = pbf.readVarint(true);
}
export function writeMessageEventResponseMessage(obj: MessageEventResponseMessage, pbf: Pbf) {
    if (obj.response !== undefined) pbf.writeVarintField(1, obj.response);
    if (obj.timestampMs !== undefined) pbf.writeVarintField(2, obj.timestampMs);
}

export enum MessageEventResponseMessageEventResponseType {
    UNKNOWN = 0,
    GOING = 1,
    NOT_GOING = 2,
}

export interface MessageEventUpdateMessage {
    response?: MessageEventResponseMessage;
    edit?: MessageEventEditMessage;
}

export function readMessageEventUpdateMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageEventUpdateMessageField, {response: undefined as unknown as MessageEventResponseMessage, edit: undefined as unknown as MessageEventEditMessage}, end);
}
function readMessageEventUpdateMessageField(tag: number, obj: MessageEventUpdateMessage, pbf: Pbf) {
    if (tag === 1) obj.response = readMessageEventResponseMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.edit = readMessageEventEditMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageEventUpdateMessage(obj: MessageEventUpdateMessage, pbf: Pbf) {
    if (obj.response) pbf.writeMessage(1, writeMessageEventResponseMessage, obj.response);
    if (obj.edit) pbf.writeMessage(2, writeMessageEventEditMessage, obj.edit);
}

export interface MessageExtendedTextMessage {
    text?: string;
    matchedText?: string;
    canonicalUrl?: string;
    description?: string;
    title?: string;
    textArgb?: number;
    backgroundArgb?: number;
    font?: MessageExtendedTextMessageFontType;
    previewType?: MessageExtendedTextMessagePreviewType;
    jpegThumbnail?: Uint8Array;
    contextInfo?: ContextInfo;
    doNotPlayInline?: boolean;
    thumbnailDirectPath?: string;
    thumbnailSha256?: Uint8Array;
    thumbnailEncSha256?: Uint8Array;
    mediaKey?: Uint8Array;
    mediaKeyTimestamp?: number;
    thumbnailHeight?: number;
    thumbnailWidth?: number;
    inviteLinkGroupType?: MessageExtendedTextMessageInviteLinkGroupType;
    inviteLinkParentGroupSubjectV2?: string;
    inviteLinkParentGroupThumbnailV2?: Uint8Array;
    inviteLinkGroupTypeV2?: MessageExtendedTextMessageInviteLinkGroupType;
    viewOnce?: boolean;
}

export function readMessageExtendedTextMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageExtendedTextMessageField, {text: "" as string, matchedText: "" as string, canonicalUrl: "" as string, description: "" as string, title: "" as string, textArgb: 0 as number, backgroundArgb: 0 as number, font: 0 as MessageExtendedTextMessageFontType, previewType: 0 as MessageExtendedTextMessagePreviewType, jpegThumbnail: undefined as unknown as Uint8Array, contextInfo: undefined as unknown as ContextInfo, doNotPlayInline: false as boolean, thumbnailDirectPath: "" as string, thumbnailSha256: undefined as unknown as Uint8Array, thumbnailEncSha256: undefined as unknown as Uint8Array, mediaKey: undefined as unknown as Uint8Array, mediaKeyTimestamp: 0 as number, thumbnailHeight: 0 as number, thumbnailWidth: 0 as number, inviteLinkGroupType: 0 as MessageExtendedTextMessageInviteLinkGroupType, inviteLinkParentGroupSubjectV2: "" as string, inviteLinkParentGroupThumbnailV2: undefined as unknown as Uint8Array, inviteLinkGroupTypeV2: 0 as MessageExtendedTextMessageInviteLinkGroupType, viewOnce: false as boolean}, end);
}
function readMessageExtendedTextMessageField(tag: number, obj: MessageExtendedTextMessage, pbf: Pbf) {
    if (tag === 1) obj.text = pbf.readString();
    else if (tag === 2) obj.matchedText = pbf.readString();
    else if (tag === 4) obj.canonicalUrl = pbf.readString();
    else if (tag === 5) obj.description = pbf.readString();
    else if (tag === 6) obj.title = pbf.readString();
    else if (tag === 7) obj.textArgb = pbf.readFixed32();
    else if (tag === 8) obj.backgroundArgb = pbf.readFixed32();
    else if (tag === 9) obj.font = pbf.readVarint();
    else if (tag === 10) obj.previewType = pbf.readVarint();
    else if (tag === 16) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.doNotPlayInline = pbf.readBoolean();
    else if (tag === 19) obj.thumbnailDirectPath = pbf.readString();
    else if (tag === 20) obj.thumbnailSha256 = pbf.readBytes();
    else if (tag === 21) obj.thumbnailEncSha256 = pbf.readBytes();
    else if (tag === 22) obj.mediaKey = pbf.readBytes();
    else if (tag === 23) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 24) obj.thumbnailHeight = pbf.readVarint();
    else if (tag === 25) obj.thumbnailWidth = pbf.readVarint();
    else if (tag === 26) obj.inviteLinkGroupType = pbf.readVarint();
    else if (tag === 27) obj.inviteLinkParentGroupSubjectV2 = pbf.readString();
    else if (tag === 28) obj.inviteLinkParentGroupThumbnailV2 = pbf.readBytes();
    else if (tag === 29) obj.inviteLinkGroupTypeV2 = pbf.readVarint();
    else if (tag === 30) obj.viewOnce = pbf.readBoolean();
}
export function writeMessageExtendedTextMessage(obj: MessageExtendedTextMessage, pbf: Pbf) {
    if (obj.text !== undefined) pbf.writeStringField(1, obj.text);
    if (obj.matchedText !== undefined) pbf.writeStringField(2, obj.matchedText);
    if (obj.canonicalUrl !== undefined) pbf.writeStringField(4, obj.canonicalUrl);
    if (obj.description !== undefined) pbf.writeStringField(5, obj.description);
    if (obj.title !== undefined) pbf.writeStringField(6, obj.title);
    if (obj.textArgb !== undefined) pbf.writeFixed32Field(7, obj.textArgb);
    if (obj.backgroundArgb !== undefined) pbf.writeFixed32Field(8, obj.backgroundArgb);
    if (obj.font !== undefined) pbf.writeVarintField(9, obj.font);
    if (obj.previewType !== undefined) pbf.writeVarintField(10, obj.previewType);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(16, obj.jpegThumbnail);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
    if (obj.doNotPlayInline !== undefined) pbf.writeBooleanField(18, obj.doNotPlayInline);
    if (obj.thumbnailDirectPath !== undefined) pbf.writeStringField(19, obj.thumbnailDirectPath);
    if (obj.thumbnailSha256 != null) pbf.writeBytesField(20, obj.thumbnailSha256);
    if (obj.thumbnailEncSha256 != null) pbf.writeBytesField(21, obj.thumbnailEncSha256);
    if (obj.mediaKey != null) pbf.writeBytesField(22, obj.mediaKey);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(23, obj.mediaKeyTimestamp);
    if (obj.thumbnailHeight !== undefined) pbf.writeVarintField(24, obj.thumbnailHeight);
    if (obj.thumbnailWidth !== undefined) pbf.writeVarintField(25, obj.thumbnailWidth);
    if (obj.inviteLinkGroupType !== undefined) pbf.writeVarintField(26, obj.inviteLinkGroupType);
    if (obj.inviteLinkParentGroupSubjectV2 !== undefined) pbf.writeStringField(27, obj.inviteLinkParentGroupSubjectV2);
    if (obj.inviteLinkParentGroupThumbnailV2 != null) pbf.writeBytesField(28, obj.inviteLinkParentGroupThumbnailV2);
    if (obj.inviteLinkGroupTypeV2 !== undefined) pbf.writeVarintField(29, obj.inviteLinkGroupTypeV2);
    if (obj.viewOnce !== undefined) pbf.writeBooleanField(30, obj.viewOnce);
}

export enum MessageExtendedTextMessageFontType {
    SYSTEM = 0,
    SYSTEM_TEXT = 1,
    FB_SCRIPT = 2,
    SYSTEM_BOLD = 6,
    MORNINGBREEZE_REGULAR = 7,
    CALISTOGA_REGULAR = 8,
    EXO2_EXTRABOLD = 9,
    COURIERPRIME_BOLD = 10,
}

export enum MessageExtendedTextMessageInviteLinkGroupType {
    DEFAULT = 0,
    PARENT = 1,
    SUB = 2,
    DEFAULT_SUB = 3,
}

export enum MessageExtendedTextMessagePreviewType {
    NONE = 0,
    VIDEO = 1,
    PLACEHOLDER = 4,
    IMAGE = 5,
}

export interface MessageExtendedTextMessageWithParentKey {
    key?: MessageKey;
    extendedTextMessage?: MessageExtendedTextMessage;
}

export function readMessageExtendedTextMessageWithParentKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageExtendedTextMessageWithParentKeyField, {key: undefined as unknown as MessageKey, extendedTextMessage: undefined as unknown as MessageExtendedTextMessage}, end);
}
function readMessageExtendedTextMessageWithParentKeyField(tag: number, obj: MessageExtendedTextMessageWithParentKey, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.extendedTextMessage = readMessageExtendedTextMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageExtendedTextMessageWithParentKey(obj: MessageExtendedTextMessageWithParentKey, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.extendedTextMessage) pbf.writeMessage(2, writeMessageExtendedTextMessage, obj.extendedTextMessage);
}

export interface MessageFutureProofMessage {
    message?: Message;
}

export function readMessageFutureProofMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageFutureProofMessageField, {message: undefined as unknown as Message}, end);
}
function readMessageFutureProofMessageField(tag: number, obj: MessageFutureProofMessage, pbf: Pbf) {
    if (tag === 1) obj.message = readMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageFutureProofMessage(obj: MessageFutureProofMessage, pbf: Pbf) {
    if (obj.message) pbf.writeMessage(1, writeMessage, obj.message);
}

export interface MessageGroupInviteMessage {
    groupJid?: string;
    inviteCode?: string;
    inviteExpiration?: number;
    groupName?: string;
    jpegThumbnail?: Uint8Array;
    caption?: string;
    contextInfo?: ContextInfo;
    groupType?: MessageGroupInviteMessageGroupType;
}

export function readMessageGroupInviteMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageGroupInviteMessageField, {groupJid: "" as string, inviteCode: "" as string, inviteExpiration: 0 as number, groupName: "" as string, jpegThumbnail: undefined as unknown as Uint8Array, caption: "" as string, contextInfo: undefined as unknown as ContextInfo, groupType: 0 as MessageGroupInviteMessageGroupType}, end);
}
function readMessageGroupInviteMessageField(tag: number, obj: MessageGroupInviteMessage, pbf: Pbf) {
    if (tag === 1) obj.groupJid = pbf.readString();
    else if (tag === 2) obj.inviteCode = pbf.readString();
    else if (tag === 3) obj.inviteExpiration = pbf.readVarint(true);
    else if (tag === 4) obj.groupName = pbf.readString();
    else if (tag === 5) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 6) obj.caption = pbf.readString();
    else if (tag === 7) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.groupType = pbf.readVarint();
}
export function writeMessageGroupInviteMessage(obj: MessageGroupInviteMessage, pbf: Pbf) {
    if (obj.groupJid !== undefined) pbf.writeStringField(1, obj.groupJid);
    if (obj.inviteCode !== undefined) pbf.writeStringField(2, obj.inviteCode);
    if (obj.inviteExpiration !== undefined) pbf.writeVarintField(3, obj.inviteExpiration);
    if (obj.groupName !== undefined) pbf.writeStringField(4, obj.groupName);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(5, obj.jpegThumbnail);
    if (obj.caption !== undefined) pbf.writeStringField(6, obj.caption);
    if (obj.contextInfo) pbf.writeMessage(7, writeContextInfo, obj.contextInfo);
    if (obj.groupType !== undefined) pbf.writeVarintField(8, obj.groupType);
}

export enum MessageGroupInviteMessageGroupType {
    DEFAULT = 0,
    PARENT = 1,
}

export interface MessageHighlyStructuredMessage {
    namespace?: string;
    elementName?: string;
    params?: string[];
    fallbackLg?: string;
    fallbackLc?: string;
    localizableParams?: MessageHighlyStructuredMessageHSMLocalizableParameter[];
    deterministicLg?: string;
    deterministicLc?: string;
    hydratedHsm?: MessageTemplateMessage;
}

export function readMessageHighlyStructuredMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageHighlyStructuredMessageField, {namespace: "" as string, elementName: "" as string, params: [] as string[], fallbackLg: "" as string, fallbackLc: "" as string, localizableParams: [] as MessageHighlyStructuredMessageHSMLocalizableParameter[], deterministicLg: "" as string, deterministicLc: "" as string, hydratedHsm: undefined as unknown as MessageTemplateMessage}, end);
}
function readMessageHighlyStructuredMessageField(tag: number, obj: MessageHighlyStructuredMessage, pbf: Pbf) {
    if (tag === 1) obj.namespace = pbf.readString();
    else if (tag === 2) obj.elementName = pbf.readString();
    else if (tag === 3) obj.params?.push(pbf.readString());
    else if (tag === 4) obj.fallbackLg = pbf.readString();
    else if (tag === 5) obj.fallbackLc = pbf.readString();
    else if (tag === 6) obj.localizableParams?.push(readMessageHighlyStructuredMessageHSMLocalizableParameter(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.deterministicLg = pbf.readString();
    else if (tag === 8) obj.deterministicLc = pbf.readString();
    else if (tag === 9) obj.hydratedHsm = readMessageTemplateMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageHighlyStructuredMessage(obj: MessageHighlyStructuredMessage, pbf: Pbf) {
    if (obj.namespace !== undefined) pbf.writeStringField(1, obj.namespace);
    if (obj.elementName !== undefined) pbf.writeStringField(2, obj.elementName);
    if (obj.params) for (const item of obj.params) pbf.writeStringField(3, item);
    if (obj.fallbackLg !== undefined) pbf.writeStringField(4, obj.fallbackLg);
    if (obj.fallbackLc !== undefined) pbf.writeStringField(5, obj.fallbackLc);
    if (obj.localizableParams) for (const item of obj.localizableParams) pbf.writeMessage(6, writeMessageHighlyStructuredMessageHSMLocalizableParameter, item);
    if (obj.deterministicLg !== undefined) pbf.writeStringField(7, obj.deterministicLg);
    if (obj.deterministicLc !== undefined) pbf.writeStringField(8, obj.deterministicLc);
    if (obj.hydratedHsm) pbf.writeMessage(9, writeMessageTemplateMessage, obj.hydratedHsm);
}

export interface MessageHighlyStructuredMessageHSMLocalizableParameter {
    default?: string;
    currency?: MessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency;
    dateTime?: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime;
}

export function readMessageHighlyStructuredMessageHSMLocalizableParameter(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageHighlyStructuredMessageHSMLocalizableParameterField, {default: "" as string, currency: undefined as unknown as MessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency, dateTime: undefined as unknown as MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime}, end);
}
function readMessageHighlyStructuredMessageHSMLocalizableParameterField(tag: number, obj: MessageHighlyStructuredMessageHSMLocalizableParameter, pbf: Pbf) {
    if (tag === 1) obj.default = pbf.readString();
    else if (tag === 2) { obj.currency = readMessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.paramOneof = "currency"
; }
    else if (tag === 3) { obj.dateTime = readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.paramOneof = "dateTime"
; }
}
export function writeMessageHighlyStructuredMessageHSMLocalizableParameter(obj: MessageHighlyStructuredMessageHSMLocalizableParameter, pbf: Pbf) {
    if (obj.default !== undefined) pbf.writeStringField(1, obj.default);
    if (obj.currency) pbf.writeMessage(2, writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency, obj.currency);
    if (obj.dateTime) pbf.writeMessage(3, writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime, obj.dateTime);
}

export interface MessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency {
    currencyCode?: string;
    amount1000?: number;
}

export function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrencyField, {currencyCode: "" as string, amount1000: 0 as number}, end);
}
function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrencyField(tag: number, obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency, pbf: Pbf) {
    if (tag === 1) obj.currencyCode = pbf.readString();
    else if (tag === 2) obj.amount1000 = pbf.readVarint(true);
}
export function writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency(obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMCurrency, pbf: Pbf) {
    if (obj.currencyCode !== undefined) pbf.writeStringField(1, obj.currencyCode);
    if (obj.amount1000 !== undefined) pbf.writeVarintField(2, obj.amount1000);
}

export interface MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime {
    component?: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent;
    unixEpoch?: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch;
}

export function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeField, {component: undefined as unknown as MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent, unixEpoch: undefined as unknown as MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch}, end);
}
function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeField(tag: number, obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime, pbf: Pbf) {
    if (tag === 1) { obj.component = readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.datetimeOneof = "component"
; }
    else if (tag === 2) { obj.unixEpoch = readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.datetimeOneof = "unixEpoch"
; }
}
export function writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime(obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTime, pbf: Pbf) {
    if (obj.component) pbf.writeMessage(1, writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent, obj.component);
    if (obj.unixEpoch) pbf.writeMessage(2, writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch, obj.unixEpoch);
}

export interface MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent {
    dayOfWeek?: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentDayOfWeekType;
    year?: number;
    month?: number;
    dayOfMonth?: number;
    hour?: number;
    minute?: number;
    calendar?: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentCalendarType;
}

export function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentField, {dayOfWeek: 0 as MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentDayOfWeekType, year: 0 as number, month: 0 as number, dayOfMonth: 0 as number, hour: 0 as number, minute: 0 as number, calendar: 0 as MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentCalendarType}, end);
}
function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentField(tag: number, obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent, pbf: Pbf) {
    if (tag === 1) obj.dayOfWeek = pbf.readVarint();
    else if (tag === 2) obj.year = pbf.readVarint();
    else if (tag === 3) obj.month = pbf.readVarint();
    else if (tag === 4) obj.dayOfMonth = pbf.readVarint();
    else if (tag === 5) obj.hour = pbf.readVarint();
    else if (tag === 6) obj.minute = pbf.readVarint();
    else if (tag === 7) obj.calendar = pbf.readVarint();
}
export function writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent(obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponent, pbf: Pbf) {
    if (obj.dayOfWeek !== undefined) pbf.writeVarintField(1, obj.dayOfWeek);
    if (obj.year !== undefined) pbf.writeVarintField(2, obj.year);
    if (obj.month !== undefined) pbf.writeVarintField(3, obj.month);
    if (obj.dayOfMonth !== undefined) pbf.writeVarintField(4, obj.dayOfMonth);
    if (obj.hour !== undefined) pbf.writeVarintField(5, obj.hour);
    if (obj.minute !== undefined) pbf.writeVarintField(6, obj.minute);
    if (obj.calendar !== undefined) pbf.writeVarintField(7, obj.calendar);
}

export enum MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentCalendarType {
    GREGORIAN = 1,
    SOLAR_HIJRI = 2,
}

export enum MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeComponentDayOfWeekType {
    MONDAY = 1,
    TUESDAY = 2,
    WEDNESDAY = 3,
    THURSDAY = 4,
    FRIDAY = 5,
    SATURDAY = 6,
    SUNDAY = 7,
}

export interface MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch {
    timestamp?: number;
}

export function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpochField, {timestamp: 0 as number}, end);
}
function readMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpochField(tag: number, obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch, pbf: Pbf) {
    if (tag === 1) obj.timestamp = pbf.readVarint(true);
}
export function writeMessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch(obj: MessageHighlyStructuredMessageHSMLocalizableParameterHSMDateTimeHSMDateTimeUnixEpoch, pbf: Pbf) {
    if (obj.timestamp !== undefined) pbf.writeVarintField(1, obj.timestamp);
}

export interface MessageHistorySyncNotification {
    fileSha256?: Uint8Array;
    fileLength?: number;
    mediaKey?: Uint8Array;
    fileEncSha256?: Uint8Array;
    directPath?: string;
    syncType?: MessageHistorySyncNotificationHistorySyncType;
    chunkOrder?: number;
    originalMessageId?: string;
    progress?: number;
    oldestMsgInChunkTimestampSec?: number;
    initialHistBootstrapInlinePayload?: Uint8Array;
    peerDataRequestSessionId?: string;
}

export function readMessageHistorySyncNotification(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageHistorySyncNotificationField, {fileSha256: undefined as unknown as Uint8Array, fileLength: 0 as number, mediaKey: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, directPath: "" as string, syncType: 0 as MessageHistorySyncNotificationHistorySyncType, chunkOrder: 0 as number, originalMessageId: "" as string, progress: 0 as number, oldestMsgInChunkTimestampSec: 0 as number, initialHistBootstrapInlinePayload: undefined as unknown as Uint8Array, peerDataRequestSessionId: "" as string}, end);
}
function readMessageHistorySyncNotificationField(tag: number, obj: MessageHistorySyncNotification, pbf: Pbf) {
    if (tag === 1) obj.fileSha256 = pbf.readBytes();
    else if (tag === 2) obj.fileLength = pbf.readVarint();
    else if (tag === 3) obj.mediaKey = pbf.readBytes();
    else if (tag === 4) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 5) obj.directPath = pbf.readString();
    else if (tag === 6) obj.syncType = pbf.readVarint();
    else if (tag === 7) obj.chunkOrder = pbf.readVarint();
    else if (tag === 8) obj.originalMessageId = pbf.readString();
    else if (tag === 9) obj.progress = pbf.readVarint();
    else if (tag === 10) obj.oldestMsgInChunkTimestampSec = pbf.readVarint(true);
    else if (tag === 11) obj.initialHistBootstrapInlinePayload = pbf.readBytes();
    else if (tag === 12) obj.peerDataRequestSessionId = pbf.readString();
}
export function writeMessageHistorySyncNotification(obj: MessageHistorySyncNotification, pbf: Pbf) {
    if (obj.fileSha256 != null) pbf.writeBytesField(1, obj.fileSha256);
    if (obj.fileLength !== undefined) pbf.writeVarintField(2, obj.fileLength);
    if (obj.mediaKey != null) pbf.writeBytesField(3, obj.mediaKey);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(4, obj.fileEncSha256);
    if (obj.directPath !== undefined) pbf.writeStringField(5, obj.directPath);
    if (obj.syncType !== undefined) pbf.writeVarintField(6, obj.syncType);
    if (obj.chunkOrder !== undefined) pbf.writeVarintField(7, obj.chunkOrder);
    if (obj.originalMessageId !== undefined) pbf.writeStringField(8, obj.originalMessageId);
    if (obj.progress !== undefined) pbf.writeVarintField(9, obj.progress);
    if (obj.oldestMsgInChunkTimestampSec !== undefined) pbf.writeVarintField(10, obj.oldestMsgInChunkTimestampSec);
    if (obj.initialHistBootstrapInlinePayload != null) pbf.writeBytesField(11, obj.initialHistBootstrapInlinePayload);
    if (obj.peerDataRequestSessionId !== undefined) pbf.writeStringField(12, obj.peerDataRequestSessionId);
}

export enum MessageHistorySyncNotificationHistorySyncType {
    INITIAL_BOOTSTRAP = 0,
    INITIAL_STATUS_V3 = 1,
    FULL = 2,
    RECENT = 3,
    PUSH_NAME = 4,
    NON_BLOCKING_DATA = 5,
    ON_DEMAND = 6,
}

export interface MessageImageMessage {
    url?: string;
    mimetype?: string;
    caption?: string;
    fileSha256?: Uint8Array;
    fileLength?: number;
    height?: number;
    width?: number;
    mediaKey?: Uint8Array;
    fileEncSha256?: Uint8Array;
    interactiveAnnotations?: InteractiveAnnotation[];
    directPath?: string;
    mediaKeyTimestamp?: number;
    jpegThumbnail?: Uint8Array;
    contextInfo?: ContextInfo;
    firstScanSidecar?: Uint8Array;
    firstScanLength?: number;
    experimentGroupId?: number;
    scansSidecar?: Uint8Array;
    scanLengths?: number[];
    midQualityFileSha256?: Uint8Array;
    midQualityFileEncSha256?: Uint8Array;
    viewOnce?: boolean;
    thumbnailDirectPath?: string;
    thumbnailSha256?: Uint8Array;
    thumbnailEncSha256?: Uint8Array;
    staticUrl?: string;
    annotations?: InteractiveAnnotation[];
}

export function readMessageImageMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageImageMessageField, {url: "" as string, mimetype: "" as string, caption: "" as string, fileSha256: undefined as unknown as Uint8Array, fileLength: 0 as number, height: 0 as number, width: 0 as number, mediaKey: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, interactiveAnnotations: [] as InteractiveAnnotation[], directPath: "" as string, mediaKeyTimestamp: 0 as number, jpegThumbnail: undefined as unknown as Uint8Array, contextInfo: undefined as unknown as ContextInfo, firstScanSidecar: undefined as unknown as Uint8Array, firstScanLength: 0 as number, experimentGroupId: 0 as number, scansSidecar: undefined as unknown as Uint8Array, scanLengths: [] as number[], midQualityFileSha256: undefined as unknown as Uint8Array, midQualityFileEncSha256: undefined as unknown as Uint8Array, viewOnce: false as boolean, thumbnailDirectPath: "" as string, thumbnailSha256: undefined as unknown as Uint8Array, thumbnailEncSha256: undefined as unknown as Uint8Array, staticUrl: "" as string, annotations: [] as InteractiveAnnotation[]}, end);
}
function readMessageImageMessageField(tag: number, obj: MessageImageMessage, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.mimetype = pbf.readString();
    else if (tag === 3) obj.caption = pbf.readString();
    else if (tag === 4) obj.fileSha256 = pbf.readBytes();
    else if (tag === 5) obj.fileLength = pbf.readVarint();
    else if (tag === 6) obj.height = pbf.readVarint();
    else if (tag === 7) obj.width = pbf.readVarint();
    else if (tag === 8) obj.mediaKey = pbf.readBytes();
    else if (tag === 9) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 10) obj.interactiveAnnotations?.push(readInteractiveAnnotation(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 11) obj.directPath = pbf.readString();
    else if (tag === 12) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 16) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.firstScanSidecar = pbf.readBytes();
    else if (tag === 19) obj.firstScanLength = pbf.readVarint();
    else if (tag === 20) obj.experimentGroupId = pbf.readVarint();
    else if (tag === 21) obj.scansSidecar = pbf.readBytes();
    else if (tag === 22) pbf.readPackedVarint(obj.scanLengths);
    else if (tag === 23) obj.midQualityFileSha256 = pbf.readBytes();
    else if (tag === 24) obj.midQualityFileEncSha256 = pbf.readBytes();
    else if (tag === 25) obj.viewOnce = pbf.readBoolean();
    else if (tag === 26) obj.thumbnailDirectPath = pbf.readString();
    else if (tag === 27) obj.thumbnailSha256 = pbf.readBytes();
    else if (tag === 28) obj.thumbnailEncSha256 = pbf.readBytes();
    else if (tag === 29) obj.staticUrl = pbf.readString();
    else if (tag === 30) obj.annotations?.push(readInteractiveAnnotation(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessageImageMessage(obj: MessageImageMessage, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.mimetype !== undefined) pbf.writeStringField(2, obj.mimetype);
    if (obj.caption !== undefined) pbf.writeStringField(3, obj.caption);
    if (obj.fileSha256 != null) pbf.writeBytesField(4, obj.fileSha256);
    if (obj.fileLength !== undefined) pbf.writeVarintField(5, obj.fileLength);
    if (obj.height !== undefined) pbf.writeVarintField(6, obj.height);
    if (obj.width !== undefined) pbf.writeVarintField(7, obj.width);
    if (obj.mediaKey != null) pbf.writeBytesField(8, obj.mediaKey);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(9, obj.fileEncSha256);
    if (obj.interactiveAnnotations) for (const item of obj.interactiveAnnotations) pbf.writeMessage(10, writeInteractiveAnnotation, item);
    if (obj.directPath !== undefined) pbf.writeStringField(11, obj.directPath);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(12, obj.mediaKeyTimestamp);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(16, obj.jpegThumbnail);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
    if (obj.firstScanSidecar != null) pbf.writeBytesField(18, obj.firstScanSidecar);
    if (obj.firstScanLength !== undefined) pbf.writeVarintField(19, obj.firstScanLength);
    if (obj.experimentGroupId !== undefined) pbf.writeVarintField(20, obj.experimentGroupId);
    if (obj.scansSidecar != null) pbf.writeBytesField(21, obj.scansSidecar);
    if (obj.scanLengths) for (const item of obj.scanLengths) pbf.writeVarintField(22, item);
    if (obj.midQualityFileSha256 != null) pbf.writeBytesField(23, obj.midQualityFileSha256);
    if (obj.midQualityFileEncSha256 != null) pbf.writeBytesField(24, obj.midQualityFileEncSha256);
    if (obj.viewOnce !== undefined) pbf.writeBooleanField(25, obj.viewOnce);
    if (obj.thumbnailDirectPath !== undefined) pbf.writeStringField(26, obj.thumbnailDirectPath);
    if (obj.thumbnailSha256 != null) pbf.writeBytesField(27, obj.thumbnailSha256);
    if (obj.thumbnailEncSha256 != null) pbf.writeBytesField(28, obj.thumbnailEncSha256);
    if (obj.staticUrl !== undefined) pbf.writeStringField(29, obj.staticUrl);
    if (obj.annotations) for (const item of obj.annotations) pbf.writeMessage(30, writeInteractiveAnnotation, item);
}

export interface MessageInitialSecurityNotificationSettingSync {
    securityNotificationEnabled?: boolean;
}

export function readMessageInitialSecurityNotificationSettingSync(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInitialSecurityNotificationSettingSyncField, {securityNotificationEnabled: false as boolean}, end);
}
function readMessageInitialSecurityNotificationSettingSyncField(tag: number, obj: MessageInitialSecurityNotificationSettingSync, pbf: Pbf) {
    if (tag === 1) obj.securityNotificationEnabled = pbf.readBoolean();
}
export function writeMessageInitialSecurityNotificationSettingSync(obj: MessageInitialSecurityNotificationSettingSync, pbf: Pbf) {
    if (obj.securityNotificationEnabled !== undefined) pbf.writeBooleanField(1, obj.securityNotificationEnabled);
}

export interface MessageInteractiveMessage {
    header?: MessageInteractiveMessageHeader;
    body?: MessageInteractiveMessageBody;
    footer?: MessageInteractiveMessageFooter;
    contextInfo?: ContextInfo;
    shopStorefrontMessage?: MessageInteractiveMessageShopMessage;
    collectionMessage?: MessageInteractiveMessageCollectionMessage;
    nativeFlowMessage?: MessageInteractiveMessageNativeFlowMessage;
    carouselMessage?: MessageInteractiveMessageCarouselMessage;
}

export function readMessageInteractiveMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageField, {header: undefined as unknown as MessageInteractiveMessageHeader, body: undefined as unknown as MessageInteractiveMessageBody, footer: undefined as unknown as MessageInteractiveMessageFooter, contextInfo: undefined as unknown as ContextInfo, shopStorefrontMessage: undefined as unknown as MessageInteractiveMessageShopMessage, collectionMessage: undefined as unknown as MessageInteractiveMessageCollectionMessage, nativeFlowMessage: undefined as unknown as MessageInteractiveMessageNativeFlowMessage, carouselMessage: undefined as unknown as MessageInteractiveMessageCarouselMessage}, end);
}
function readMessageInteractiveMessageField(tag: number, obj: MessageInteractiveMessage, pbf: Pbf) {
    if (tag === 1) obj.header = readMessageInteractiveMessageHeader(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.body = readMessageInteractiveMessageBody(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.footer = readMessageInteractiveMessageFooter(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 15) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) { obj.shopStorefrontMessage = readMessageInteractiveMessageShopMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.interactiveMessage = "shopStorefrontMessage"
; }
    else if (tag === 5) { obj.collectionMessage = readMessageInteractiveMessageCollectionMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.interactiveMessage = "collectionMessage"
; }
    else if (tag === 6) { obj.nativeFlowMessage = readMessageInteractiveMessageNativeFlowMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.interactiveMessage = "nativeFlowMessage"
; }
    else if (tag === 7) { obj.carouselMessage = readMessageInteractiveMessageCarouselMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.interactiveMessage = "carouselMessage"
; }
}
export function writeMessageInteractiveMessage(obj: MessageInteractiveMessage, pbf: Pbf) {
    if (obj.header) pbf.writeMessage(1, writeMessageInteractiveMessageHeader, obj.header);
    if (obj.body) pbf.writeMessage(2, writeMessageInteractiveMessageBody, obj.body);
    if (obj.footer) pbf.writeMessage(3, writeMessageInteractiveMessageFooter, obj.footer);
    if (obj.contextInfo) pbf.writeMessage(15, writeContextInfo, obj.contextInfo);
    if (obj.shopStorefrontMessage) pbf.writeMessage(4, writeMessageInteractiveMessageShopMessage, obj.shopStorefrontMessage);
    if (obj.collectionMessage) pbf.writeMessage(5, writeMessageInteractiveMessageCollectionMessage, obj.collectionMessage);
    if (obj.nativeFlowMessage) pbf.writeMessage(6, writeMessageInteractiveMessageNativeFlowMessage, obj.nativeFlowMessage);
    if (obj.carouselMessage) pbf.writeMessage(7, writeMessageInteractiveMessageCarouselMessage, obj.carouselMessage);
}

export interface MessageInteractiveMessageBody {
    text?: string;
}

export function readMessageInteractiveMessageBody(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageBodyField, {text: "" as string}, end);
}
function readMessageInteractiveMessageBodyField(tag: number, obj: MessageInteractiveMessageBody, pbf: Pbf) {
    if (tag === 1) obj.text = pbf.readString();
}
export function writeMessageInteractiveMessageBody(obj: MessageInteractiveMessageBody, pbf: Pbf) {
    if (obj.text !== undefined) pbf.writeStringField(1, obj.text);
}

export interface MessageInteractiveMessageCarouselMessage {
    cards?: MessageInteractiveMessage[];
    messageVersion?: number;
}

export function readMessageInteractiveMessageCarouselMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageCarouselMessageField, {cards: [] as MessageInteractiveMessage[], messageVersion: 0 as number}, end);
}
function readMessageInteractiveMessageCarouselMessageField(tag: number, obj: MessageInteractiveMessageCarouselMessage, pbf: Pbf) {
    if (tag === 1) obj.cards?.push(readMessageInteractiveMessage(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 2) obj.messageVersion = pbf.readVarint(true);
}
export function writeMessageInteractiveMessageCarouselMessage(obj: MessageInteractiveMessageCarouselMessage, pbf: Pbf) {
    if (obj.cards) for (const item of obj.cards) pbf.writeMessage(1, writeMessageInteractiveMessage, item);
    if (obj.messageVersion !== undefined) pbf.writeVarintField(2, obj.messageVersion);
}

export interface MessageInteractiveMessageCollectionMessage {
    bizJid?: string;
    id?: string;
    messageVersion?: number;
}

export function readMessageInteractiveMessageCollectionMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageCollectionMessageField, {bizJid: "" as string, id: "" as string, messageVersion: 0 as number}, end);
}
function readMessageInteractiveMessageCollectionMessageField(tag: number, obj: MessageInteractiveMessageCollectionMessage, pbf: Pbf) {
    if (tag === 1) obj.bizJid = pbf.readString();
    else if (tag === 2) obj.id = pbf.readString();
    else if (tag === 3) obj.messageVersion = pbf.readVarint(true);
}
export function writeMessageInteractiveMessageCollectionMessage(obj: MessageInteractiveMessageCollectionMessage, pbf: Pbf) {
    if (obj.bizJid !== undefined) pbf.writeStringField(1, obj.bizJid);
    if (obj.id !== undefined) pbf.writeStringField(2, obj.id);
    if (obj.messageVersion !== undefined) pbf.writeVarintField(3, obj.messageVersion);
}

export interface MessageInteractiveMessageFooter {
    text?: string;
}

export function readMessageInteractiveMessageFooter(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageFooterField, {text: "" as string}, end);
}
function readMessageInteractiveMessageFooterField(tag: number, obj: MessageInteractiveMessageFooter, pbf: Pbf) {
    if (tag === 1) obj.text = pbf.readString();
}
export function writeMessageInteractiveMessageFooter(obj: MessageInteractiveMessageFooter, pbf: Pbf) {
    if (obj.text !== undefined) pbf.writeStringField(1, obj.text);
}

export interface MessageInteractiveMessageHeader {
    title?: string;
    subtitle?: string;
    hasMediaAttachment?: boolean;
    documentMessage?: MessageDocumentMessage;
    imageMessage?: MessageImageMessage;
    jpegThumbnail?: Uint8Array;
    videoMessage?: MessageVideoMessage;
    locationMessage?: MessageLocationMessage;
}

export function readMessageInteractiveMessageHeader(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageHeaderField, {title: "" as string, subtitle: "" as string, hasMediaAttachment: false as boolean, documentMessage: undefined as unknown as MessageDocumentMessage, imageMessage: undefined as unknown as MessageImageMessage, jpegThumbnail: undefined as unknown as Uint8Array, videoMessage: undefined as unknown as MessageVideoMessage, locationMessage: undefined as unknown as MessageLocationMessage}, end);
}
function readMessageInteractiveMessageHeaderField(tag: number, obj: MessageInteractiveMessageHeader, pbf: Pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.subtitle = pbf.readString();
    else if (tag === 5) obj.hasMediaAttachment = pbf.readBoolean();
    else if (tag === 3) { obj.documentMessage = readMessageDocumentMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.media = "documentMessage"
; }
    else if (tag === 4) { obj.imageMessage = readMessageImageMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.media = "imageMessage"
; }
    else if (tag === 6) { obj.jpegThumbnail = pbf.readBytes();
//@ts-ignore 
obj.media = "jpegThumbnail"
; }
    else if (tag === 7) { obj.videoMessage = readMessageVideoMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.media = "videoMessage"
; }
    else if (tag === 8) { obj.locationMessage = readMessageLocationMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.media = "locationMessage"
; }
}
export function writeMessageInteractiveMessageHeader(obj: MessageInteractiveMessageHeader, pbf: Pbf) {
    if (obj.title !== undefined) pbf.writeStringField(1, obj.title);
    if (obj.subtitle !== undefined) pbf.writeStringField(2, obj.subtitle);
    if (obj.hasMediaAttachment !== undefined) pbf.writeBooleanField(5, obj.hasMediaAttachment);
    if (obj.documentMessage) pbf.writeMessage(3, writeMessageDocumentMessage, obj.documentMessage);
    if (obj.imageMessage) pbf.writeMessage(4, writeMessageImageMessage, obj.imageMessage);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(6, obj.jpegThumbnail);
    if (obj.videoMessage) pbf.writeMessage(7, writeMessageVideoMessage, obj.videoMessage);
    if (obj.locationMessage) pbf.writeMessage(8, writeMessageLocationMessage, obj.locationMessage);
}

export interface MessageInteractiveMessageNativeFlowMessage {
    buttons?: MessageInteractiveMessageNativeFlowMessageNativeFlowButton[];
    messageParamsJson?: string;
    messageVersion?: number;
}

export function readMessageInteractiveMessageNativeFlowMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageNativeFlowMessageField, {buttons: [] as MessageInteractiveMessageNativeFlowMessageNativeFlowButton[], messageParamsJson: "" as string, messageVersion: 0 as number}, end);
}
function readMessageInteractiveMessageNativeFlowMessageField(tag: number, obj: MessageInteractiveMessageNativeFlowMessage, pbf: Pbf) {
    if (tag === 1) obj.buttons?.push(readMessageInteractiveMessageNativeFlowMessageNativeFlowButton(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 2) obj.messageParamsJson = pbf.readString();
    else if (tag === 3) obj.messageVersion = pbf.readVarint(true);
}
export function writeMessageInteractiveMessageNativeFlowMessage(obj: MessageInteractiveMessageNativeFlowMessage, pbf: Pbf) {
    if (obj.buttons) for (const item of obj.buttons) pbf.writeMessage(1, writeMessageInteractiveMessageNativeFlowMessageNativeFlowButton, item);
    if (obj.messageParamsJson !== undefined) pbf.writeStringField(2, obj.messageParamsJson);
    if (obj.messageVersion !== undefined) pbf.writeVarintField(3, obj.messageVersion);
}

export interface MessageInteractiveMessageNativeFlowMessageNativeFlowButton {
    name?: string;
    buttonParamsJson?: string;
}

export function readMessageInteractiveMessageNativeFlowMessageNativeFlowButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageNativeFlowMessageNativeFlowButtonField, {name: "" as string, buttonParamsJson: "" as string}, end);
}
function readMessageInteractiveMessageNativeFlowMessageNativeFlowButtonField(tag: number, obj: MessageInteractiveMessageNativeFlowMessageNativeFlowButton, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.buttonParamsJson = pbf.readString();
}
export function writeMessageInteractiveMessageNativeFlowMessageNativeFlowButton(obj: MessageInteractiveMessageNativeFlowMessageNativeFlowButton, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
    if (obj.buttonParamsJson !== undefined) pbf.writeStringField(2, obj.buttonParamsJson);
}

export interface MessageInteractiveMessageShopMessage {
    id?: string;
    surface?: MessageInteractiveMessageShopMessageSurface;
    messageVersion?: number;
}

export function readMessageInteractiveMessageShopMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveMessageShopMessageField, {id: "" as string, surface: 0 as MessageInteractiveMessageShopMessageSurface, messageVersion: 0 as number}, end);
}
function readMessageInteractiveMessageShopMessageField(tag: number, obj: MessageInteractiveMessageShopMessage, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readString();
    else if (tag === 2) obj.surface = pbf.readVarint();
    else if (tag === 3) obj.messageVersion = pbf.readVarint(true);
}
export function writeMessageInteractiveMessageShopMessage(obj: MessageInteractiveMessageShopMessage, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeStringField(1, obj.id);
    if (obj.surface !== undefined) pbf.writeVarintField(2, obj.surface);
    if (obj.messageVersion !== undefined) pbf.writeVarintField(3, obj.messageVersion);
}

export enum MessageInteractiveMessageShopMessageSurface {
    UNKNOWN_SURFACE = 0,
    FB = 1,
    IG = 2,
    WA = 3,
}

export interface MessageInteractiveResponseMessage {
    body?: MessageInteractiveResponseMessageBody;
    contextInfo?: ContextInfo;
    nativeFlowResponseMessage?: MessageInteractiveResponseMessageNativeFlowResponseMessage;
}

export function readMessageInteractiveResponseMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveResponseMessageField, {body: undefined as unknown as MessageInteractiveResponseMessageBody, contextInfo: undefined as unknown as ContextInfo, nativeFlowResponseMessage: undefined as unknown as MessageInteractiveResponseMessageNativeFlowResponseMessage}, end);
}
function readMessageInteractiveResponseMessageField(tag: number, obj: MessageInteractiveResponseMessage, pbf: Pbf) {
    if (tag === 1) obj.body = readMessageInteractiveResponseMessageBody(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 15) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) { obj.nativeFlowResponseMessage = readMessageInteractiveResponseMessageNativeFlowResponseMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.interactiveResponseMessage = "nativeFlowResponseMessage"
; }
}
export function writeMessageInteractiveResponseMessage(obj: MessageInteractiveResponseMessage, pbf: Pbf) {
    if (obj.body) pbf.writeMessage(1, writeMessageInteractiveResponseMessageBody, obj.body);
    if (obj.contextInfo) pbf.writeMessage(15, writeContextInfo, obj.contextInfo);
    if (obj.nativeFlowResponseMessage) pbf.writeMessage(2, writeMessageInteractiveResponseMessageNativeFlowResponseMessage, obj.nativeFlowResponseMessage);
}

export interface MessageInteractiveResponseMessageBody {
    text?: string;
    format?: MessageInteractiveResponseMessageBodyFormat;
}

export function readMessageInteractiveResponseMessageBody(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveResponseMessageBodyField, {text: "" as string, format: 0 as MessageInteractiveResponseMessageBodyFormat}, end);
}
function readMessageInteractiveResponseMessageBodyField(tag: number, obj: MessageInteractiveResponseMessageBody, pbf: Pbf) {
    if (tag === 1) obj.text = pbf.readString();
    else if (tag === 2) obj.format = pbf.readVarint();
}
export function writeMessageInteractiveResponseMessageBody(obj: MessageInteractiveResponseMessageBody, pbf: Pbf) {
    if (obj.text !== undefined) pbf.writeStringField(1, obj.text);
    if (obj.format !== undefined) pbf.writeVarintField(2, obj.format);
}

export enum MessageInteractiveResponseMessageBodyFormat {
    DEFAULT = 0,
    EXTENSIONS_1 = 1,
}

export interface MessageInteractiveResponseMessageNativeFlowResponseMessage {
    name?: string;
    paramsJson?: string;
    version?: number;
}

export function readMessageInteractiveResponseMessageNativeFlowResponseMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInteractiveResponseMessageNativeFlowResponseMessageField, {name: "" as string, paramsJson: "" as string, version: 0 as number}, end);
}
function readMessageInteractiveResponseMessageNativeFlowResponseMessageField(tag: number, obj: MessageInteractiveResponseMessageNativeFlowResponseMessage, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.paramsJson = pbf.readString();
    else if (tag === 3) obj.version = pbf.readVarint(true);
}
export function writeMessageInteractiveResponseMessageNativeFlowResponseMessage(obj: MessageInteractiveResponseMessageNativeFlowResponseMessage, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
    if (obj.paramsJson !== undefined) pbf.writeStringField(2, obj.paramsJson);
    if (obj.version !== undefined) pbf.writeVarintField(3, obj.version);
}

export interface MessageInvoiceMessage {
    note?: string;
    token?: string;
    attachmentType?: MessageInvoiceMessageAttachmentType;
    attachmentMimetype?: string;
    attachmentMediaKey?: Uint8Array;
    attachmentMediaKeyTimestamp?: number;
    attachmentFileSha256?: Uint8Array;
    attachmentFileEncSha256?: Uint8Array;
    attachmentDirectPath?: string;
    attachmentJpegThumbnail?: Uint8Array;
}

export function readMessageInvoiceMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageInvoiceMessageField, {note: "" as string, token: "" as string, attachmentType: 0 as MessageInvoiceMessageAttachmentType, attachmentMimetype: "" as string, attachmentMediaKey: undefined as unknown as Uint8Array, attachmentMediaKeyTimestamp: 0 as number, attachmentFileSha256: undefined as unknown as Uint8Array, attachmentFileEncSha256: undefined as unknown as Uint8Array, attachmentDirectPath: "" as string, attachmentJpegThumbnail: undefined as unknown as Uint8Array}, end);
}
function readMessageInvoiceMessageField(tag: number, obj: MessageInvoiceMessage, pbf: Pbf) {
    if (tag === 1) obj.note = pbf.readString();
    else if (tag === 2) obj.token = pbf.readString();
    else if (tag === 3) obj.attachmentType = pbf.readVarint();
    else if (tag === 4) obj.attachmentMimetype = pbf.readString();
    else if (tag === 5) obj.attachmentMediaKey = pbf.readBytes();
    else if (tag === 6) obj.attachmentMediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 7) obj.attachmentFileSha256 = pbf.readBytes();
    else if (tag === 8) obj.attachmentFileEncSha256 = pbf.readBytes();
    else if (tag === 9) obj.attachmentDirectPath = pbf.readString();
    else if (tag === 10) obj.attachmentJpegThumbnail = pbf.readBytes();
}
export function writeMessageInvoiceMessage(obj: MessageInvoiceMessage, pbf: Pbf) {
    if (obj.note !== undefined) pbf.writeStringField(1, obj.note);
    if (obj.token !== undefined) pbf.writeStringField(2, obj.token);
    if (obj.attachmentType !== undefined) pbf.writeVarintField(3, obj.attachmentType);
    if (obj.attachmentMimetype !== undefined) pbf.writeStringField(4, obj.attachmentMimetype);
    if (obj.attachmentMediaKey != null) pbf.writeBytesField(5, obj.attachmentMediaKey);
    if (obj.attachmentMediaKeyTimestamp !== undefined) pbf.writeVarintField(6, obj.attachmentMediaKeyTimestamp);
    if (obj.attachmentFileSha256 != null) pbf.writeBytesField(7, obj.attachmentFileSha256);
    if (obj.attachmentFileEncSha256 != null) pbf.writeBytesField(8, obj.attachmentFileEncSha256);
    if (obj.attachmentDirectPath !== undefined) pbf.writeStringField(9, obj.attachmentDirectPath);
    if (obj.attachmentJpegThumbnail != null) pbf.writeBytesField(10, obj.attachmentJpegThumbnail);
}

export enum MessageInvoiceMessageAttachmentType {
    IMAGE = 0,
    PDF = 1,
}

export interface MessageKeepInChatMessage {
    key?: MessageKey;
    keepType?: KeepType;
    timestampMs?: number;
}

export function readMessageKeepInChatMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageKeepInChatMessageField, {key: undefined as unknown as MessageKey, keepType: 0 as KeepType, timestampMs: 0 as number}, end);
}
function readMessageKeepInChatMessageField(tag: number, obj: MessageKeepInChatMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.keepType = pbf.readVarint();
    else if (tag === 3) obj.timestampMs = pbf.readVarint(true);
}
export function writeMessageKeepInChatMessage(obj: MessageKeepInChatMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.keepType !== undefined) pbf.writeVarintField(2, obj.keepType);
    if (obj.timestampMs !== undefined) pbf.writeVarintField(3, obj.timestampMs);
}

export interface MessageListMessage {
    title?: string;
    description?: string;
    buttonText?: string;
    listType?: MessageListMessageListType;
    sections?: MessageListMessageSection[];
    productListInfo?: MessageListMessageProductListInfo;
    footerText?: string;
    contextInfo?: ContextInfo;
}

export function readMessageListMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListMessageField, {title: "" as string, description: "" as string, buttonText: "" as string, listType: 0 as MessageListMessageListType, sections: [] as MessageListMessageSection[], productListInfo: undefined as unknown as MessageListMessageProductListInfo, footerText: "" as string, contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessageListMessageField(tag: number, obj: MessageListMessage, pbf: Pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.description = pbf.readString();
    else if (tag === 3) obj.buttonText = pbf.readString();
    else if (tag === 4) obj.listType = pbf.readVarint();
    else if (tag === 5) obj.sections?.push(readMessageListMessageSection(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.productListInfo = readMessageListMessageProductListInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.footerText = pbf.readString();
    else if (tag === 8) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageListMessage(obj: MessageListMessage, pbf: Pbf) {
    if (obj.title !== undefined) pbf.writeStringField(1, obj.title);
    if (obj.description !== undefined) pbf.writeStringField(2, obj.description);
    if (obj.buttonText !== undefined) pbf.writeStringField(3, obj.buttonText);
    if (obj.listType !== undefined) pbf.writeVarintField(4, obj.listType);
    if (obj.sections) for (const item of obj.sections) pbf.writeMessage(5, writeMessageListMessageSection, item);
    if (obj.productListInfo) pbf.writeMessage(6, writeMessageListMessageProductListInfo, obj.productListInfo);
    if (obj.footerText !== undefined) pbf.writeStringField(7, obj.footerText);
    if (obj.contextInfo) pbf.writeMessage(8, writeContextInfo, obj.contextInfo);
}

export enum MessageListMessageListType {
    UNKNOWN = 0,
    SINGLE_SELECT = 1,
    PRODUCT_LIST = 2,
}

export interface MessageListMessageProduct {
    productId?: string;
}

export function readMessageListMessageProduct(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListMessageProductField, {productId: "" as string}, end);
}
function readMessageListMessageProductField(tag: number, obj: MessageListMessageProduct, pbf: Pbf) {
    if (tag === 1) obj.productId = pbf.readString();
}
export function writeMessageListMessageProduct(obj: MessageListMessageProduct, pbf: Pbf) {
    if (obj.productId !== undefined) pbf.writeStringField(1, obj.productId);
}

export interface MessageListMessageProductListHeaderImage {
    productId?: string;
    jpegThumbnail?: Uint8Array;
}

export function readMessageListMessageProductListHeaderImage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListMessageProductListHeaderImageField, {productId: "" as string, jpegThumbnail: undefined as unknown as Uint8Array}, end);
}
function readMessageListMessageProductListHeaderImageField(tag: number, obj: MessageListMessageProductListHeaderImage, pbf: Pbf) {
    if (tag === 1) obj.productId = pbf.readString();
    else if (tag === 2) obj.jpegThumbnail = pbf.readBytes();
}
export function writeMessageListMessageProductListHeaderImage(obj: MessageListMessageProductListHeaderImage, pbf: Pbf) {
    if (obj.productId !== undefined) pbf.writeStringField(1, obj.productId);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(2, obj.jpegThumbnail);
}

export interface MessageListMessageProductListInfo {
    productSections?: MessageListMessageProductSection[];
    headerImage?: MessageListMessageProductListHeaderImage;
    businessOwnerJid?: string;
}

export function readMessageListMessageProductListInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListMessageProductListInfoField, {productSections: [] as MessageListMessageProductSection[], headerImage: undefined as unknown as MessageListMessageProductListHeaderImage, businessOwnerJid: "" as string}, end);
}
function readMessageListMessageProductListInfoField(tag: number, obj: MessageListMessageProductListInfo, pbf: Pbf) {
    if (tag === 1) obj.productSections?.push(readMessageListMessageProductSection(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 2) obj.headerImage = readMessageListMessageProductListHeaderImage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.businessOwnerJid = pbf.readString();
}
export function writeMessageListMessageProductListInfo(obj: MessageListMessageProductListInfo, pbf: Pbf) {
    if (obj.productSections) for (const item of obj.productSections) pbf.writeMessage(1, writeMessageListMessageProductSection, item);
    if (obj.headerImage) pbf.writeMessage(2, writeMessageListMessageProductListHeaderImage, obj.headerImage);
    if (obj.businessOwnerJid !== undefined) pbf.writeStringField(3, obj.businessOwnerJid);
}

export interface MessageListMessageProductSection {
    title?: string;
    products?: MessageListMessageProduct[];
}

export function readMessageListMessageProductSection(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListMessageProductSectionField, {title: "" as string, products: [] as MessageListMessageProduct[]}, end);
}
function readMessageListMessageProductSectionField(tag: number, obj: MessageListMessageProductSection, pbf: Pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.products?.push(readMessageListMessageProduct(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessageListMessageProductSection(obj: MessageListMessageProductSection, pbf: Pbf) {
    if (obj.title !== undefined) pbf.writeStringField(1, obj.title);
    if (obj.products) for (const item of obj.products) pbf.writeMessage(2, writeMessageListMessageProduct, item);
}

export interface MessageListMessageRow {
    title?: string;
    description?: string;
    rowId?: string;
}

export function readMessageListMessageRow(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListMessageRowField, {title: "" as string, description: "" as string, rowId: "" as string}, end);
}
function readMessageListMessageRowField(tag: number, obj: MessageListMessageRow, pbf: Pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.description = pbf.readString();
    else if (tag === 3) obj.rowId = pbf.readString();
}
export function writeMessageListMessageRow(obj: MessageListMessageRow, pbf: Pbf) {
    if (obj.title !== undefined) pbf.writeStringField(1, obj.title);
    if (obj.description !== undefined) pbf.writeStringField(2, obj.description);
    if (obj.rowId !== undefined) pbf.writeStringField(3, obj.rowId);
}

export interface MessageListMessageSection {
    title?: string;
    rows?: MessageListMessageRow[];
}

export function readMessageListMessageSection(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListMessageSectionField, {title: "" as string, rows: [] as MessageListMessageRow[]}, end);
}
function readMessageListMessageSectionField(tag: number, obj: MessageListMessageSection, pbf: Pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.rows?.push(readMessageListMessageRow(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessageListMessageSection(obj: MessageListMessageSection, pbf: Pbf) {
    if (obj.title !== undefined) pbf.writeStringField(1, obj.title);
    if (obj.rows) for (const item of obj.rows) pbf.writeMessage(2, writeMessageListMessageRow, item);
}

export interface MessageListResponseMessage {
    title?: string;
    listType?: MessageListResponseMessageListType;
    singleSelectReply?: MessageListResponseMessageSingleSelectReply;
    contextInfo?: ContextInfo;
    description?: string;
}

export function readMessageListResponseMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListResponseMessageField, {title: "" as string, listType: 0 as MessageListResponseMessageListType, singleSelectReply: undefined as unknown as MessageListResponseMessageSingleSelectReply, contextInfo: undefined as unknown as ContextInfo, description: "" as string}, end);
}
function readMessageListResponseMessageField(tag: number, obj: MessageListResponseMessage, pbf: Pbf) {
    if (tag === 1) obj.title = pbf.readString();
    else if (tag === 2) obj.listType = pbf.readVarint();
    else if (tag === 3) obj.singleSelectReply = readMessageListResponseMessageSingleSelectReply(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.description = pbf.readString();
}
export function writeMessageListResponseMessage(obj: MessageListResponseMessage, pbf: Pbf) {
    if (obj.title !== undefined) pbf.writeStringField(1, obj.title);
    if (obj.listType !== undefined) pbf.writeVarintField(2, obj.listType);
    if (obj.singleSelectReply) pbf.writeMessage(3, writeMessageListResponseMessageSingleSelectReply, obj.singleSelectReply);
    if (obj.contextInfo) pbf.writeMessage(4, writeContextInfo, obj.contextInfo);
    if (obj.description !== undefined) pbf.writeStringField(5, obj.description);
}

export enum MessageListResponseMessageListType {
    UNKNOWN = 0,
    SINGLE_SELECT = 1,
}

export interface MessageListResponseMessageSingleSelectReply {
    selectedRowId?: string;
}

export function readMessageListResponseMessageSingleSelectReply(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageListResponseMessageSingleSelectReplyField, {selectedRowId: "" as string}, end);
}
function readMessageListResponseMessageSingleSelectReplyField(tag: number, obj: MessageListResponseMessageSingleSelectReply, pbf: Pbf) {
    if (tag === 1) obj.selectedRowId = pbf.readString();
}
export function writeMessageListResponseMessageSingleSelectReply(obj: MessageListResponseMessageSingleSelectReply, pbf: Pbf) {
    if (obj.selectedRowId !== undefined) pbf.writeStringField(1, obj.selectedRowId);
}

export interface MessageLiveLocationMessage {
    degreesLatitude?: number;
    degreesLongitude?: number;
    accuracyInMeters?: number;
    speedInMps?: number;
    degreesClockwiseFromMagneticNorth?: number;
    caption?: string;
    sequenceNumber?: number;
    timeOffset?: number;
    jpegThumbnail?: Uint8Array;
    contextInfo?: ContextInfo;
}

export function readMessageLiveLocationMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageLiveLocationMessageField, {degreesLatitude: 0 as number, degreesLongitude: 0 as number, accuracyInMeters: 0 as number, speedInMps: 0 as number, degreesClockwiseFromMagneticNorth: 0 as number, caption: "" as string, sequenceNumber: 0 as number, timeOffset: 0 as number, jpegThumbnail: undefined as unknown as Uint8Array, contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessageLiveLocationMessageField(tag: number, obj: MessageLiveLocationMessage, pbf: Pbf) {
    if (tag === 1) obj.degreesLatitude = pbf.readDouble();
    else if (tag === 2) obj.degreesLongitude = pbf.readDouble();
    else if (tag === 3) obj.accuracyInMeters = pbf.readVarint();
    else if (tag === 4) obj.speedInMps = pbf.readFloat();
    else if (tag === 5) obj.degreesClockwiseFromMagneticNorth = pbf.readVarint();
    else if (tag === 6) obj.caption = pbf.readString();
    else if (tag === 7) obj.sequenceNumber = pbf.readVarint(true);
    else if (tag === 8) obj.timeOffset = pbf.readVarint();
    else if (tag === 16) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageLiveLocationMessage(obj: MessageLiveLocationMessage, pbf: Pbf) {
    if (obj.degreesLatitude !== undefined) pbf.writeDoubleField(1, obj.degreesLatitude);
    if (obj.degreesLongitude !== undefined) pbf.writeDoubleField(2, obj.degreesLongitude);
    if (obj.accuracyInMeters !== undefined) pbf.writeVarintField(3, obj.accuracyInMeters);
    if (obj.speedInMps !== undefined) pbf.writeFloatField(4, obj.speedInMps);
    if (obj.degreesClockwiseFromMagneticNorth !== undefined) pbf.writeVarintField(5, obj.degreesClockwiseFromMagneticNorth);
    if (obj.caption !== undefined) pbf.writeStringField(6, obj.caption);
    if (obj.sequenceNumber !== undefined) pbf.writeVarintField(7, obj.sequenceNumber);
    if (obj.timeOffset !== undefined) pbf.writeVarintField(8, obj.timeOffset);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(16, obj.jpegThumbnail);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
}

export interface MessageLocationMessage {
    degreesLatitude?: number;
    degreesLongitude?: number;
    name?: string;
    address?: string;
    url?: string;
    isLive?: boolean;
    accuracyInMeters?: number;
    speedInMps?: number;
    degreesClockwiseFromMagneticNorth?: number;
    comment?: string;
    jpegThumbnail?: Uint8Array;
    contextInfo?: ContextInfo;
}

export function readMessageLocationMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageLocationMessageField, {degreesLatitude: 0 as number, degreesLongitude: 0 as number, name: "" as string, address: "" as string, url: "" as string, isLive: false as boolean, accuracyInMeters: 0 as number, speedInMps: 0 as number, degreesClockwiseFromMagneticNorth: 0 as number, comment: "" as string, jpegThumbnail: undefined as unknown as Uint8Array, contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessageLocationMessageField(tag: number, obj: MessageLocationMessage, pbf: Pbf) {
    if (tag === 1) obj.degreesLatitude = pbf.readDouble();
    else if (tag === 2) obj.degreesLongitude = pbf.readDouble();
    else if (tag === 3) obj.name = pbf.readString();
    else if (tag === 4) obj.address = pbf.readString();
    else if (tag === 5) obj.url = pbf.readString();
    else if (tag === 6) obj.isLive = pbf.readBoolean();
    else if (tag === 7) obj.accuracyInMeters = pbf.readVarint();
    else if (tag === 8) obj.speedInMps = pbf.readFloat();
    else if (tag === 9) obj.degreesClockwiseFromMagneticNorth = pbf.readVarint();
    else if (tag === 11) obj.comment = pbf.readString();
    else if (tag === 16) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageLocationMessage(obj: MessageLocationMessage, pbf: Pbf) {
    if (obj.degreesLatitude !== undefined) pbf.writeDoubleField(1, obj.degreesLatitude);
    if (obj.degreesLongitude !== undefined) pbf.writeDoubleField(2, obj.degreesLongitude);
    if (obj.name !== undefined) pbf.writeStringField(3, obj.name);
    if (obj.address !== undefined) pbf.writeStringField(4, obj.address);
    if (obj.url !== undefined) pbf.writeStringField(5, obj.url);
    if (obj.isLive !== undefined) pbf.writeBooleanField(6, obj.isLive);
    if (obj.accuracyInMeters !== undefined) pbf.writeVarintField(7, obj.accuracyInMeters);
    if (obj.speedInMps !== undefined) pbf.writeFloatField(8, obj.speedInMps);
    if (obj.degreesClockwiseFromMagneticNorth !== undefined) pbf.writeVarintField(9, obj.degreesClockwiseFromMagneticNorth);
    if (obj.comment !== undefined) pbf.writeStringField(11, obj.comment);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(16, obj.jpegThumbnail);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
}

export interface MessageMessageHistoryBundle {
    mimetype?: string;
    fileSha256?: Uint8Array;
    mediaKey?: Uint8Array;
    fileEncSha256?: Uint8Array;
    directPath?: string;
    mediaKeyTimestamp?: number;
    contextInfo?: ContextInfo;
    participants?: string[];
}

export function readMessageMessageHistoryBundle(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageMessageHistoryBundleField, {mimetype: "" as string, fileSha256: undefined as unknown as Uint8Array, mediaKey: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, directPath: "" as string, mediaKeyTimestamp: 0 as number, contextInfo: undefined as unknown as ContextInfo, participants: [] as string[]}, end);
}
function readMessageMessageHistoryBundleField(tag: number, obj: MessageMessageHistoryBundle, pbf: Pbf) {
    if (tag === 2) obj.mimetype = pbf.readString();
    else if (tag === 3) obj.fileSha256 = pbf.readBytes();
    else if (tag === 5) obj.mediaKey = pbf.readBytes();
    else if (tag === 6) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 7) obj.directPath = pbf.readString();
    else if (tag === 8) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 9) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.participants?.push(pbf.readString());
}
export function writeMessageMessageHistoryBundle(obj: MessageMessageHistoryBundle, pbf: Pbf) {
    if (obj.mimetype !== undefined) pbf.writeStringField(2, obj.mimetype);
    if (obj.fileSha256 != null) pbf.writeBytesField(3, obj.fileSha256);
    if (obj.mediaKey != null) pbf.writeBytesField(5, obj.mediaKey);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(6, obj.fileEncSha256);
    if (obj.directPath !== undefined) pbf.writeStringField(7, obj.directPath);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(8, obj.mediaKeyTimestamp);
    if (obj.contextInfo) pbf.writeMessage(9, writeContextInfo, obj.contextInfo);
    if (obj.participants) for (const item of obj.participants) pbf.writeStringField(10, item);
}

export interface MessageNewsletterAdminInviteMessage {
    newsletterJid?: string;
    newsletterName?: string;
    jpegThumbnail?: Uint8Array;
    caption?: string;
    inviteExpiration?: number;
}

export function readMessageNewsletterAdminInviteMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageNewsletterAdminInviteMessageField, {newsletterJid: "" as string, newsletterName: "" as string, jpegThumbnail: undefined as unknown as Uint8Array, caption: "" as string, inviteExpiration: 0 as number}, end);
}
function readMessageNewsletterAdminInviteMessageField(tag: number, obj: MessageNewsletterAdminInviteMessage, pbf: Pbf) {
    if (tag === 1) obj.newsletterJid = pbf.readString();
    else if (tag === 2) obj.newsletterName = pbf.readString();
    else if (tag === 3) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 4) obj.caption = pbf.readString();
    else if (tag === 5) obj.inviteExpiration = pbf.readVarint(true);
}
export function writeMessageNewsletterAdminInviteMessage(obj: MessageNewsletterAdminInviteMessage, pbf: Pbf) {
    if (obj.newsletterJid !== undefined) pbf.writeStringField(1, obj.newsletterJid);
    if (obj.newsletterName !== undefined) pbf.writeStringField(2, obj.newsletterName);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(3, obj.jpegThumbnail);
    if (obj.caption !== undefined) pbf.writeStringField(4, obj.caption);
    if (obj.inviteExpiration !== undefined) pbf.writeVarintField(5, obj.inviteExpiration);
}

export interface MessageOrderMessage {
    orderId?: string;
    thumbnail?: Uint8Array;
    itemCount?: number;
    status?: MessageOrderMessageOrderStatus;
    surface?: MessageOrderMessageOrderSurface;
    message?: string;
    orderTitle?: string;
    sellerJid?: string;
    token?: string;
    totalAmount1000?: number;
    totalCurrencyCode?: string;
    contextInfo?: ContextInfo;
    messageVersion?: number;
    orderRequestMessageId?: MessageKey;
}

export function readMessageOrderMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageOrderMessageField, {orderId: "" as string, thumbnail: undefined as unknown as Uint8Array, itemCount: 0 as number, status: 0 as MessageOrderMessageOrderStatus, surface: 0 as MessageOrderMessageOrderSurface, message: "" as string, orderTitle: "" as string, sellerJid: "" as string, token: "" as string, totalAmount1000: 0 as number, totalCurrencyCode: "" as string, contextInfo: undefined as unknown as ContextInfo, messageVersion: 0 as number, orderRequestMessageId: undefined as unknown as MessageKey}, end);
}
function readMessageOrderMessageField(tag: number, obj: MessageOrderMessage, pbf: Pbf) {
    if (tag === 1) obj.orderId = pbf.readString();
    else if (tag === 2) obj.thumbnail = pbf.readBytes();
    else if (tag === 3) obj.itemCount = pbf.readVarint(true);
    else if (tag === 4) obj.status = pbf.readVarint();
    else if (tag === 5) obj.surface = pbf.readVarint();
    else if (tag === 6) obj.message = pbf.readString();
    else if (tag === 7) obj.orderTitle = pbf.readString();
    else if (tag === 8) obj.sellerJid = pbf.readString();
    else if (tag === 9) obj.token = pbf.readString();
    else if (tag === 10) obj.totalAmount1000 = pbf.readVarint(true);
    else if (tag === 11) obj.totalCurrencyCode = pbf.readString();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 12) obj.messageVersion = pbf.readVarint(true);
    else if (tag === 13) obj.orderRequestMessageId = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageOrderMessage(obj: MessageOrderMessage, pbf: Pbf) {
    if (obj.orderId !== undefined) pbf.writeStringField(1, obj.orderId);
    if (obj.thumbnail != null) pbf.writeBytesField(2, obj.thumbnail);
    if (obj.itemCount !== undefined) pbf.writeVarintField(3, obj.itemCount);
    if (obj.status !== undefined) pbf.writeVarintField(4, obj.status);
    if (obj.surface !== undefined) pbf.writeVarintField(5, obj.surface);
    if (obj.message !== undefined) pbf.writeStringField(6, obj.message);
    if (obj.orderTitle !== undefined) pbf.writeStringField(7, obj.orderTitle);
    if (obj.sellerJid !== undefined) pbf.writeStringField(8, obj.sellerJid);
    if (obj.token !== undefined) pbf.writeStringField(9, obj.token);
    if (obj.totalAmount1000 !== undefined) pbf.writeVarintField(10, obj.totalAmount1000);
    if (obj.totalCurrencyCode !== undefined) pbf.writeStringField(11, obj.totalCurrencyCode);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
    if (obj.messageVersion !== undefined) pbf.writeVarintField(12, obj.messageVersion);
    if (obj.orderRequestMessageId) pbf.writeMessage(13, writeMessageKey, obj.orderRequestMessageId);
}

export enum MessageOrderMessageOrderStatus {
    INQUIRY = 1,
    ACCEPTED = 2,
    DECLINED = 3,
}

export enum MessageOrderMessageOrderSurface {
    CATALOG = 1,
}

export interface MessagePaymentInviteMessage {
    serviceType?: MessagePaymentInviteMessageServiceType;
    expiryTimestamp?: number;
}

export function readMessagePaymentInviteMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePaymentInviteMessageField, {serviceType: 0 as MessagePaymentInviteMessageServiceType, expiryTimestamp: 0 as number}, end);
}
function readMessagePaymentInviteMessageField(tag: number, obj: MessagePaymentInviteMessage, pbf: Pbf) {
    if (tag === 1) obj.serviceType = pbf.readVarint();
    else if (tag === 2) obj.expiryTimestamp = pbf.readVarint(true);
}
export function writeMessagePaymentInviteMessage(obj: MessagePaymentInviteMessage, pbf: Pbf) {
    if (obj.serviceType !== undefined) pbf.writeVarintField(1, obj.serviceType);
    if (obj.expiryTimestamp !== undefined) pbf.writeVarintField(2, obj.expiryTimestamp);
}

export enum MessagePaymentInviteMessageServiceType {
    UNKNOWN = 0,
    FBPAY = 1,
    NOVI = 2,
    UPI = 3,
}

export interface MessagePeerDataOperationRequestMessage {
    peerDataOperationRequestType?: MessagePeerDataOperationRequestType;
    requestStickerReupload?: MessagePeerDataOperationRequestMessageRequestStickerReupload[];
    requestUrlPreview?: MessagePeerDataOperationRequestMessageRequestUrlPreview[];
    historySyncOnDemandRequest?: MessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest;
    placeholderMessageResendRequest?: MessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest[];
}

export function readMessagePeerDataOperationRequestMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestMessageField, {peerDataOperationRequestType: 0 as MessagePeerDataOperationRequestType, requestStickerReupload: [] as MessagePeerDataOperationRequestMessageRequestStickerReupload[], requestUrlPreview: [] as MessagePeerDataOperationRequestMessageRequestUrlPreview[], historySyncOnDemandRequest: undefined as unknown as MessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest, placeholderMessageResendRequest: [] as MessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest[]}, end);
}
function readMessagePeerDataOperationRequestMessageField(tag: number, obj: MessagePeerDataOperationRequestMessage, pbf: Pbf) {
    if (tag === 1) obj.peerDataOperationRequestType = pbf.readVarint();
    else if (tag === 2) obj.requestStickerReupload?.push(readMessagePeerDataOperationRequestMessageRequestStickerReupload(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.requestUrlPreview?.push(readMessagePeerDataOperationRequestMessageRequestUrlPreview(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.historySyncOnDemandRequest = readMessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.placeholderMessageResendRequest?.push(readMessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessagePeerDataOperationRequestMessage(obj: MessagePeerDataOperationRequestMessage, pbf: Pbf) {
    if (obj.peerDataOperationRequestType !== undefined) pbf.writeVarintField(1, obj.peerDataOperationRequestType);
    if (obj.requestStickerReupload) for (const item of obj.requestStickerReupload) pbf.writeMessage(2, writeMessagePeerDataOperationRequestMessageRequestStickerReupload, item);
    if (obj.requestUrlPreview) for (const item of obj.requestUrlPreview) pbf.writeMessage(3, writeMessagePeerDataOperationRequestMessageRequestUrlPreview, item);
    if (obj.historySyncOnDemandRequest) pbf.writeMessage(4, writeMessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest, obj.historySyncOnDemandRequest);
    if (obj.placeholderMessageResendRequest) for (const item of obj.placeholderMessageResendRequest) pbf.writeMessage(5, writeMessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest, item);
}

export interface MessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest {
    chatJid?: string;
    oldestMsgId?: string;
    oldestMsgFromMe?: boolean;
    onDemandMsgCount?: number;
    oldestMsgTimestampMs?: number;
}

export function readMessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestMessageHistorySyncOnDemandRequestField, {chatJid: "" as string, oldestMsgId: "" as string, oldestMsgFromMe: false as boolean, onDemandMsgCount: 0 as number, oldestMsgTimestampMs: 0 as number}, end);
}
function readMessagePeerDataOperationRequestMessageHistorySyncOnDemandRequestField(tag: number, obj: MessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest, pbf: Pbf) {
    if (tag === 1) obj.chatJid = pbf.readString();
    else if (tag === 2) obj.oldestMsgId = pbf.readString();
    else if (tag === 3) obj.oldestMsgFromMe = pbf.readBoolean();
    else if (tag === 4) obj.onDemandMsgCount = pbf.readVarint(true);
    else if (tag === 5) obj.oldestMsgTimestampMs = pbf.readVarint(true);
}
export function writeMessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest(obj: MessagePeerDataOperationRequestMessageHistorySyncOnDemandRequest, pbf: Pbf) {
    if (obj.chatJid !== undefined) pbf.writeStringField(1, obj.chatJid);
    if (obj.oldestMsgId !== undefined) pbf.writeStringField(2, obj.oldestMsgId);
    if (obj.oldestMsgFromMe !== undefined) pbf.writeBooleanField(3, obj.oldestMsgFromMe);
    if (obj.onDemandMsgCount !== undefined) pbf.writeVarintField(4, obj.onDemandMsgCount);
    if (obj.oldestMsgTimestampMs !== undefined) pbf.writeVarintField(5, obj.oldestMsgTimestampMs);
}

export interface MessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest {
    messageKey?: MessageKey;
}

export function readMessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestMessagePlaceholderMessageResendRequestField, {messageKey: undefined as unknown as MessageKey}, end);
}
function readMessagePeerDataOperationRequestMessagePlaceholderMessageResendRequestField(tag: number, obj: MessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest, pbf: Pbf) {
    if (tag === 1) obj.messageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest(obj: MessagePeerDataOperationRequestMessagePlaceholderMessageResendRequest, pbf: Pbf) {
    if (obj.messageKey) pbf.writeMessage(1, writeMessageKey, obj.messageKey);
}

export interface MessagePeerDataOperationRequestMessageRequestStickerReupload {
    fileSha256?: string;
}

export function readMessagePeerDataOperationRequestMessageRequestStickerReupload(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestMessageRequestStickerReuploadField, {fileSha256: "" as string}, end);
}
function readMessagePeerDataOperationRequestMessageRequestStickerReuploadField(tag: number, obj: MessagePeerDataOperationRequestMessageRequestStickerReupload, pbf: Pbf) {
    if (tag === 1) obj.fileSha256 = pbf.readString();
}
export function writeMessagePeerDataOperationRequestMessageRequestStickerReupload(obj: MessagePeerDataOperationRequestMessageRequestStickerReupload, pbf: Pbf) {
    if (obj.fileSha256 !== undefined) pbf.writeStringField(1, obj.fileSha256);
}

export interface MessagePeerDataOperationRequestMessageRequestUrlPreview {
    url?: string;
    includeHqThumbnail?: boolean;
}

export function readMessagePeerDataOperationRequestMessageRequestUrlPreview(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestMessageRequestUrlPreviewField, {url: "" as string, includeHqThumbnail: false as boolean}, end);
}
function readMessagePeerDataOperationRequestMessageRequestUrlPreviewField(tag: number, obj: MessagePeerDataOperationRequestMessageRequestUrlPreview, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.includeHqThumbnail = pbf.readBoolean();
}
export function writeMessagePeerDataOperationRequestMessageRequestUrlPreview(obj: MessagePeerDataOperationRequestMessageRequestUrlPreview, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.includeHqThumbnail !== undefined) pbf.writeBooleanField(2, obj.includeHqThumbnail);
}

export interface MessagePeerDataOperationRequestResponseMessage {
    peerDataOperationRequestType?: MessagePeerDataOperationRequestType;
    stanzaId?: string;
    peerDataOperationResult?: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResult[];
}

export function readMessagePeerDataOperationRequestResponseMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestResponseMessageField, {peerDataOperationRequestType: 0 as MessagePeerDataOperationRequestType, stanzaId: "" as string, peerDataOperationResult: [] as MessagePeerDataOperationRequestResponseMessagePeerDataOperationResult[]}, end);
}
function readMessagePeerDataOperationRequestResponseMessageField(tag: number, obj: MessagePeerDataOperationRequestResponseMessage, pbf: Pbf) {
    if (tag === 1) obj.peerDataOperationRequestType = pbf.readVarint();
    else if (tag === 2) obj.stanzaId = pbf.readString();
    else if (tag === 3) obj.peerDataOperationResult?.push(readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResult(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessagePeerDataOperationRequestResponseMessage(obj: MessagePeerDataOperationRequestResponseMessage, pbf: Pbf) {
    if (obj.peerDataOperationRequestType !== undefined) pbf.writeVarintField(1, obj.peerDataOperationRequestType);
    if (obj.stanzaId !== undefined) pbf.writeStringField(2, obj.stanzaId);
    if (obj.peerDataOperationResult) for (const item of obj.peerDataOperationResult) pbf.writeMessage(3, writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResult, item);
}

export interface MessagePeerDataOperationRequestResponseMessagePeerDataOperationResult {
    mediaUploadResult?: MediaRetryNotificationResultType;
    stickerMessage?: MessageStickerMessage;
    linkPreviewResponse?: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse;
    placeholderMessageResendResponse?: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse;
}

export function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResult(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultField, {mediaUploadResult: 0 as MediaRetryNotificationResultType, stickerMessage: undefined as unknown as MessageStickerMessage, linkPreviewResponse: undefined as unknown as MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse, placeholderMessageResendResponse: undefined as unknown as MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse}, end);
}
function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultField(tag: number, obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResult, pbf: Pbf) {
    if (tag === 1) obj.mediaUploadResult = pbf.readVarint();
    else if (tag === 2) obj.stickerMessage = readMessageStickerMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.linkPreviewResponse = readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.placeholderMessageResendResponse = readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResult(obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResult, pbf: Pbf) {
    if (obj.mediaUploadResult !== undefined) pbf.writeVarintField(1, obj.mediaUploadResult);
    if (obj.stickerMessage) pbf.writeMessage(2, writeMessageStickerMessage, obj.stickerMessage);
    if (obj.linkPreviewResponse) pbf.writeMessage(3, writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse, obj.linkPreviewResponse);
    if (obj.placeholderMessageResendResponse) pbf.writeMessage(4, writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse, obj.placeholderMessageResendResponse);
}

export interface MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse {
    url?: string;
    title?: string;
    description?: string;
    thumbData?: Uint8Array;
    canonicalUrl?: string;
    matchText?: string;
    previewType?: string;
    hqThumbnail?: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail;
}

export function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseField, {url: "" as string, title: "" as string, description: "" as string, thumbData: undefined as unknown as Uint8Array, canonicalUrl: "" as string, matchText: "" as string, previewType: "" as string, hqThumbnail: undefined as unknown as MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail}, end);
}
function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseField(tag: number, obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.title = pbf.readString();
    else if (tag === 3) obj.description = pbf.readString();
    else if (tag === 4) obj.thumbData = pbf.readBytes();
    else if (tag === 5) obj.canonicalUrl = pbf.readString();
    else if (tag === 6) obj.matchText = pbf.readString();
    else if (tag === 7) obj.previewType = pbf.readString();
    else if (tag === 8) obj.hqThumbnail = readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse(obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponse, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.title !== undefined) pbf.writeStringField(2, obj.title);
    if (obj.description !== undefined) pbf.writeStringField(3, obj.description);
    if (obj.thumbData != null) pbf.writeBytesField(4, obj.thumbData);
    if (obj.canonicalUrl !== undefined) pbf.writeStringField(5, obj.canonicalUrl);
    if (obj.matchText !== undefined) pbf.writeStringField(6, obj.matchText);
    if (obj.previewType !== undefined) pbf.writeStringField(7, obj.previewType);
    if (obj.hqThumbnail) pbf.writeMessage(8, writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail, obj.hqThumbnail);
}

export interface MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail {
    directPath?: string;
    thumbHash?: string;
    encThumbHash?: string;
    mediaKey?: Uint8Array;
    mediaKeyTimestampMs?: number;
    thumbWidth?: number;
    thumbHeight?: number;
}

export function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnailField, {directPath: "" as string, thumbHash: "" as string, encThumbHash: "" as string, mediaKey: undefined as unknown as Uint8Array, mediaKeyTimestampMs: 0 as number, thumbWidth: 0 as number, thumbHeight: 0 as number}, end);
}
function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnailField(tag: number, obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail, pbf: Pbf) {
    if (tag === 1) obj.directPath = pbf.readString();
    else if (tag === 2) obj.thumbHash = pbf.readString();
    else if (tag === 3) obj.encThumbHash = pbf.readString();
    else if (tag === 4) obj.mediaKey = pbf.readBytes();
    else if (tag === 5) obj.mediaKeyTimestampMs = pbf.readVarint(true);
    else if (tag === 6) obj.thumbWidth = pbf.readVarint(true);
    else if (tag === 7) obj.thumbHeight = pbf.readVarint(true);
}
export function writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail(obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultLinkPreviewResponseLinkPreviewHighQualityThumbnail, pbf: Pbf) {
    if (obj.directPath !== undefined) pbf.writeStringField(1, obj.directPath);
    if (obj.thumbHash !== undefined) pbf.writeStringField(2, obj.thumbHash);
    if (obj.encThumbHash !== undefined) pbf.writeStringField(3, obj.encThumbHash);
    if (obj.mediaKey != null) pbf.writeBytesField(4, obj.mediaKey);
    if (obj.mediaKeyTimestampMs !== undefined) pbf.writeVarintField(5, obj.mediaKeyTimestampMs);
    if (obj.thumbWidth !== undefined) pbf.writeVarintField(6, obj.thumbWidth);
    if (obj.thumbHeight !== undefined) pbf.writeVarintField(7, obj.thumbHeight);
}

export interface MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse {
    webMessageInfoBytes?: Uint8Array;
}

export function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponseField, {webMessageInfoBytes: undefined as unknown as Uint8Array}, end);
}
function readMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponseField(tag: number, obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse, pbf: Pbf) {
    if (tag === 1) obj.webMessageInfoBytes = pbf.readBytes();
}
export function writeMessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse(obj: MessagePeerDataOperationRequestResponseMessagePeerDataOperationResultPlaceholderMessageResendResponse, pbf: Pbf) {
    if (obj.webMessageInfoBytes != null) pbf.writeBytesField(1, obj.webMessageInfoBytes);
}

export interface MessagePinInChatMessage {
    key?: MessageKey;
    type?: MessagePinInChatMessageType;
    senderTimestampMs?: number;
}

export function readMessagePinInChatMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePinInChatMessageField, {key: undefined as unknown as MessageKey, type: 0 as MessagePinInChatMessageType, senderTimestampMs: 0 as number}, end);
}
function readMessagePinInChatMessageField(tag: number, obj: MessagePinInChatMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.type = pbf.readVarint();
    else if (tag === 3) obj.senderTimestampMs = pbf.readVarint(true);
}
export function writeMessagePinInChatMessage(obj: MessagePinInChatMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.type !== undefined) pbf.writeVarintField(2, obj.type);
    if (obj.senderTimestampMs !== undefined) pbf.writeVarintField(3, obj.senderTimestampMs);
}

export enum MessagePinInChatMessageType {
    UNKNOWN_TYPE = 0,
    PIN_FOR_ALL = 1,
    UNPIN_FOR_ALL = 2,
}

export interface MessagePlaceholderMessage {
    type?: MessagePlaceholderMessagePlaceholderType;
}

export function readMessagePlaceholderMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePlaceholderMessageField, {type: 0 as MessagePlaceholderMessagePlaceholderType}, end);
}
function readMessagePlaceholderMessageField(tag: number, obj: MessagePlaceholderMessage, pbf: Pbf) {
    if (tag === 1) obj.type = pbf.readVarint();
}
export function writeMessagePlaceholderMessage(obj: MessagePlaceholderMessage, pbf: Pbf) {
    if (obj.type !== undefined) pbf.writeVarintField(1, obj.type);
}

export enum MessagePlaceholderMessagePlaceholderType {
    MASK_LINKED_DEVICES = 0,
}

export interface MessagePollCreationMessage {
    encKey?: Uint8Array;
    name?: string;
    options?: MessagePollCreationMessageOption[];
    selectableOptionsCount?: number;
    contextInfo?: ContextInfo;
}

export function readMessagePollCreationMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePollCreationMessageField, {encKey: undefined as unknown as Uint8Array, name: "" as string, options: [] as MessagePollCreationMessageOption[], selectableOptionsCount: 0 as number, contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessagePollCreationMessageField(tag: number, obj: MessagePollCreationMessage, pbf: Pbf) {
    if (tag === 1) obj.encKey = pbf.readBytes();
    else if (tag === 2) obj.name = pbf.readString();
    else if (tag === 3) obj.options?.push(readMessagePollCreationMessageOption(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.selectableOptionsCount = pbf.readVarint();
    else if (tag === 5) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessagePollCreationMessage(obj: MessagePollCreationMessage, pbf: Pbf) {
    if (obj.encKey != null) pbf.writeBytesField(1, obj.encKey);
    if (obj.name !== undefined) pbf.writeStringField(2, obj.name);
    if (obj.options) for (const item of obj.options) pbf.writeMessage(3, writeMessagePollCreationMessageOption, item);
    if (obj.selectableOptionsCount !== undefined) pbf.writeVarintField(4, obj.selectableOptionsCount);
    if (obj.contextInfo) pbf.writeMessage(5, writeContextInfo, obj.contextInfo);
}

export interface MessagePollCreationMessageOption {
    optionName?: string;
}

export function readMessagePollCreationMessageOption(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePollCreationMessageOptionField, {optionName: "" as string}, end);
}
function readMessagePollCreationMessageOptionField(tag: number, obj: MessagePollCreationMessageOption, pbf: Pbf) {
    if (tag === 1) obj.optionName = pbf.readString();
}
export function writeMessagePollCreationMessageOption(obj: MessagePollCreationMessageOption, pbf: Pbf) {
    if (obj.optionName !== undefined) pbf.writeStringField(1, obj.optionName);
}

export interface MessagePollEncValue {
    encPayload?: Uint8Array;
    encIv?: Uint8Array;
}

export function readMessagePollEncValue(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePollEncValueField, {encPayload: undefined as unknown as Uint8Array, encIv: undefined as unknown as Uint8Array}, end);
}
function readMessagePollEncValueField(tag: number, obj: MessagePollEncValue, pbf: Pbf) {
    if (tag === 1) obj.encPayload = pbf.readBytes();
    else if (tag === 2) obj.encIv = pbf.readBytes();
}
export function writeMessagePollEncValue(obj: MessagePollEncValue, pbf: Pbf) {
    if (obj.encPayload != null) pbf.writeBytesField(1, obj.encPayload);
    if (obj.encIv != null) pbf.writeBytesField(2, obj.encIv);
}

export interface MessagePollUpdateMessage {
    pollCreationMessageKey?: MessageKey;
    vote?: MessagePollEncValue;
    metadata?: MessagePollUpdateMessageMetadata;
    senderTimestampMs?: number;
}

export function readMessagePollUpdateMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePollUpdateMessageField, {pollCreationMessageKey: undefined as unknown as MessageKey, vote: undefined as unknown as MessagePollEncValue, metadata: undefined as unknown as MessagePollUpdateMessageMetadata, senderTimestampMs: 0 as number}, end);
}
function readMessagePollUpdateMessageField(tag: number, obj: MessagePollUpdateMessage, pbf: Pbf) {
    if (tag === 1) obj.pollCreationMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.vote = readMessagePollEncValue(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.metadata = readMessagePollUpdateMessageMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.senderTimestampMs = pbf.readVarint(true);
}
export function writeMessagePollUpdateMessage(obj: MessagePollUpdateMessage, pbf: Pbf) {
    if (obj.pollCreationMessageKey) pbf.writeMessage(1, writeMessageKey, obj.pollCreationMessageKey);
    if (obj.vote) pbf.writeMessage(2, writeMessagePollEncValue, obj.vote);
    if (obj.metadata) pbf.writeMessage(3, writeMessagePollUpdateMessageMetadata, obj.metadata);
    if (obj.senderTimestampMs !== undefined) pbf.writeVarintField(4, obj.senderTimestampMs);
}

export interface MessagePollUpdateMessageMetadata {
}

export function readMessagePollUpdateMessageMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePollUpdateMessageMetadataField, {}, end);
}
function readMessagePollUpdateMessageMetadataField(tag: number, obj: MessagePollUpdateMessageMetadata, pbf: Pbf) {
}
export function writeMessagePollUpdateMessageMetadata(obj: MessagePollUpdateMessageMetadata, pbf: Pbf) {
}

export interface MessagePollVoteMessage {
    selectedOptions?: Uint8Array[];
}

export function readMessagePollVoteMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessagePollVoteMessageField, {selectedOptions: [] as Uint8Array[]}, end);
}
function readMessagePollVoteMessageField(tag: number, obj: MessagePollVoteMessage, pbf: Pbf) {
    if (tag === 1) obj.selectedOptions?.push(pbf.readBytes());
}
export function writeMessagePollVoteMessage(obj: MessagePollVoteMessage, pbf: Pbf) {
    if (obj.selectedOptions) for (const item of obj.selectedOptions) pbf.writeBytesField(1, item);
}

export interface MessageProductMessage {
    product?: MessageProductMessageProductSnapshot;
    businessOwnerJid?: string;
    catalog?: MessageProductMessageCatalogSnapshot;
    body?: string;
    footer?: string;
    contextInfo?: ContextInfo;
}

export function readMessageProductMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageProductMessageField, {product: undefined as unknown as MessageProductMessageProductSnapshot, businessOwnerJid: "" as string, catalog: undefined as unknown as MessageProductMessageCatalogSnapshot, body: "" as string, footer: "" as string, contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessageProductMessageField(tag: number, obj: MessageProductMessage, pbf: Pbf) {
    if (tag === 1) obj.product = readMessageProductMessageProductSnapshot(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.businessOwnerJid = pbf.readString();
    else if (tag === 4) obj.catalog = readMessageProductMessageCatalogSnapshot(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.body = pbf.readString();
    else if (tag === 6) obj.footer = pbf.readString();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageProductMessage(obj: MessageProductMessage, pbf: Pbf) {
    if (obj.product) pbf.writeMessage(1, writeMessageProductMessageProductSnapshot, obj.product);
    if (obj.businessOwnerJid !== undefined) pbf.writeStringField(2, obj.businessOwnerJid);
    if (obj.catalog) pbf.writeMessage(4, writeMessageProductMessageCatalogSnapshot, obj.catalog);
    if (obj.body !== undefined) pbf.writeStringField(5, obj.body);
    if (obj.footer !== undefined) pbf.writeStringField(6, obj.footer);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
}

export interface MessageProductMessageCatalogSnapshot {
    catalogImage?: MessageImageMessage;
    title?: string;
    description?: string;
}

export function readMessageProductMessageCatalogSnapshot(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageProductMessageCatalogSnapshotField, {catalogImage: undefined as unknown as MessageImageMessage, title: "" as string, description: "" as string}, end);
}
function readMessageProductMessageCatalogSnapshotField(tag: number, obj: MessageProductMessageCatalogSnapshot, pbf: Pbf) {
    if (tag === 1) obj.catalogImage = readMessageImageMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.title = pbf.readString();
    else if (tag === 3) obj.description = pbf.readString();
}
export function writeMessageProductMessageCatalogSnapshot(obj: MessageProductMessageCatalogSnapshot, pbf: Pbf) {
    if (obj.catalogImage) pbf.writeMessage(1, writeMessageImageMessage, obj.catalogImage);
    if (obj.title !== undefined) pbf.writeStringField(2, obj.title);
    if (obj.description !== undefined) pbf.writeStringField(3, obj.description);
}

export interface MessageProductMessageProductSnapshot {
    productImage?: MessageImageMessage;
    productId?: string;
    title?: string;
    description?: string;
    currencyCode?: string;
    priceAmount1000?: number;
    retailerId?: string;
    url?: string;
    productImageCount?: number;
    firstImageId?: string;
    salePriceAmount1000?: number;
}

export function readMessageProductMessageProductSnapshot(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageProductMessageProductSnapshotField, {productImage: undefined as unknown as MessageImageMessage, productId: "" as string, title: "" as string, description: "" as string, currencyCode: "" as string, priceAmount1000: 0 as number, retailerId: "" as string, url: "" as string, productImageCount: 0 as number, firstImageId: "" as string, salePriceAmount1000: 0 as number}, end);
}
function readMessageProductMessageProductSnapshotField(tag: number, obj: MessageProductMessageProductSnapshot, pbf: Pbf) {
    if (tag === 1) obj.productImage = readMessageImageMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.productId = pbf.readString();
    else if (tag === 3) obj.title = pbf.readString();
    else if (tag === 4) obj.description = pbf.readString();
    else if (tag === 5) obj.currencyCode = pbf.readString();
    else if (tag === 6) obj.priceAmount1000 = pbf.readVarint(true);
    else if (tag === 7) obj.retailerId = pbf.readString();
    else if (tag === 8) obj.url = pbf.readString();
    else if (tag === 9) obj.productImageCount = pbf.readVarint();
    else if (tag === 11) obj.firstImageId = pbf.readString();
    else if (tag === 12) obj.salePriceAmount1000 = pbf.readVarint(true);
}
export function writeMessageProductMessageProductSnapshot(obj: MessageProductMessageProductSnapshot, pbf: Pbf) {
    if (obj.productImage) pbf.writeMessage(1, writeMessageImageMessage, obj.productImage);
    if (obj.productId !== undefined) pbf.writeStringField(2, obj.productId);
    if (obj.title !== undefined) pbf.writeStringField(3, obj.title);
    if (obj.description !== undefined) pbf.writeStringField(4, obj.description);
    if (obj.currencyCode !== undefined) pbf.writeStringField(5, obj.currencyCode);
    if (obj.priceAmount1000 !== undefined) pbf.writeVarintField(6, obj.priceAmount1000);
    if (obj.retailerId !== undefined) pbf.writeStringField(7, obj.retailerId);
    if (obj.url !== undefined) pbf.writeStringField(8, obj.url);
    if (obj.productImageCount !== undefined) pbf.writeVarintField(9, obj.productImageCount);
    if (obj.firstImageId !== undefined) pbf.writeStringField(11, obj.firstImageId);
    if (obj.salePriceAmount1000 !== undefined) pbf.writeVarintField(12, obj.salePriceAmount1000);
}

export interface MessageProtocolMessage {
    key?: MessageKey;
    type?: MessageProtocolMessageType;
    ephemeralExpiration?: number;
    ephemeralSettingTimestamp?: number;
    historySyncNotification?: MessageHistorySyncNotification;
    appStateSyncKeyShare?: MessageAppStateSyncKeyShare;
    appStateSyncKeyRequest?: MessageAppStateSyncKeyRequest;
    initialSecurityNotificationSettingSync?: MessageInitialSecurityNotificationSettingSync;
    appStateFatalExceptionNotification?: MessageAppStateFatalExceptionNotification;
    disappearingMode?: DisappearingMode;
    editedMessage?: Message;
    timestampMs?: number;
    peerDataOperationRequestMessage?: MessagePeerDataOperationRequestMessage;
    peerDataOperationRequestResponseMessage?: MessagePeerDataOperationRequestResponseMessage;
    botFeedbackMessage?: MessageBotFeedbackMessage;
    invokerJid?: string;
    requestWelcomeMessageMetadata?: MessageRequestWelcomeMessageMetadata;
    mediaNotifyMessage?: MediaNotifyMessage;
}

export function readMessageProtocolMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageProtocolMessageField, {key: undefined as unknown as MessageKey, type: 0 as MessageProtocolMessageType, ephemeralExpiration: 0 as number, ephemeralSettingTimestamp: 0 as number, historySyncNotification: undefined as unknown as MessageHistorySyncNotification, appStateSyncKeyShare: undefined as unknown as MessageAppStateSyncKeyShare, appStateSyncKeyRequest: undefined as unknown as MessageAppStateSyncKeyRequest, initialSecurityNotificationSettingSync: undefined as unknown as MessageInitialSecurityNotificationSettingSync, appStateFatalExceptionNotification: undefined as unknown as MessageAppStateFatalExceptionNotification, disappearingMode: undefined as unknown as DisappearingMode, editedMessage: undefined as unknown as Message, timestampMs: 0 as number, peerDataOperationRequestMessage: undefined as unknown as MessagePeerDataOperationRequestMessage, peerDataOperationRequestResponseMessage: undefined as unknown as MessagePeerDataOperationRequestResponseMessage, botFeedbackMessage: undefined as unknown as MessageBotFeedbackMessage, invokerJid: "" as string, requestWelcomeMessageMetadata: undefined as unknown as MessageRequestWelcomeMessageMetadata, mediaNotifyMessage: undefined as unknown as MediaNotifyMessage}, end);
}
function readMessageProtocolMessageField(tag: number, obj: MessageProtocolMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.type = pbf.readVarint();
    else if (tag === 4) obj.ephemeralExpiration = pbf.readVarint();
    else if (tag === 5) obj.ephemeralSettingTimestamp = pbf.readVarint(true);
    else if (tag === 6) obj.historySyncNotification = readMessageHistorySyncNotification(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.appStateSyncKeyShare = readMessageAppStateSyncKeyShare(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.appStateSyncKeyRequest = readMessageAppStateSyncKeyRequest(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.initialSecurityNotificationSettingSync = readMessageInitialSecurityNotificationSettingSync(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.appStateFatalExceptionNotification = readMessageAppStateFatalExceptionNotification(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 11) obj.disappearingMode = readDisappearingMode(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 14) obj.editedMessage = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 15) obj.timestampMs = pbf.readVarint(true);
    else if (tag === 16) obj.peerDataOperationRequestMessage = readMessagePeerDataOperationRequestMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 17) obj.peerDataOperationRequestResponseMessage = readMessagePeerDataOperationRequestResponseMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.botFeedbackMessage = readMessageBotFeedbackMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 19) obj.invokerJid = pbf.readString();
    else if (tag === 20) obj.requestWelcomeMessageMetadata = readMessageRequestWelcomeMessageMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 21) obj.mediaNotifyMessage = readMediaNotifyMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageProtocolMessage(obj: MessageProtocolMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.type !== undefined) pbf.writeVarintField(2, obj.type);
    if (obj.ephemeralExpiration !== undefined) pbf.writeVarintField(4, obj.ephemeralExpiration);
    if (obj.ephemeralSettingTimestamp !== undefined) pbf.writeVarintField(5, obj.ephemeralSettingTimestamp);
    if (obj.historySyncNotification) pbf.writeMessage(6, writeMessageHistorySyncNotification, obj.historySyncNotification);
    if (obj.appStateSyncKeyShare) pbf.writeMessage(7, writeMessageAppStateSyncKeyShare, obj.appStateSyncKeyShare);
    if (obj.appStateSyncKeyRequest) pbf.writeMessage(8, writeMessageAppStateSyncKeyRequest, obj.appStateSyncKeyRequest);
    if (obj.initialSecurityNotificationSettingSync) pbf.writeMessage(9, writeMessageInitialSecurityNotificationSettingSync, obj.initialSecurityNotificationSettingSync);
    if (obj.appStateFatalExceptionNotification) pbf.writeMessage(10, writeMessageAppStateFatalExceptionNotification, obj.appStateFatalExceptionNotification);
    if (obj.disappearingMode) pbf.writeMessage(11, writeDisappearingMode, obj.disappearingMode);
    if (obj.editedMessage) pbf.writeMessage(14, writeMessage, obj.editedMessage);
    if (obj.timestampMs !== undefined) pbf.writeVarintField(15, obj.timestampMs);
    if (obj.peerDataOperationRequestMessage) pbf.writeMessage(16, writeMessagePeerDataOperationRequestMessage, obj.peerDataOperationRequestMessage);
    if (obj.peerDataOperationRequestResponseMessage) pbf.writeMessage(17, writeMessagePeerDataOperationRequestResponseMessage, obj.peerDataOperationRequestResponseMessage);
    if (obj.botFeedbackMessage) pbf.writeMessage(18, writeMessageBotFeedbackMessage, obj.botFeedbackMessage);
    if (obj.invokerJid !== undefined) pbf.writeStringField(19, obj.invokerJid);
    if (obj.requestWelcomeMessageMetadata) pbf.writeMessage(20, writeMessageRequestWelcomeMessageMetadata, obj.requestWelcomeMessageMetadata);
    if (obj.mediaNotifyMessage) pbf.writeMessage(21, writeMediaNotifyMessage, obj.mediaNotifyMessage);
}

export enum MessageProtocolMessageType {
    REVOKE = 0,
    EPHEMERAL_SETTING = 3,
    EPHEMERAL_SYNC_RESPONSE = 4,
    HISTORY_SYNC_NOTIFICATION = 5,
    APP_STATE_SYNC_KEY_SHARE = 6,
    APP_STATE_SYNC_KEY_REQUEST = 7,
    MSG_FANOUT_BACKFILL_REQUEST = 8,
    INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC = 9,
    APP_STATE_FATAL_EXCEPTION_NOTIFICATION = 10,
    SHARE_PHONE_NUMBER = 11,
    MESSAGE_EDIT = 14,
    PEER_DATA_OPERATION_REQUEST_MESSAGE = 16,
    PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE = 17,
    REQUEST_WELCOME_MESSAGE = 18,
    BOT_FEEDBACK_MESSAGE = 19,
    MEDIA_NOTIFY_MESSAGE = 20,
}

export interface MessageReactionMessage {
    key?: MessageKey;
    text?: string;
    groupingKey?: string;
    senderTimestampMs?: number;
}

export function readMessageReactionMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageReactionMessageField, {key: undefined as unknown as MessageKey, text: "" as string, groupingKey: "" as string, senderTimestampMs: 0 as number}, end);
}
function readMessageReactionMessageField(tag: number, obj: MessageReactionMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.text = pbf.readString();
    else if (tag === 3) obj.groupingKey = pbf.readString();
    else if (tag === 4) obj.senderTimestampMs = pbf.readVarint(true);
}
export function writeMessageReactionMessage(obj: MessageReactionMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.text !== undefined) pbf.writeStringField(2, obj.text);
    if (obj.groupingKey !== undefined) pbf.writeStringField(3, obj.groupingKey);
    if (obj.senderTimestampMs !== undefined) pbf.writeVarintField(4, obj.senderTimestampMs);
}

export interface MessageRequestPaymentMessage {
    noteMessage?: Message;
    currencyCodeIso4217?: string;
    amount1000?: number;
    requestFrom?: string;
    expiryTimestamp?: number;
    amount?: Money;
    background?: PaymentBackground;
}

export function readMessageRequestPaymentMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageRequestPaymentMessageField, {noteMessage: undefined as unknown as Message, currencyCodeIso4217: "" as string, amount1000: 0 as number, requestFrom: "" as string, expiryTimestamp: 0 as number, amount: undefined as unknown as Money, background: undefined as unknown as PaymentBackground}, end);
}
function readMessageRequestPaymentMessageField(tag: number, obj: MessageRequestPaymentMessage, pbf: Pbf) {
    if (tag === 4) obj.noteMessage = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 1) obj.currencyCodeIso4217 = pbf.readString();
    else if (tag === 2) obj.amount1000 = pbf.readVarint();
    else if (tag === 3) obj.requestFrom = pbf.readString();
    else if (tag === 5) obj.expiryTimestamp = pbf.readVarint(true);
    else if (tag === 6) obj.amount = readMoney(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.background = readPaymentBackground(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageRequestPaymentMessage(obj: MessageRequestPaymentMessage, pbf: Pbf) {
    if (obj.noteMessage) pbf.writeMessage(4, writeMessage, obj.noteMessage);
    if (obj.currencyCodeIso4217 !== undefined) pbf.writeStringField(1, obj.currencyCodeIso4217);
    if (obj.amount1000 !== undefined) pbf.writeVarintField(2, obj.amount1000);
    if (obj.requestFrom !== undefined) pbf.writeStringField(3, obj.requestFrom);
    if (obj.expiryTimestamp !== undefined) pbf.writeVarintField(5, obj.expiryTimestamp);
    if (obj.amount) pbf.writeMessage(6, writeMoney, obj.amount);
    if (obj.background) pbf.writeMessage(7, writePaymentBackground, obj.background);
}

export interface MessageRequestPhoneNumberMessage {
    contextInfo?: ContextInfo;
}

export function readMessageRequestPhoneNumberMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageRequestPhoneNumberMessageField, {contextInfo: undefined as unknown as ContextInfo}, end);
}
function readMessageRequestPhoneNumberMessageField(tag: number, obj: MessageRequestPhoneNumberMessage, pbf: Pbf) {
    if (tag === 1) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageRequestPhoneNumberMessage(obj: MessageRequestPhoneNumberMessage, pbf: Pbf) {
    if (obj.contextInfo) pbf.writeMessage(1, writeContextInfo, obj.contextInfo);
}

export interface MessageRequestWelcomeMessageMetadata {
    localChatState?: MessageRequestWelcomeMessageMetadataLocalChatState;
}

export function readMessageRequestWelcomeMessageMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageRequestWelcomeMessageMetadataField, {localChatState: 0 as MessageRequestWelcomeMessageMetadataLocalChatState}, end);
}
function readMessageRequestWelcomeMessageMetadataField(tag: number, obj: MessageRequestWelcomeMessageMetadata, pbf: Pbf) {
    if (tag === 1) obj.localChatState = pbf.readVarint();
}
export function writeMessageRequestWelcomeMessageMetadata(obj: MessageRequestWelcomeMessageMetadata, pbf: Pbf) {
    if (obj.localChatState !== undefined) pbf.writeVarintField(1, obj.localChatState);
}

export enum MessageRequestWelcomeMessageMetadataLocalChatState {
    EMPTY = 0,
    NON_EMPTY = 1,
}

export interface MessageScheduledCallCreationMessage {
    scheduledTimestampMs?: number;
    callType?: MessageScheduledCallCreationMessageCallType;
    title?: string;
}

export function readMessageScheduledCallCreationMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageScheduledCallCreationMessageField, {scheduledTimestampMs: 0 as number, callType: 0 as MessageScheduledCallCreationMessageCallType, title: "" as string}, end);
}
function readMessageScheduledCallCreationMessageField(tag: number, obj: MessageScheduledCallCreationMessage, pbf: Pbf) {
    if (tag === 1) obj.scheduledTimestampMs = pbf.readVarint(true);
    else if (tag === 2) obj.callType = pbf.readVarint();
    else if (tag === 3) obj.title = pbf.readString();
}
export function writeMessageScheduledCallCreationMessage(obj: MessageScheduledCallCreationMessage, pbf: Pbf) {
    if (obj.scheduledTimestampMs !== undefined) pbf.writeVarintField(1, obj.scheduledTimestampMs);
    if (obj.callType !== undefined) pbf.writeVarintField(2, obj.callType);
    if (obj.title !== undefined) pbf.writeStringField(3, obj.title);
}

export enum MessageScheduledCallCreationMessageCallType {
    UNKNOWN = 0,
    VOICE = 1,
    VIDEO = 2,
}

export interface MessageScheduledCallEditMessage {
    key?: MessageKey;
    editType?: MessageScheduledCallEditMessageEditType;
}

export function readMessageScheduledCallEditMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageScheduledCallEditMessageField, {key: undefined as unknown as MessageKey, editType: 0 as MessageScheduledCallEditMessageEditType}, end);
}
function readMessageScheduledCallEditMessageField(tag: number, obj: MessageScheduledCallEditMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.editType = pbf.readVarint();
}
export function writeMessageScheduledCallEditMessage(obj: MessageScheduledCallEditMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.editType !== undefined) pbf.writeVarintField(2, obj.editType);
}

export enum MessageScheduledCallEditMessageEditType {
    UNKNOWN = 0,
    CANCEL = 1,
}

export interface MessageSendPaymentMessage {
    noteMessage?: Message;
    requestMessageKey?: MessageKey;
    background?: PaymentBackground;
}

export function readMessageSendPaymentMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageSendPaymentMessageField, {noteMessage: undefined as unknown as Message, requestMessageKey: undefined as unknown as MessageKey, background: undefined as unknown as PaymentBackground}, end);
}
function readMessageSendPaymentMessageField(tag: number, obj: MessageSendPaymentMessage, pbf: Pbf) {
    if (tag === 2) obj.noteMessage = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.requestMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.background = readPaymentBackground(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMessageSendPaymentMessage(obj: MessageSendPaymentMessage, pbf: Pbf) {
    if (obj.noteMessage) pbf.writeMessage(2, writeMessage, obj.noteMessage);
    if (obj.requestMessageKey) pbf.writeMessage(3, writeMessageKey, obj.requestMessageKey);
    if (obj.background) pbf.writeMessage(4, writePaymentBackground, obj.background);
}

export interface MessageSenderKeyDistributionMessage {
    groupId?: string;
    axolotlSenderKeyDistributionMessage?: Uint8Array;
}

export function readMessageSenderKeyDistributionMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageSenderKeyDistributionMessageField, {groupId: "" as string, axolotlSenderKeyDistributionMessage: undefined as unknown as Uint8Array}, end);
}
function readMessageSenderKeyDistributionMessageField(tag: number, obj: MessageSenderKeyDistributionMessage, pbf: Pbf) {
    if (tag === 1) obj.groupId = pbf.readString();
    else if (tag === 2) obj.axolotlSenderKeyDistributionMessage = pbf.readBytes();
}
export function writeMessageSenderKeyDistributionMessage(obj: MessageSenderKeyDistributionMessage, pbf: Pbf) {
    if (obj.groupId !== undefined) pbf.writeStringField(1, obj.groupId);
    if (obj.axolotlSenderKeyDistributionMessage != null) pbf.writeBytesField(2, obj.axolotlSenderKeyDistributionMessage);
}

export interface MessageStickerMessage {
    url?: string;
    fileSha256?: Uint8Array;
    fileEncSha256?: Uint8Array;
    mediaKey?: Uint8Array;
    mimetype?: string;
    height?: number;
    width?: number;
    directPath?: string;
    fileLength?: number;
    mediaKeyTimestamp?: number;
    firstFrameLength?: number;
    firstFrameSidecar?: Uint8Array;
    isAnimated?: boolean;
    pngThumbnail?: Uint8Array;
    contextInfo?: ContextInfo;
    stickerSentTs?: number;
    isAvatar?: boolean;
    isAiSticker?: boolean;
    isLottie?: boolean;
}

export function readMessageStickerMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageStickerMessageField, {url: "" as string, fileSha256: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, mediaKey: undefined as unknown as Uint8Array, mimetype: "" as string, height: 0 as number, width: 0 as number, directPath: "" as string, fileLength: 0 as number, mediaKeyTimestamp: 0 as number, firstFrameLength: 0 as number, firstFrameSidecar: undefined as unknown as Uint8Array, isAnimated: false as boolean, pngThumbnail: undefined as unknown as Uint8Array, contextInfo: undefined as unknown as ContextInfo, stickerSentTs: 0 as number, isAvatar: false as boolean, isAiSticker: false as boolean, isLottie: false as boolean}, end);
}
function readMessageStickerMessageField(tag: number, obj: MessageStickerMessage, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.fileSha256 = pbf.readBytes();
    else if (tag === 3) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 4) obj.mediaKey = pbf.readBytes();
    else if (tag === 5) obj.mimetype = pbf.readString();
    else if (tag === 6) obj.height = pbf.readVarint();
    else if (tag === 7) obj.width = pbf.readVarint();
    else if (tag === 8) obj.directPath = pbf.readString();
    else if (tag === 9) obj.fileLength = pbf.readVarint();
    else if (tag === 10) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 11) obj.firstFrameLength = pbf.readVarint();
    else if (tag === 12) obj.firstFrameSidecar = pbf.readBytes();
    else if (tag === 13) obj.isAnimated = pbf.readBoolean();
    else if (tag === 16) obj.pngThumbnail = pbf.readBytes();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.stickerSentTs = pbf.readVarint(true);
    else if (tag === 19) obj.isAvatar = pbf.readBoolean();
    else if (tag === 20) obj.isAiSticker = pbf.readBoolean();
    else if (tag === 21) obj.isLottie = pbf.readBoolean();
}
export function writeMessageStickerMessage(obj: MessageStickerMessage, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.fileSha256 != null) pbf.writeBytesField(2, obj.fileSha256);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(3, obj.fileEncSha256);
    if (obj.mediaKey != null) pbf.writeBytesField(4, obj.mediaKey);
    if (obj.mimetype !== undefined) pbf.writeStringField(5, obj.mimetype);
    if (obj.height !== undefined) pbf.writeVarintField(6, obj.height);
    if (obj.width !== undefined) pbf.writeVarintField(7, obj.width);
    if (obj.directPath !== undefined) pbf.writeStringField(8, obj.directPath);
    if (obj.fileLength !== undefined) pbf.writeVarintField(9, obj.fileLength);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(10, obj.mediaKeyTimestamp);
    if (obj.firstFrameLength !== undefined) pbf.writeVarintField(11, obj.firstFrameLength);
    if (obj.firstFrameSidecar != null) pbf.writeBytesField(12, obj.firstFrameSidecar);
    if (obj.isAnimated !== undefined) pbf.writeBooleanField(13, obj.isAnimated);
    if (obj.pngThumbnail != null) pbf.writeBytesField(16, obj.pngThumbnail);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
    if (obj.stickerSentTs !== undefined) pbf.writeVarintField(18, obj.stickerSentTs);
    if (obj.isAvatar !== undefined) pbf.writeBooleanField(19, obj.isAvatar);
    if (obj.isAiSticker !== undefined) pbf.writeBooleanField(20, obj.isAiSticker);
    if (obj.isLottie !== undefined) pbf.writeBooleanField(21, obj.isLottie);
}

export interface MessageStickerSyncRMRMessage {
    filehash?: string[];
    rmrSource?: string;
    requestTimestamp?: number;
}

export function readMessageStickerSyncRMRMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageStickerSyncRMRMessageField, {filehash: [] as string[], rmrSource: "" as string, requestTimestamp: 0 as number}, end);
}
function readMessageStickerSyncRMRMessageField(tag: number, obj: MessageStickerSyncRMRMessage, pbf: Pbf) {
    if (tag === 1) obj.filehash?.push(pbf.readString());
    else if (tag === 2) obj.rmrSource = pbf.readString();
    else if (tag === 3) obj.requestTimestamp = pbf.readVarint(true);
}
export function writeMessageStickerSyncRMRMessage(obj: MessageStickerSyncRMRMessage, pbf: Pbf) {
    if (obj.filehash) for (const item of obj.filehash) pbf.writeStringField(1, item);
    if (obj.rmrSource !== undefined) pbf.writeStringField(2, obj.rmrSource);
    if (obj.requestTimestamp !== undefined) pbf.writeVarintField(3, obj.requestTimestamp);
}

export interface MessageTemplateButtonReplyMessage {
    selectedId?: string;
    selectedDisplayText?: string;
    contextInfo?: ContextInfo;
    selectedIndex?: number;
    selectedCarouselCardIndex?: number;
}

export function readMessageTemplateButtonReplyMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageTemplateButtonReplyMessageField, {selectedId: "" as string, selectedDisplayText: "" as string, contextInfo: undefined as unknown as ContextInfo, selectedIndex: 0 as number, selectedCarouselCardIndex: 0 as number}, end);
}
function readMessageTemplateButtonReplyMessageField(tag: number, obj: MessageTemplateButtonReplyMessage, pbf: Pbf) {
    if (tag === 1) obj.selectedId = pbf.readString();
    else if (tag === 2) obj.selectedDisplayText = pbf.readString();
    else if (tag === 3) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.selectedIndex = pbf.readVarint();
    else if (tag === 5) obj.selectedCarouselCardIndex = pbf.readVarint();
}
export function writeMessageTemplateButtonReplyMessage(obj: MessageTemplateButtonReplyMessage, pbf: Pbf) {
    if (obj.selectedId !== undefined) pbf.writeStringField(1, obj.selectedId);
    if (obj.selectedDisplayText !== undefined) pbf.writeStringField(2, obj.selectedDisplayText);
    if (obj.contextInfo) pbf.writeMessage(3, writeContextInfo, obj.contextInfo);
    if (obj.selectedIndex !== undefined) pbf.writeVarintField(4, obj.selectedIndex);
    if (obj.selectedCarouselCardIndex !== undefined) pbf.writeVarintField(5, obj.selectedCarouselCardIndex);
}

export interface MessageTemplateMessage {
    contextInfo?: ContextInfo;
    hydratedTemplate?: MessageTemplateMessageHydratedFourRowTemplate;
    templateId?: string;
    fourRowTemplate?: MessageTemplateMessageFourRowTemplate;
    hydratedFourRowTemplate?: MessageTemplateMessageHydratedFourRowTemplate;
    interactiveMessageTemplate?: MessageInteractiveMessage;
}

export function readMessageTemplateMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageTemplateMessageField, {contextInfo: undefined as unknown as ContextInfo, hydratedTemplate: undefined as unknown as MessageTemplateMessageHydratedFourRowTemplate, templateId: "" as string, fourRowTemplate: undefined as unknown as MessageTemplateMessageFourRowTemplate, hydratedFourRowTemplate: undefined as unknown as MessageTemplateMessageHydratedFourRowTemplate, interactiveMessageTemplate: undefined as unknown as MessageInteractiveMessage}, end);
}
function readMessageTemplateMessageField(tag: number, obj: MessageTemplateMessage, pbf: Pbf) {
    if (tag === 3) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.hydratedTemplate = readMessageTemplateMessageHydratedFourRowTemplate(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.templateId = pbf.readString();
    else if (tag === 1) { obj.fourRowTemplate = readMessageTemplateMessageFourRowTemplate(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.format = "fourRowTemplate"
; }
    else if (tag === 2) { obj.hydratedFourRowTemplate = readMessageTemplateMessageHydratedFourRowTemplate(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.format = "hydratedFourRowTemplate"
; }
    else if (tag === 5) { obj.interactiveMessageTemplate = readMessageInteractiveMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.format = "interactiveMessageTemplate"
; }
}
export function writeMessageTemplateMessage(obj: MessageTemplateMessage, pbf: Pbf) {
    if (obj.contextInfo) pbf.writeMessage(3, writeContextInfo, obj.contextInfo);
    if (obj.hydratedTemplate) pbf.writeMessage(4, writeMessageTemplateMessageHydratedFourRowTemplate, obj.hydratedTemplate);
    if (obj.templateId !== undefined) pbf.writeStringField(9, obj.templateId);
    if (obj.fourRowTemplate) pbf.writeMessage(1, writeMessageTemplateMessageFourRowTemplate, obj.fourRowTemplate);
    if (obj.hydratedFourRowTemplate) pbf.writeMessage(2, writeMessageTemplateMessageHydratedFourRowTemplate, obj.hydratedFourRowTemplate);
    if (obj.interactiveMessageTemplate) pbf.writeMessage(5, writeMessageInteractiveMessage, obj.interactiveMessageTemplate);
}

export interface MessageTemplateMessageFourRowTemplate {
    content?: MessageHighlyStructuredMessage;
    footer?: MessageHighlyStructuredMessage;
    buttons?: TemplateButton[];
    documentMessage?: MessageDocumentMessage;
    highlyStructuredMessage?: MessageHighlyStructuredMessage;
    imageMessage?: MessageImageMessage;
    videoMessage?: MessageVideoMessage;
    locationMessage?: MessageLocationMessage;
}

export function readMessageTemplateMessageFourRowTemplate(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageTemplateMessageFourRowTemplateField, {content: undefined as unknown as MessageHighlyStructuredMessage, footer: undefined as unknown as MessageHighlyStructuredMessage, buttons: [] as TemplateButton[], documentMessage: undefined as unknown as MessageDocumentMessage, highlyStructuredMessage: undefined as unknown as MessageHighlyStructuredMessage, imageMessage: undefined as unknown as MessageImageMessage, videoMessage: undefined as unknown as MessageVideoMessage, locationMessage: undefined as unknown as MessageLocationMessage}, end);
}
function readMessageTemplateMessageFourRowTemplateField(tag: number, obj: MessageTemplateMessageFourRowTemplate, pbf: Pbf) {
    if (tag === 6) obj.content = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.footer = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.buttons?.push(readTemplateButton(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 1) { obj.documentMessage = readMessageDocumentMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "documentMessage"
; }
    else if (tag === 2) { obj.highlyStructuredMessage = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "highlyStructuredMessage"
; }
    else if (tag === 3) { obj.imageMessage = readMessageImageMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "imageMessage"
; }
    else if (tag === 4) { obj.videoMessage = readMessageVideoMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "videoMessage"
; }
    else if (tag === 5) { obj.locationMessage = readMessageLocationMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "locationMessage"
; }
}
export function writeMessageTemplateMessageFourRowTemplate(obj: MessageTemplateMessageFourRowTemplate, pbf: Pbf) {
    if (obj.content) pbf.writeMessage(6, writeMessageHighlyStructuredMessage, obj.content);
    if (obj.footer) pbf.writeMessage(7, writeMessageHighlyStructuredMessage, obj.footer);
    if (obj.buttons) for (const item of obj.buttons) pbf.writeMessage(8, writeTemplateButton, item);
    if (obj.documentMessage) pbf.writeMessage(1, writeMessageDocumentMessage, obj.documentMessage);
    if (obj.highlyStructuredMessage) pbf.writeMessage(2, writeMessageHighlyStructuredMessage, obj.highlyStructuredMessage);
    if (obj.imageMessage) pbf.writeMessage(3, writeMessageImageMessage, obj.imageMessage);
    if (obj.videoMessage) pbf.writeMessage(4, writeMessageVideoMessage, obj.videoMessage);
    if (obj.locationMessage) pbf.writeMessage(5, writeMessageLocationMessage, obj.locationMessage);
}

export interface MessageTemplateMessageHydratedFourRowTemplate {
    hydratedContentText?: string;
    hydratedFooterText?: string;
    hydratedButtons?: HydratedTemplateButton[];
    templateId?: string;
    maskLinkedDevices?: boolean;
    documentMessage?: MessageDocumentMessage;
    hydratedTitleText?: string;
    imageMessage?: MessageImageMessage;
    videoMessage?: MessageVideoMessage;
    locationMessage?: MessageLocationMessage;
}

export function readMessageTemplateMessageHydratedFourRowTemplate(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageTemplateMessageHydratedFourRowTemplateField, {hydratedContentText: "" as string, hydratedFooterText: "" as string, hydratedButtons: [] as HydratedTemplateButton[], templateId: "" as string, maskLinkedDevices: false as boolean, documentMessage: undefined as unknown as MessageDocumentMessage, hydratedTitleText: "" as string, imageMessage: undefined as unknown as MessageImageMessage, videoMessage: undefined as unknown as MessageVideoMessage, locationMessage: undefined as unknown as MessageLocationMessage}, end);
}
function readMessageTemplateMessageHydratedFourRowTemplateField(tag: number, obj: MessageTemplateMessageHydratedFourRowTemplate, pbf: Pbf) {
    if (tag === 6) obj.hydratedContentText = pbf.readString();
    else if (tag === 7) obj.hydratedFooterText = pbf.readString();
    else if (tag === 8) obj.hydratedButtons?.push(readHydratedTemplateButton(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 9) obj.templateId = pbf.readString();
    else if (tag === 10) obj.maskLinkedDevices = pbf.readBoolean();
    else if (tag === 1) { obj.documentMessage = readMessageDocumentMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "documentMessage"
; }
    else if (tag === 2) { obj.hydratedTitleText = pbf.readString();
//@ts-ignore 
obj.title = "hydratedTitleText"
; }
    else if (tag === 3) { obj.imageMessage = readMessageImageMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "imageMessage"
; }
    else if (tag === 4) { obj.videoMessage = readMessageVideoMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "videoMessage"
; }
    else if (tag === 5) { obj.locationMessage = readMessageLocationMessage(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.title = "locationMessage"
; }
}
export function writeMessageTemplateMessageHydratedFourRowTemplate(obj: MessageTemplateMessageHydratedFourRowTemplate, pbf: Pbf) {
    if (obj.hydratedContentText !== undefined) pbf.writeStringField(6, obj.hydratedContentText);
    if (obj.hydratedFooterText !== undefined) pbf.writeStringField(7, obj.hydratedFooterText);
    if (obj.hydratedButtons) for (const item of obj.hydratedButtons) pbf.writeMessage(8, writeHydratedTemplateButton, item);
    if (obj.templateId !== undefined) pbf.writeStringField(9, obj.templateId);
    if (obj.maskLinkedDevices !== undefined) pbf.writeBooleanField(10, obj.maskLinkedDevices);
    if (obj.documentMessage) pbf.writeMessage(1, writeMessageDocumentMessage, obj.documentMessage);
    if (obj.hydratedTitleText != null) pbf.writeStringField(2, obj.hydratedTitleText);
    if (obj.imageMessage) pbf.writeMessage(3, writeMessageImageMessage, obj.imageMessage);
    if (obj.videoMessage) pbf.writeMessage(4, writeMessageVideoMessage, obj.videoMessage);
    if (obj.locationMessage) pbf.writeMessage(5, writeMessageLocationMessage, obj.locationMessage);
}

export interface MessageVideoMessage {
    url?: string;
    mimetype?: string;
    fileSha256?: Uint8Array;
    fileLength?: number;
    seconds?: number;
    mediaKey?: Uint8Array;
    caption?: string;
    gifPlayback?: boolean;
    height?: number;
    width?: number;
    fileEncSha256?: Uint8Array;
    interactiveAnnotations?: InteractiveAnnotation[];
    directPath?: string;
    mediaKeyTimestamp?: number;
    jpegThumbnail?: Uint8Array;
    contextInfo?: ContextInfo;
    streamingSidecar?: Uint8Array;
    gifAttribution?: MessageVideoMessageAttribution;
    viewOnce?: boolean;
    thumbnailDirectPath?: string;
    thumbnailSha256?: Uint8Array;
    thumbnailEncSha256?: Uint8Array;
    staticUrl?: string;
    annotations?: InteractiveAnnotation[];
}

export function readMessageVideoMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageVideoMessageField, {url: "" as string, mimetype: "" as string, fileSha256: undefined as unknown as Uint8Array, fileLength: 0 as number, seconds: 0 as number, mediaKey: undefined as unknown as Uint8Array, caption: "" as string, gifPlayback: false as boolean, height: 0 as number, width: 0 as number, fileEncSha256: undefined as unknown as Uint8Array, interactiveAnnotations: [] as InteractiveAnnotation[], directPath: "" as string, mediaKeyTimestamp: 0 as number, jpegThumbnail: undefined as unknown as Uint8Array, contextInfo: undefined as unknown as ContextInfo, streamingSidecar: undefined as unknown as Uint8Array, gifAttribution: 0 as MessageVideoMessageAttribution, viewOnce: false as boolean, thumbnailDirectPath: "" as string, thumbnailSha256: undefined as unknown as Uint8Array, thumbnailEncSha256: undefined as unknown as Uint8Array, staticUrl: "" as string, annotations: [] as InteractiveAnnotation[]}, end);
}
function readMessageVideoMessageField(tag: number, obj: MessageVideoMessage, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.mimetype = pbf.readString();
    else if (tag === 3) obj.fileSha256 = pbf.readBytes();
    else if (tag === 4) obj.fileLength = pbf.readVarint();
    else if (tag === 5) obj.seconds = pbf.readVarint();
    else if (tag === 6) obj.mediaKey = pbf.readBytes();
    else if (tag === 7) obj.caption = pbf.readString();
    else if (tag === 8) obj.gifPlayback = pbf.readBoolean();
    else if (tag === 9) obj.height = pbf.readVarint();
    else if (tag === 10) obj.width = pbf.readVarint();
    else if (tag === 11) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 12) obj.interactiveAnnotations?.push(readInteractiveAnnotation(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 13) obj.directPath = pbf.readString();
    else if (tag === 14) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 16) obj.jpegThumbnail = pbf.readBytes();
    else if (tag === 17) obj.contextInfo = readContextInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.streamingSidecar = pbf.readBytes();
    else if (tag === 19) obj.gifAttribution = pbf.readVarint();
    else if (tag === 20) obj.viewOnce = pbf.readBoolean();
    else if (tag === 21) obj.thumbnailDirectPath = pbf.readString();
    else if (tag === 22) obj.thumbnailSha256 = pbf.readBytes();
    else if (tag === 23) obj.thumbnailEncSha256 = pbf.readBytes();
    else if (tag === 24) obj.staticUrl = pbf.readString();
    else if (tag === 25) obj.annotations?.push(readInteractiveAnnotation(pbf, pbf.readVarint() + pbf.pos));
}
export function writeMessageVideoMessage(obj: MessageVideoMessage, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.mimetype !== undefined) pbf.writeStringField(2, obj.mimetype);
    if (obj.fileSha256 != null) pbf.writeBytesField(3, obj.fileSha256);
    if (obj.fileLength !== undefined) pbf.writeVarintField(4, obj.fileLength);
    if (obj.seconds !== undefined) pbf.writeVarintField(5, obj.seconds);
    if (obj.mediaKey != null) pbf.writeBytesField(6, obj.mediaKey);
    if (obj.caption !== undefined) pbf.writeStringField(7, obj.caption);
    if (obj.gifPlayback !== undefined) pbf.writeBooleanField(8, obj.gifPlayback);
    if (obj.height !== undefined) pbf.writeVarintField(9, obj.height);
    if (obj.width !== undefined) pbf.writeVarintField(10, obj.width);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(11, obj.fileEncSha256);
    if (obj.interactiveAnnotations) for (const item of obj.interactiveAnnotations) pbf.writeMessage(12, writeInteractiveAnnotation, item);
    if (obj.directPath !== undefined) pbf.writeStringField(13, obj.directPath);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(14, obj.mediaKeyTimestamp);
    if (obj.jpegThumbnail != null) pbf.writeBytesField(16, obj.jpegThumbnail);
    if (obj.contextInfo) pbf.writeMessage(17, writeContextInfo, obj.contextInfo);
    if (obj.streamingSidecar != null) pbf.writeBytesField(18, obj.streamingSidecar);
    if (obj.gifAttribution !== undefined) pbf.writeVarintField(19, obj.gifAttribution);
    if (obj.viewOnce !== undefined) pbf.writeBooleanField(20, obj.viewOnce);
    if (obj.thumbnailDirectPath !== undefined) pbf.writeStringField(21, obj.thumbnailDirectPath);
    if (obj.thumbnailSha256 != null) pbf.writeBytesField(22, obj.thumbnailSha256);
    if (obj.thumbnailEncSha256 != null) pbf.writeBytesField(23, obj.thumbnailEncSha256);
    if (obj.staticUrl !== undefined) pbf.writeStringField(24, obj.staticUrl);
    if (obj.annotations) for (const item of obj.annotations) pbf.writeMessage(25, writeInteractiveAnnotation, item);
}

export enum MessageVideoMessageAttribution {
    NONE = 0,
    GIPHY = 1,
    TENOR = 2,
}

export interface MessageAddOnContextInfo {
    messageAddOnDurationInSecs?: number;
}

export function readMessageAddOnContextInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageAddOnContextInfoField, {messageAddOnDurationInSecs: 0 as number}, end);
}
function readMessageAddOnContextInfoField(tag: number, obj: MessageAddOnContextInfo, pbf: Pbf) {
    if (tag === 1) obj.messageAddOnDurationInSecs = pbf.readVarint();
}
export function writeMessageAddOnContextInfo(obj: MessageAddOnContextInfo, pbf: Pbf) {
    if (obj.messageAddOnDurationInSecs !== undefined) pbf.writeVarintField(1, obj.messageAddOnDurationInSecs);
}

export interface MessageContextInfo {
    deviceListMetadata?: DeviceListMetadata;
    deviceListMetadataVersion?: number;
    messageSecret?: Uint8Array;
    paddingBytes?: Uint8Array;
    messageAddOnDurationInSecs?: number;
    botMessageSecret?: Uint8Array;
    botMetadata?: BotMetadata;
    reportingTokenVersion?: number;
}

export function readMessageContextInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageContextInfoField, {deviceListMetadata: undefined as unknown as DeviceListMetadata, deviceListMetadataVersion: 0 as number, messageSecret: undefined as unknown as Uint8Array, paddingBytes: undefined as unknown as Uint8Array, messageAddOnDurationInSecs: 0 as number, botMessageSecret: undefined as unknown as Uint8Array, botMetadata: undefined as unknown as BotMetadata, reportingTokenVersion: 0 as number}, end);
}
function readMessageContextInfoField(tag: number, obj: MessageContextInfo, pbf: Pbf) {
    if (tag === 1) obj.deviceListMetadata = readDeviceListMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.deviceListMetadataVersion = pbf.readVarint(true);
    else if (tag === 3) obj.messageSecret = pbf.readBytes();
    else if (tag === 4) obj.paddingBytes = pbf.readBytes();
    else if (tag === 5) obj.messageAddOnDurationInSecs = pbf.readVarint();
    else if (tag === 6) obj.botMessageSecret = pbf.readBytes();
    else if (tag === 7) obj.botMetadata = readBotMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.reportingTokenVersion = pbf.readVarint(true);
}
export function writeMessageContextInfo(obj: MessageContextInfo, pbf: Pbf) {
    if (obj.deviceListMetadata) pbf.writeMessage(1, writeDeviceListMetadata, obj.deviceListMetadata);
    if (obj.deviceListMetadataVersion !== undefined) pbf.writeVarintField(2, obj.deviceListMetadataVersion);
    if (obj.messageSecret != null) pbf.writeBytesField(3, obj.messageSecret);
    if (obj.paddingBytes != null) pbf.writeBytesField(4, obj.paddingBytes);
    if (obj.messageAddOnDurationInSecs !== undefined) pbf.writeVarintField(5, obj.messageAddOnDurationInSecs);
    if (obj.botMessageSecret != null) pbf.writeBytesField(6, obj.botMessageSecret);
    if (obj.botMetadata) pbf.writeMessage(7, writeBotMetadata, obj.botMetadata);
    if (obj.reportingTokenVersion !== undefined) pbf.writeVarintField(8, obj.reportingTokenVersion);
}

export interface MessageKey {
    remoteJid?: string;
    fromMe?: boolean;
    id?: string;
    participant?: string;
}

export function readMessageKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageKeyField, {remoteJid: "" as string, fromMe: false as boolean, id: "" as string, participant: "" as string}, end);
}
function readMessageKeyField(tag: number, obj: MessageKey, pbf: Pbf) {
    if (tag === 1) obj.remoteJid = pbf.readString();
    else if (tag === 2) obj.fromMe = pbf.readBoolean();
    else if (tag === 3) obj.id = pbf.readString();
    else if (tag === 4) obj.participant = pbf.readString();
}
export function writeMessageKey(obj: MessageKey, pbf: Pbf) {
    if (obj.remoteJid !== undefined) pbf.writeStringField(1, obj.remoteJid);
    if (obj.fromMe !== undefined) pbf.writeBooleanField(2, obj.fromMe);
    if (obj.id !== undefined) pbf.writeStringField(3, obj.id);
    if (obj.participant !== undefined) pbf.writeStringField(4, obj.participant);
}

export interface MessageSecretMessage {
    version?: number;
    encIv?: Uint8Array;
    encPayload?: Uint8Array;
}

export function readMessageSecretMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readMessageSecretMessageField, {version: 0 as number, encIv: undefined as unknown as Uint8Array, encPayload: undefined as unknown as Uint8Array}, end);
}
function readMessageSecretMessageField(tag: number, obj: MessageSecretMessage, pbf: Pbf) {
    if (tag === 1) obj.version = pbf.readSFixed32();
    else if (tag === 2) obj.encIv = pbf.readBytes();
    else if (tag === 3) obj.encPayload = pbf.readBytes();
}
export function writeMessageSecretMessage(obj: MessageSecretMessage, pbf: Pbf) {
    if (obj.version !== undefined) pbf.writeSFixed32Field(1, obj.version);
    if (obj.encIv != null) pbf.writeBytesField(2, obj.encIv);
    if (obj.encPayload != null) pbf.writeBytesField(3, obj.encPayload);
}

export interface Money {
    value?: number;
    offset?: number;
    currencyCode?: string;
}

export function readMoney(pbf: Pbf, end?: number) {
    return pbf.readFields(readMoneyField, {value: 0 as number, offset: 0 as number, currencyCode: "" as string}, end);
}
function readMoneyField(tag: number, obj: Money, pbf: Pbf) {
    if (tag === 1) obj.value = pbf.readVarint(true);
    else if (tag === 2) obj.offset = pbf.readVarint();
    else if (tag === 3) obj.currencyCode = pbf.readString();
}
export function writeMoney(obj: Money, pbf: Pbf) {
    if (obj.value !== undefined) pbf.writeVarintField(1, obj.value);
    if (obj.offset !== undefined) pbf.writeVarintField(2, obj.offset);
    if (obj.currencyCode !== undefined) pbf.writeStringField(3, obj.currencyCode);
}

export interface MsgOpaqueData {
    body?: string;
    caption?: string;
    lng?: number;
    isLive?: boolean;
    lat?: number;
    paymentAmount1000?: number;
    paymentNoteMsgBody?: string;
    canonicalUrl?: string;
    matchedText?: string;
    title?: string;
    description?: string;
    futureproofBuffer?: Uint8Array;
    clientUrl?: string;
    loc?: string;
    pollName?: string;
    pollOptions?: MsgOpaqueDataPollOption[];
    pollSelectableOptionsCount?: number;
    messageSecret?: Uint8Array;
    originalSelfAuthor?: string;
    senderTimestampMs?: number;
    pollUpdateParentKey?: string;
    encPollVote?: PollEncValue;
    isSentCagPollCreation?: boolean;
    encReactionTargetMessageKey?: string;
    encReactionEncPayload?: Uint8Array;
    encReactionEncIv?: Uint8Array;
    botMessageSecret?: Uint8Array;
    targetMessageKey?: string;
    encPayload?: Uint8Array;
    encIv?: Uint8Array;
}

export function readMsgOpaqueData(pbf: Pbf, end?: number) {
    return pbf.readFields(readMsgOpaqueDataField, {body: "" as string, caption: "" as string, lng: 0 as number, isLive: false as boolean, lat: 0 as number, paymentAmount1000: 0 as number, paymentNoteMsgBody: "" as string, canonicalUrl: "" as string, matchedText: "" as string, title: "" as string, description: "" as string, futureproofBuffer: undefined as unknown as Uint8Array, clientUrl: "" as string, loc: "" as string, pollName: "" as string, pollOptions: [] as MsgOpaqueDataPollOption[], pollSelectableOptionsCount: 0 as number, messageSecret: undefined as unknown as Uint8Array, originalSelfAuthor: "" as string, senderTimestampMs: 0 as number, pollUpdateParentKey: "" as string, encPollVote: undefined as unknown as PollEncValue, isSentCagPollCreation: false as boolean, encReactionTargetMessageKey: "" as string, encReactionEncPayload: undefined as unknown as Uint8Array, encReactionEncIv: undefined as unknown as Uint8Array, botMessageSecret: undefined as unknown as Uint8Array, targetMessageKey: "" as string, encPayload: undefined as unknown as Uint8Array, encIv: undefined as unknown as Uint8Array}, end);
}
function readMsgOpaqueDataField(tag: number, obj: MsgOpaqueData, pbf: Pbf) {
    if (tag === 1) obj.body = pbf.readString();
    else if (tag === 3) obj.caption = pbf.readString();
    else if (tag === 5) obj.lng = pbf.readDouble();
    else if (tag === 6) obj.isLive = pbf.readBoolean();
    else if (tag === 7) obj.lat = pbf.readDouble();
    else if (tag === 8) obj.paymentAmount1000 = pbf.readVarint(true);
    else if (tag === 9) obj.paymentNoteMsgBody = pbf.readString();
    else if (tag === 10) obj.canonicalUrl = pbf.readString();
    else if (tag === 11) obj.matchedText = pbf.readString();
    else if (tag === 12) obj.title = pbf.readString();
    else if (tag === 13) obj.description = pbf.readString();
    else if (tag === 14) obj.futureproofBuffer = pbf.readBytes();
    else if (tag === 15) obj.clientUrl = pbf.readString();
    else if (tag === 16) obj.loc = pbf.readString();
    else if (tag === 17) obj.pollName = pbf.readString();
    else if (tag === 18) obj.pollOptions?.push(readMsgOpaqueDataPollOption(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 20) obj.pollSelectableOptionsCount = pbf.readVarint();
    else if (tag === 21) obj.messageSecret = pbf.readBytes();
    else if (tag === 51) obj.originalSelfAuthor = pbf.readString();
    else if (tag === 22) obj.senderTimestampMs = pbf.readVarint(true);
    else if (tag === 23) obj.pollUpdateParentKey = pbf.readString();
    else if (tag === 24) obj.encPollVote = readPollEncValue(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 28) obj.isSentCagPollCreation = pbf.readBoolean();
    else if (tag === 25) obj.encReactionTargetMessageKey = pbf.readString();
    else if (tag === 26) obj.encReactionEncPayload = pbf.readBytes();
    else if (tag === 27) obj.encReactionEncIv = pbf.readBytes();
    else if (tag === 29) obj.botMessageSecret = pbf.readBytes();
    else if (tag === 30) obj.targetMessageKey = pbf.readString();
    else if (tag === 31) obj.encPayload = pbf.readBytes();
    else if (tag === 32) obj.encIv = pbf.readBytes();
}
export function writeMsgOpaqueData(obj: MsgOpaqueData, pbf: Pbf) {
    if (obj.body !== undefined) pbf.writeStringField(1, obj.body);
    if (obj.caption !== undefined) pbf.writeStringField(3, obj.caption);
    if (obj.lng !== undefined) pbf.writeDoubleField(5, obj.lng);
    if (obj.isLive !== undefined) pbf.writeBooleanField(6, obj.isLive);
    if (obj.lat !== undefined) pbf.writeDoubleField(7, obj.lat);
    if (obj.paymentAmount1000 !== undefined) pbf.writeVarintField(8, obj.paymentAmount1000);
    if (obj.paymentNoteMsgBody !== undefined) pbf.writeStringField(9, obj.paymentNoteMsgBody);
    if (obj.canonicalUrl !== undefined) pbf.writeStringField(10, obj.canonicalUrl);
    if (obj.matchedText !== undefined) pbf.writeStringField(11, obj.matchedText);
    if (obj.title !== undefined) pbf.writeStringField(12, obj.title);
    if (obj.description !== undefined) pbf.writeStringField(13, obj.description);
    if (obj.futureproofBuffer != null) pbf.writeBytesField(14, obj.futureproofBuffer);
    if (obj.clientUrl !== undefined) pbf.writeStringField(15, obj.clientUrl);
    if (obj.loc !== undefined) pbf.writeStringField(16, obj.loc);
    if (obj.pollName !== undefined) pbf.writeStringField(17, obj.pollName);
    if (obj.pollOptions) for (const item of obj.pollOptions) pbf.writeMessage(18, writeMsgOpaqueDataPollOption, item);
    if (obj.pollSelectableOptionsCount !== undefined) pbf.writeVarintField(20, obj.pollSelectableOptionsCount);
    if (obj.messageSecret != null) pbf.writeBytesField(21, obj.messageSecret);
    if (obj.originalSelfAuthor !== undefined) pbf.writeStringField(51, obj.originalSelfAuthor);
    if (obj.senderTimestampMs !== undefined) pbf.writeVarintField(22, obj.senderTimestampMs);
    if (obj.pollUpdateParentKey !== undefined) pbf.writeStringField(23, obj.pollUpdateParentKey);
    if (obj.encPollVote) pbf.writeMessage(24, writePollEncValue, obj.encPollVote);
    if (obj.isSentCagPollCreation !== undefined) pbf.writeBooleanField(28, obj.isSentCagPollCreation);
    if (obj.encReactionTargetMessageKey !== undefined) pbf.writeStringField(25, obj.encReactionTargetMessageKey);
    if (obj.encReactionEncPayload != null) pbf.writeBytesField(26, obj.encReactionEncPayload);
    if (obj.encReactionEncIv != null) pbf.writeBytesField(27, obj.encReactionEncIv);
    if (obj.botMessageSecret != null) pbf.writeBytesField(29, obj.botMessageSecret);
    if (obj.targetMessageKey !== undefined) pbf.writeStringField(30, obj.targetMessageKey);
    if (obj.encPayload != null) pbf.writeBytesField(31, obj.encPayload);
    if (obj.encIv != null) pbf.writeBytesField(32, obj.encIv);
}

export interface MsgOpaqueDataPollOption {
    name?: string;
}

export function readMsgOpaqueDataPollOption(pbf: Pbf, end?: number) {
    return pbf.readFields(readMsgOpaqueDataPollOptionField, {name: "" as string}, end);
}
function readMsgOpaqueDataPollOptionField(tag: number, obj: MsgOpaqueDataPollOption, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
}
export function writeMsgOpaqueDataPollOption(obj: MsgOpaqueDataPollOption, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
}

export interface MsgRowOpaqueData {
    currentMsg?: MsgOpaqueData;
    quotedMsg?: MsgOpaqueData;
}

export function readMsgRowOpaqueData(pbf: Pbf, end?: number) {
    return pbf.readFields(readMsgRowOpaqueDataField, {currentMsg: undefined as unknown as MsgOpaqueData, quotedMsg: undefined as unknown as MsgOpaqueData}, end);
}
function readMsgRowOpaqueDataField(tag: number, obj: MsgRowOpaqueData, pbf: Pbf) {
    if (tag === 1) obj.currentMsg = readMsgOpaqueData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.quotedMsg = readMsgOpaqueData(pbf, pbf.readVarint() + pbf.pos);
}
export function writeMsgRowOpaqueData(obj: MsgRowOpaqueData, pbf: Pbf) {
    if (obj.currentMsg) pbf.writeMessage(1, writeMsgOpaqueData, obj.currentMsg);
    if (obj.quotedMsg) pbf.writeMessage(2, writeMsgOpaqueData, obj.quotedMsg);
}

export interface NoiseCertificate {
    details?: Uint8Array;
    signature?: Uint8Array;
}

export function readNoiseCertificate(pbf: Pbf, end?: number) {
    return pbf.readFields(readNoiseCertificateField, {details: undefined as unknown as Uint8Array, signature: undefined as unknown as Uint8Array}, end);
}
function readNoiseCertificateField(tag: number, obj: NoiseCertificate, pbf: Pbf) {
    if (tag === 1) obj.details = pbf.readBytes();
    else if (tag === 2) obj.signature = pbf.readBytes();
}
export function writeNoiseCertificate(obj: NoiseCertificate, pbf: Pbf) {
    if (obj.details != null) pbf.writeBytesField(1, obj.details);
    if (obj.signature != null) pbf.writeBytesField(2, obj.signature);
}

export interface NoiseCertificateDetails {
    serial?: number;
    issuer?: string;
    expires?: number;
    subject?: string;
    key?: Uint8Array;
}

export function readNoiseCertificateDetails(pbf: Pbf, end?: number) {
    return pbf.readFields(readNoiseCertificateDetailsField, {serial: 0 as number, issuer: "" as string, expires: 0 as number, subject: "" as string, key: undefined as unknown as Uint8Array}, end);
}
function readNoiseCertificateDetailsField(tag: number, obj: NoiseCertificateDetails, pbf: Pbf) {
    if (tag === 1) obj.serial = pbf.readVarint();
    else if (tag === 2) obj.issuer = pbf.readString();
    else if (tag === 3) obj.expires = pbf.readVarint();
    else if (tag === 4) obj.subject = pbf.readString();
    else if (tag === 5) obj.key = pbf.readBytes();
}
export function writeNoiseCertificateDetails(obj: NoiseCertificateDetails, pbf: Pbf) {
    if (obj.serial !== undefined) pbf.writeVarintField(1, obj.serial);
    if (obj.issuer !== undefined) pbf.writeStringField(2, obj.issuer);
    if (obj.expires !== undefined) pbf.writeVarintField(3, obj.expires);
    if (obj.subject !== undefined) pbf.writeStringField(4, obj.subject);
    if (obj.key != null) pbf.writeBytesField(5, obj.key);
}

export interface NotificationMessageInfo {
    key?: MessageKey;
    message?: Message;
    messageTimestamp?: number;
    participant?: string;
}

export function readNotificationMessageInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readNotificationMessageInfoField, {key: undefined as unknown as MessageKey, message: undefined as unknown as Message, messageTimestamp: 0 as number, participant: "" as string}, end);
}
function readNotificationMessageInfoField(tag: number, obj: NotificationMessageInfo, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.message = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.messageTimestamp = pbf.readVarint();
    else if (tag === 4) obj.participant = pbf.readString();
}
export function writeNotificationMessageInfo(obj: NotificationMessageInfo, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.message) pbf.writeMessage(2, writeMessage, obj.message);
    if (obj.messageTimestamp !== undefined) pbf.writeVarintField(3, obj.messageTimestamp);
    if (obj.participant !== undefined) pbf.writeStringField(4, obj.participant);
}

export interface NotificationSettings {
    messageVibrate?: string;
    messagePopup?: string;
    messageLight?: string;
    lowPriorityNotifications?: boolean;
    reactionsMuted?: boolean;
    callVibrate?: string;
}

export function readNotificationSettings(pbf: Pbf, end?: number) {
    return pbf.readFields(readNotificationSettingsField, {messageVibrate: "" as string, messagePopup: "" as string, messageLight: "" as string, lowPriorityNotifications: false as boolean, reactionsMuted: false as boolean, callVibrate: "" as string}, end);
}
function readNotificationSettingsField(tag: number, obj: NotificationSettings, pbf: Pbf) {
    if (tag === 1) obj.messageVibrate = pbf.readString();
    else if (tag === 2) obj.messagePopup = pbf.readString();
    else if (tag === 3) obj.messageLight = pbf.readString();
    else if (tag === 4) obj.lowPriorityNotifications = pbf.readBoolean();
    else if (tag === 5) obj.reactionsMuted = pbf.readBoolean();
    else if (tag === 6) obj.callVibrate = pbf.readString();
}
export function writeNotificationSettings(obj: NotificationSettings, pbf: Pbf) {
    if (obj.messageVibrate !== undefined) pbf.writeStringField(1, obj.messageVibrate);
    if (obj.messagePopup !== undefined) pbf.writeStringField(2, obj.messagePopup);
    if (obj.messageLight !== undefined) pbf.writeStringField(3, obj.messageLight);
    if (obj.lowPriorityNotifications !== undefined) pbf.writeBooleanField(4, obj.lowPriorityNotifications);
    if (obj.reactionsMuted !== undefined) pbf.writeBooleanField(5, obj.reactionsMuted);
    if (obj.callVibrate !== undefined) pbf.writeStringField(6, obj.callVibrate);
}

export interface PastParticipant {
    userJid?: string;
    leaveReason?: PastParticipantLeaveReason;
    leaveTs?: number;
}

export function readPastParticipant(pbf: Pbf, end?: number) {
    return pbf.readFields(readPastParticipantField, {userJid: "" as string, leaveReason: 0 as PastParticipantLeaveReason, leaveTs: 0 as number}, end);
}
function readPastParticipantField(tag: number, obj: PastParticipant, pbf: Pbf) {
    if (tag === 1) obj.userJid = pbf.readString();
    else if (tag === 2) obj.leaveReason = pbf.readVarint();
    else if (tag === 3) obj.leaveTs = pbf.readVarint();
}
export function writePastParticipant(obj: PastParticipant, pbf: Pbf) {
    if (obj.userJid !== undefined) pbf.writeStringField(1, obj.userJid);
    if (obj.leaveReason !== undefined) pbf.writeVarintField(2, obj.leaveReason);
    if (obj.leaveTs !== undefined) pbf.writeVarintField(3, obj.leaveTs);
}

export enum PastParticipantLeaveReason {
    LEFT = 0,
    REMOVED = 1,
}

export interface PastParticipants {
    groupJid?: string;
    pastParticipants?: PastParticipant[];
}

export function readPastParticipants(pbf: Pbf, end?: number) {
    return pbf.readFields(readPastParticipantsField, {groupJid: "" as string, pastParticipants: [] as PastParticipant[]}, end);
}
function readPastParticipantsField(tag: number, obj: PastParticipants, pbf: Pbf) {
    if (tag === 1) obj.groupJid = pbf.readString();
    else if (tag === 2) obj.pastParticipants?.push(readPastParticipant(pbf, pbf.readVarint() + pbf.pos));
}
export function writePastParticipants(obj: PastParticipants, pbf: Pbf) {
    if (obj.groupJid !== undefined) pbf.writeStringField(1, obj.groupJid);
    if (obj.pastParticipants) for (const item of obj.pastParticipants) pbf.writeMessage(2, writePastParticipant, item);
}

export interface PatchDebugData {
    currentLthash?: Uint8Array;
    newLthash?: Uint8Array;
    patchVersion?: Uint8Array;
    collectionName?: Uint8Array;
    firstFourBytesFromAHashOfSnapshotMacKey?: Uint8Array;
    newLthashSubtract?: Uint8Array;
    numberAdd?: number;
    numberRemove?: number;
    numberOverride?: number;
    senderPlatform?: PatchDebugDataPlatform;
    isSenderPrimary?: boolean;
}

export function readPatchDebugData(pbf: Pbf, end?: number) {
    return pbf.readFields(readPatchDebugDataField, {currentLthash: undefined as unknown as Uint8Array, newLthash: undefined as unknown as Uint8Array, patchVersion: undefined as unknown as Uint8Array, collectionName: undefined as unknown as Uint8Array, firstFourBytesFromAHashOfSnapshotMacKey: undefined as unknown as Uint8Array, newLthashSubtract: undefined as unknown as Uint8Array, numberAdd: 0 as number, numberRemove: 0 as number, numberOverride: 0 as number, senderPlatform: 0 as PatchDebugDataPlatform, isSenderPrimary: false as boolean}, end);
}
function readPatchDebugDataField(tag: number, obj: PatchDebugData, pbf: Pbf) {
    if (tag === 1) obj.currentLthash = pbf.readBytes();
    else if (tag === 2) obj.newLthash = pbf.readBytes();
    else if (tag === 3) obj.patchVersion = pbf.readBytes();
    else if (tag === 4) obj.collectionName = pbf.readBytes();
    else if (tag === 5) obj.firstFourBytesFromAHashOfSnapshotMacKey = pbf.readBytes();
    else if (tag === 6) obj.newLthashSubtract = pbf.readBytes();
    else if (tag === 7) obj.numberAdd = pbf.readVarint(true);
    else if (tag === 8) obj.numberRemove = pbf.readVarint(true);
    else if (tag === 9) obj.numberOverride = pbf.readVarint(true);
    else if (tag === 10) obj.senderPlatform = pbf.readVarint();
    else if (tag === 11) obj.isSenderPrimary = pbf.readBoolean();
}
export function writePatchDebugData(obj: PatchDebugData, pbf: Pbf) {
    if (obj.currentLthash != null) pbf.writeBytesField(1, obj.currentLthash);
    if (obj.newLthash != null) pbf.writeBytesField(2, obj.newLthash);
    if (obj.patchVersion != null) pbf.writeBytesField(3, obj.patchVersion);
    if (obj.collectionName != null) pbf.writeBytesField(4, obj.collectionName);
    if (obj.firstFourBytesFromAHashOfSnapshotMacKey != null) pbf.writeBytesField(5, obj.firstFourBytesFromAHashOfSnapshotMacKey);
    if (obj.newLthashSubtract != null) pbf.writeBytesField(6, obj.newLthashSubtract);
    if (obj.numberAdd !== undefined) pbf.writeVarintField(7, obj.numberAdd);
    if (obj.numberRemove !== undefined) pbf.writeVarintField(8, obj.numberRemove);
    if (obj.numberOverride !== undefined) pbf.writeVarintField(9, obj.numberOverride);
    if (obj.senderPlatform !== undefined) pbf.writeVarintField(10, obj.senderPlatform);
    if (obj.isSenderPrimary !== undefined) pbf.writeBooleanField(11, obj.isSenderPrimary);
}

export enum PatchDebugDataPlatform {
    ANDROID = 0,
    SMBA = 1,
    IPHONE = 2,
    SMBI = 3,
    WEB = 4,
    UWP = 5,
    DARWIN = 6,
}

export interface PaymentBackground {
    id?: string;
    fileLength?: number;
    width?: number;
    height?: number;
    mimetype?: string;
    placeholderArgb?: number;
    textArgb?: number;
    subtextArgb?: number;
    mediaData?: PaymentBackgroundMediaData;
    type?: PaymentBackgroundType;
}

export function readPaymentBackground(pbf: Pbf, end?: number) {
    return pbf.readFields(readPaymentBackgroundField, {id: "" as string, fileLength: 0 as number, width: 0 as number, height: 0 as number, mimetype: "" as string, placeholderArgb: 0 as number, textArgb: 0 as number, subtextArgb: 0 as number, mediaData: undefined as unknown as PaymentBackgroundMediaData, type: 0 as PaymentBackgroundType}, end);
}
function readPaymentBackgroundField(tag: number, obj: PaymentBackground, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readString();
    else if (tag === 2) obj.fileLength = pbf.readVarint();
    else if (tag === 3) obj.width = pbf.readVarint();
    else if (tag === 4) obj.height = pbf.readVarint();
    else if (tag === 5) obj.mimetype = pbf.readString();
    else if (tag === 6) obj.placeholderArgb = pbf.readFixed32();
    else if (tag === 7) obj.textArgb = pbf.readFixed32();
    else if (tag === 8) obj.subtextArgb = pbf.readFixed32();
    else if (tag === 9) obj.mediaData = readPaymentBackgroundMediaData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.type = pbf.readVarint();
}
export function writePaymentBackground(obj: PaymentBackground, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeStringField(1, obj.id);
    if (obj.fileLength !== undefined) pbf.writeVarintField(2, obj.fileLength);
    if (obj.width !== undefined) pbf.writeVarintField(3, obj.width);
    if (obj.height !== undefined) pbf.writeVarintField(4, obj.height);
    if (obj.mimetype !== undefined) pbf.writeStringField(5, obj.mimetype);
    if (obj.placeholderArgb !== undefined) pbf.writeFixed32Field(6, obj.placeholderArgb);
    if (obj.textArgb !== undefined) pbf.writeFixed32Field(7, obj.textArgb);
    if (obj.subtextArgb !== undefined) pbf.writeFixed32Field(8, obj.subtextArgb);
    if (obj.mediaData) pbf.writeMessage(9, writePaymentBackgroundMediaData, obj.mediaData);
    if (obj.type !== undefined) pbf.writeVarintField(10, obj.type);
}

export enum PaymentBackgroundType {
    UNKNOWN = 0,
    DEFAULT = 1,
}

export interface PaymentBackgroundMediaData {
    mediaKey?: Uint8Array;
    mediaKeyTimestamp?: number;
    fileSha256?: Uint8Array;
    fileEncSha256?: Uint8Array;
    directPath?: string;
}

export function readPaymentBackgroundMediaData(pbf: Pbf, end?: number) {
    return pbf.readFields(readPaymentBackgroundMediaDataField, {mediaKey: undefined as unknown as Uint8Array, mediaKeyTimestamp: 0 as number, fileSha256: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, directPath: "" as string}, end);
}
function readPaymentBackgroundMediaDataField(tag: number, obj: PaymentBackgroundMediaData, pbf: Pbf) {
    if (tag === 1) obj.mediaKey = pbf.readBytes();
    else if (tag === 2) obj.mediaKeyTimestamp = pbf.readVarint(true);
    else if (tag === 3) obj.fileSha256 = pbf.readBytes();
    else if (tag === 4) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 5) obj.directPath = pbf.readString();
}
export function writePaymentBackgroundMediaData(obj: PaymentBackgroundMediaData, pbf: Pbf) {
    if (obj.mediaKey != null) pbf.writeBytesField(1, obj.mediaKey);
    if (obj.mediaKeyTimestamp !== undefined) pbf.writeVarintField(2, obj.mediaKeyTimestamp);
    if (obj.fileSha256 != null) pbf.writeBytesField(3, obj.fileSha256);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(4, obj.fileEncSha256);
    if (obj.directPath !== undefined) pbf.writeStringField(5, obj.directPath);
}

export interface PaymentInfo {
    currencyDeprecated?: PaymentInfoCurrency;
    amount1000?: number;
    receiverJid?: string;
    status?: PaymentInfoStatus;
    transactionTimestamp?: number;
    requestMessageKey?: MessageKey;
    expiryTimestamp?: number;
    futureproofed?: boolean;
    currency?: string;
    txnStatus?: PaymentInfoTxnStatus;
    useNoviFiatFormat?: boolean;
    primaryAmount?: Money;
    exchangeAmount?: Money;
}

export function readPaymentInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readPaymentInfoField, {currencyDeprecated: 0 as PaymentInfoCurrency, amount1000: 0 as number, receiverJid: "" as string, status: 0 as PaymentInfoStatus, transactionTimestamp: 0 as number, requestMessageKey: undefined as unknown as MessageKey, expiryTimestamp: 0 as number, futureproofed: false as boolean, currency: "" as string, txnStatus: 0 as PaymentInfoTxnStatus, useNoviFiatFormat: false as boolean, primaryAmount: undefined as unknown as Money, exchangeAmount: undefined as unknown as Money}, end);
}
function readPaymentInfoField(tag: number, obj: PaymentInfo, pbf: Pbf) {
    if (tag === 1) obj.currencyDeprecated = pbf.readVarint();
    else if (tag === 2) obj.amount1000 = pbf.readVarint();
    else if (tag === 3) obj.receiverJid = pbf.readString();
    else if (tag === 4) obj.status = pbf.readVarint();
    else if (tag === 5) obj.transactionTimestamp = pbf.readVarint();
    else if (tag === 6) obj.requestMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.expiryTimestamp = pbf.readVarint();
    else if (tag === 8) obj.futureproofed = pbf.readBoolean();
    else if (tag === 9) obj.currency = pbf.readString();
    else if (tag === 10) obj.txnStatus = pbf.readVarint();
    else if (tag === 11) obj.useNoviFiatFormat = pbf.readBoolean();
    else if (tag === 12) obj.primaryAmount = readMoney(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 13) obj.exchangeAmount = readMoney(pbf, pbf.readVarint() + pbf.pos);
}
export function writePaymentInfo(obj: PaymentInfo, pbf: Pbf) {
    if (obj.currencyDeprecated !== undefined) pbf.writeVarintField(1, obj.currencyDeprecated);
    if (obj.amount1000 !== undefined) pbf.writeVarintField(2, obj.amount1000);
    if (obj.receiverJid !== undefined) pbf.writeStringField(3, obj.receiverJid);
    if (obj.status !== undefined) pbf.writeVarintField(4, obj.status);
    if (obj.transactionTimestamp !== undefined) pbf.writeVarintField(5, obj.transactionTimestamp);
    if (obj.requestMessageKey) pbf.writeMessage(6, writeMessageKey, obj.requestMessageKey);
    if (obj.expiryTimestamp !== undefined) pbf.writeVarintField(7, obj.expiryTimestamp);
    if (obj.futureproofed !== undefined) pbf.writeBooleanField(8, obj.futureproofed);
    if (obj.currency !== undefined) pbf.writeStringField(9, obj.currency);
    if (obj.txnStatus !== undefined) pbf.writeVarintField(10, obj.txnStatus);
    if (obj.useNoviFiatFormat !== undefined) pbf.writeBooleanField(11, obj.useNoviFiatFormat);
    if (obj.primaryAmount) pbf.writeMessage(12, writeMoney, obj.primaryAmount);
    if (obj.exchangeAmount) pbf.writeMessage(13, writeMoney, obj.exchangeAmount);
}

export enum PaymentInfoCurrency {
    UNKNOWN_CURRENCY = 0,
    INR = 1,
}

export enum PaymentInfoStatus {
    UNKNOWN_STATUS = 0,
    PROCESSING = 1,
    SENT = 2,
    NEED_TO_ACCEPT = 3,
    COMPLETE = 4,
    COULD_NOT_COMPLETE = 5,
    REFUNDED = 6,
    EXPIRED = 7,
    REJECTED = 8,
    CANCELLED = 9,
    WAITING_FOR_PAYER = 10,
    WAITING = 11,
}

export enum PaymentInfoTxnStatus {
    UNKNOWN = 0,
    PENDING_SETUP = 1,
    PENDING_RECEIVER_SETUP = 2,
    INIT = 3,
    SUCCESS = 4,
    COMPLETED = 5,
    FAILED = 6,
    FAILED_RISK = 7,
    FAILED_PROCESSING = 8,
    FAILED_RECEIVER_PROCESSING = 9,
    FAILED_DA = 10,
    FAILED_DA_FINAL = 11,
    REFUNDED_TXN = 12,
    REFUND_FAILED = 13,
    REFUND_FAILED_PROCESSING = 14,
    REFUND_FAILED_DA = 15,
    EXPIRED_TXN = 16,
    AUTH_CANCELED = 17,
    AUTH_CANCEL_FAILED_PROCESSING = 18,
    AUTH_CANCEL_FAILED = 19,
    COLLECT_INIT = 20,
    COLLECT_SUCCESS = 21,
    COLLECT_FAILED = 22,
    COLLECT_FAILED_RISK = 23,
    COLLECT_REJECTED = 24,
    COLLECT_EXPIRED = 25,
    COLLECT_CANCELED = 26,
    COLLECT_CANCELLING = 27,
    IN_REVIEW = 28,
    REVERSAL_SUCCESS = 29,
    REVERSAL_PENDING = 30,
    REFUND_PENDING = 31,
}

export interface PhoneNumberToLIDMapping {
    pnJid?: string;
    lidJid?: string;
}

export function readPhoneNumberToLIDMapping(pbf: Pbf, end?: number) {
    return pbf.readFields(readPhoneNumberToLIDMappingField, {pnJid: "" as string, lidJid: "" as string}, end);
}
function readPhoneNumberToLIDMappingField(tag: number, obj: PhoneNumberToLIDMapping, pbf: Pbf) {
    if (tag === 1) obj.pnJid = pbf.readString();
    else if (tag === 2) obj.lidJid = pbf.readString();
}
export function writePhoneNumberToLIDMapping(obj: PhoneNumberToLIDMapping, pbf: Pbf) {
    if (obj.pnJid !== undefined) pbf.writeStringField(1, obj.pnJid);
    if (obj.lidJid !== undefined) pbf.writeStringField(2, obj.lidJid);
}

export interface PhotoChange {
    oldPhoto?: Uint8Array;
    newPhoto?: Uint8Array;
    newPhotoId?: number;
}

export function readPhotoChange(pbf: Pbf, end?: number) {
    return pbf.readFields(readPhotoChangeField, {oldPhoto: undefined as unknown as Uint8Array, newPhoto: undefined as unknown as Uint8Array, newPhotoId: 0 as number}, end);
}
function readPhotoChangeField(tag: number, obj: PhotoChange, pbf: Pbf) {
    if (tag === 1) obj.oldPhoto = pbf.readBytes();
    else if (tag === 2) obj.newPhoto = pbf.readBytes();
    else if (tag === 3) obj.newPhotoId = pbf.readVarint();
}
export function writePhotoChange(obj: PhotoChange, pbf: Pbf) {
    if (obj.oldPhoto != null) pbf.writeBytesField(1, obj.oldPhoto);
    if (obj.newPhoto != null) pbf.writeBytesField(2, obj.newPhoto);
    if (obj.newPhotoId !== undefined) pbf.writeVarintField(3, obj.newPhotoId);
}

export interface PinInChat {
    type?: PinInChatType;
    key?: MessageKey;
    senderTimestampMs?: number;
    serverTimestampMs?: number;
    messageAddOnContextInfo?: MessageAddOnContextInfo;
}

export function readPinInChat(pbf: Pbf, end?: number) {
    return pbf.readFields(readPinInChatField, {type: 0 as PinInChatType, key: undefined as unknown as MessageKey, senderTimestampMs: 0 as number, serverTimestampMs: 0 as number, messageAddOnContextInfo: undefined as unknown as MessageAddOnContextInfo}, end);
}
function readPinInChatField(tag: number, obj: PinInChat, pbf: Pbf) {
    if (tag === 1) obj.type = pbf.readVarint();
    else if (tag === 2) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.senderTimestampMs = pbf.readVarint(true);
    else if (tag === 4) obj.serverTimestampMs = pbf.readVarint(true);
    else if (tag === 5) obj.messageAddOnContextInfo = readMessageAddOnContextInfo(pbf, pbf.readVarint() + pbf.pos);
}
export function writePinInChat(obj: PinInChat, pbf: Pbf) {
    if (obj.type !== undefined) pbf.writeVarintField(1, obj.type);
    if (obj.key) pbf.writeMessage(2, writeMessageKey, obj.key);
    if (obj.senderTimestampMs !== undefined) pbf.writeVarintField(3, obj.senderTimestampMs);
    if (obj.serverTimestampMs !== undefined) pbf.writeVarintField(4, obj.serverTimestampMs);
    if (obj.messageAddOnContextInfo) pbf.writeMessage(5, writeMessageAddOnContextInfo, obj.messageAddOnContextInfo);
}

export enum PinInChatType {
    UNKNOWN_TYPE = 0,
    PIN_FOR_ALL = 1,
    UNPIN_FOR_ALL = 2,
}

export interface Point {
    xDeprecated?: number;
    yDeprecated?: number;
    x?: number;
    y?: number;
}

export function readPoint(pbf: Pbf, end?: number) {
    return pbf.readFields(readPointField, {xDeprecated: 0 as number, yDeprecated: 0 as number, x: 0 as number, y: 0 as number}, end);
}
function readPointField(tag: number, obj: Point, pbf: Pbf) {
    if (tag === 1) obj.xDeprecated = pbf.readVarint(true);
    else if (tag === 2) obj.yDeprecated = pbf.readVarint(true);
    else if (tag === 3) obj.x = pbf.readDouble();
    else if (tag === 4) obj.y = pbf.readDouble();
}
export function writePoint(obj: Point, pbf: Pbf) {
    if (obj.xDeprecated !== undefined) pbf.writeVarintField(1, obj.xDeprecated);
    if (obj.yDeprecated !== undefined) pbf.writeVarintField(2, obj.yDeprecated);
    if (obj.x !== undefined) pbf.writeDoubleField(3, obj.x);
    if (obj.y !== undefined) pbf.writeDoubleField(4, obj.y);
}

export interface PollAdditionalMetadata {
    pollInvalidated?: boolean;
}

export function readPollAdditionalMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readPollAdditionalMetadataField, {pollInvalidated: false as boolean}, end);
}
function readPollAdditionalMetadataField(tag: number, obj: PollAdditionalMetadata, pbf: Pbf) {
    if (tag === 1) obj.pollInvalidated = pbf.readBoolean();
}
export function writePollAdditionalMetadata(obj: PollAdditionalMetadata, pbf: Pbf) {
    if (obj.pollInvalidated !== undefined) pbf.writeBooleanField(1, obj.pollInvalidated);
}

export interface PollEncValue {
    encPayload?: Uint8Array;
    encIv?: Uint8Array;
}

export function readPollEncValue(pbf: Pbf, end?: number) {
    return pbf.readFields(readPollEncValueField, {encPayload: undefined as unknown as Uint8Array, encIv: undefined as unknown as Uint8Array}, end);
}
function readPollEncValueField(tag: number, obj: PollEncValue, pbf: Pbf) {
    if (tag === 1) obj.encPayload = pbf.readBytes();
    else if (tag === 2) obj.encIv = pbf.readBytes();
}
export function writePollEncValue(obj: PollEncValue, pbf: Pbf) {
    if (obj.encPayload != null) pbf.writeBytesField(1, obj.encPayload);
    if (obj.encIv != null) pbf.writeBytesField(2, obj.encIv);
}

export interface PollUpdate {
    pollUpdateMessageKey?: MessageKey;
    vote?: MessagePollVoteMessage;
    senderTimestampMs?: number;
    serverTimestampMs?: number;
    unread?: boolean;
}

export function readPollUpdate(pbf: Pbf, end?: number) {
    return pbf.readFields(readPollUpdateField, {pollUpdateMessageKey: undefined as unknown as MessageKey, vote: undefined as unknown as MessagePollVoteMessage, senderTimestampMs: 0 as number, serverTimestampMs: 0 as number, unread: false as boolean}, end);
}
function readPollUpdateField(tag: number, obj: PollUpdate, pbf: Pbf) {
    if (tag === 1) obj.pollUpdateMessageKey = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.vote = readMessagePollVoteMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.senderTimestampMs = pbf.readVarint(true);
    else if (tag === 4) obj.serverTimestampMs = pbf.readVarint(true);
    else if (tag === 5) obj.unread = pbf.readBoolean();
}
export function writePollUpdate(obj: PollUpdate, pbf: Pbf) {
    if (obj.pollUpdateMessageKey) pbf.writeMessage(1, writeMessageKey, obj.pollUpdateMessageKey);
    if (obj.vote) pbf.writeMessage(2, writeMessagePollVoteMessage, obj.vote);
    if (obj.senderTimestampMs !== undefined) pbf.writeVarintField(3, obj.senderTimestampMs);
    if (obj.serverTimestampMs !== undefined) pbf.writeVarintField(4, obj.serverTimestampMs);
    if (obj.unread !== undefined) pbf.writeBooleanField(5, obj.unread);
}

export interface PreKeyRecordStructure {
    id?: number;
    publicKey?: Uint8Array;
    privateKey?: Uint8Array;
}

export function readPreKeyRecordStructure(pbf: Pbf, end?: number) {
    return pbf.readFields(readPreKeyRecordStructureField, {id: 0 as number, publicKey: undefined as unknown as Uint8Array, privateKey: undefined as unknown as Uint8Array}, end);
}
function readPreKeyRecordStructureField(tag: number, obj: PreKeyRecordStructure, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.publicKey = pbf.readBytes();
    else if (tag === 3) obj.privateKey = pbf.readBytes();
}
export function writePreKeyRecordStructure(obj: PreKeyRecordStructure, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeVarintField(1, obj.id);
    if (obj.publicKey != null) pbf.writeBytesField(2, obj.publicKey);
    if (obj.privateKey != null) pbf.writeBytesField(3, obj.privateKey);
}

export interface PreKeySignalMessage {
    registrationId?: number;
    preKeyId?: number;
    signedPreKeyId?: number;
    baseKey?: Uint8Array;
    identityKey?: Uint8Array;
    message?: Uint8Array;
}

export function readPreKeySignalMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readPreKeySignalMessageField, {registrationId: 0 as number, preKeyId: 0 as number, signedPreKeyId: 0 as number, baseKey: undefined as unknown as Uint8Array, identityKey: undefined as unknown as Uint8Array, message: undefined as unknown as Uint8Array}, end);
}
function readPreKeySignalMessageField(tag: number, obj: PreKeySignalMessage, pbf: Pbf) {
    if (tag === 5) obj.registrationId = pbf.readVarint();
    else if (tag === 1) obj.preKeyId = pbf.readVarint();
    else if (tag === 6) obj.signedPreKeyId = pbf.readVarint();
    else if (tag === 2) obj.baseKey = pbf.readBytes();
    else if (tag === 3) obj.identityKey = pbf.readBytes();
    else if (tag === 4) obj.message = pbf.readBytes();
}
export function writePreKeySignalMessage(obj: PreKeySignalMessage, pbf: Pbf) {
    if (obj.registrationId !== undefined) pbf.writeVarintField(5, obj.registrationId);
    if (obj.preKeyId !== undefined) pbf.writeVarintField(1, obj.preKeyId);
    if (obj.signedPreKeyId !== undefined) pbf.writeVarintField(6, obj.signedPreKeyId);
    if (obj.baseKey != null) pbf.writeBytesField(2, obj.baseKey);
    if (obj.identityKey != null) pbf.writeBytesField(3, obj.identityKey);
    if (obj.message != null) pbf.writeBytesField(4, obj.message);
}

export interface PremiumMessageInfo {
    serverCampaignId?: string;
}

export function readPremiumMessageInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readPremiumMessageInfoField, {serverCampaignId: "" as string}, end);
}
function readPremiumMessageInfoField(tag: number, obj: PremiumMessageInfo, pbf: Pbf) {
    if (tag === 1) obj.serverCampaignId = pbf.readString();
}
export function writePremiumMessageInfo(obj: PremiumMessageInfo, pbf: Pbf) {
    if (obj.serverCampaignId !== undefined) pbf.writeStringField(1, obj.serverCampaignId);
}

export interface Pushname {
    id?: string;
    pushname?: string;
}

export function readPushname(pbf: Pbf, end?: number) {
    return pbf.readFields(readPushnameField, {id: "" as string, pushname: "" as string}, end);
}
function readPushnameField(tag: number, obj: Pushname, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readString();
    else if (tag === 2) obj.pushname = pbf.readString();
}
export function writePushname(obj: Pushname, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeStringField(1, obj.id);
    if (obj.pushname !== undefined) pbf.writeStringField(2, obj.pushname);
}

export interface QP {
}

export function readQP(pbf: Pbf, end?: number) {
    return pbf.readFields(readQPField, {}, end);
}
function readQPField(tag: number, obj: QP, pbf: Pbf) {
}
export function writeQP(obj: QP, pbf: Pbf) {
}

export enum QPClauseType {
    AND = 1,
    OR = 2,
    NOR = 3,
}

export enum QPFilterClientNotSupportedConfig {
    PASS_BY_DEFAULT = 1,
    FAIL_BY_DEFAULT = 2,
}

export enum QPFilterResult {
    TRUE = 1,
    FALSE = 2,
    UNKNOWN = 3,
}

export interface QPFilter {
    filterName: string;
    parameters?: QPFilterParameters[];
    filterResult?: QPFilterResult;
    clientNotSupportedConfig: QPFilterClientNotSupportedConfig;
}

export function readQPFilter(pbf: Pbf, end?: number) {
    return pbf.readFields(readQPFilterField, {filterName: "" as string, parameters: [] as QPFilterParameters[], filterResult: 0 as QPFilterResult, clientNotSupportedConfig: 0 as QPFilterClientNotSupportedConfig}, end);
}
function readQPFilterField(tag: number, obj: QPFilter, pbf: Pbf) {
    if (tag === 1) obj.filterName = pbf.readString();
    else if (tag === 2) obj.parameters?.push(readQPFilterParameters(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.filterResult = pbf.readVarint();
    else if (tag === 4) obj.clientNotSupportedConfig = pbf.readVarint();
}
export function writeQPFilter(obj: QPFilter, pbf: Pbf) {
    if (obj.filterName !== undefined) pbf.writeStringField(1, obj.filterName);
    if (obj.parameters) for (const item of obj.parameters) pbf.writeMessage(2, writeQPFilterParameters, item);
    if (obj.filterResult !== undefined) pbf.writeVarintField(3, obj.filterResult);
    if (obj.clientNotSupportedConfig !== undefined) pbf.writeVarintField(4, obj.clientNotSupportedConfig);
}

export interface QPFilterClause {
    clauseType: QPClauseType;
    clauses?: QPFilterClause[];
    filters?: QPFilter[];
}

export function readQPFilterClause(pbf: Pbf, end?: number) {
    return pbf.readFields(readQPFilterClauseField, {clauseType: 0 as QPClauseType, clauses: [] as QPFilterClause[], filters: [] as QPFilter[]}, end);
}
function readQPFilterClauseField(tag: number, obj: QPFilterClause, pbf: Pbf) {
    if (tag === 1) obj.clauseType = pbf.readVarint();
    else if (tag === 2) obj.clauses?.push(readQPFilterClause(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.filters?.push(readQPFilter(pbf, pbf.readVarint() + pbf.pos));
}
export function writeQPFilterClause(obj: QPFilterClause, pbf: Pbf) {
    if (obj.clauseType !== undefined) pbf.writeVarintField(1, obj.clauseType);
    if (obj.clauses) for (const item of obj.clauses) pbf.writeMessage(2, writeQPFilterClause, item);
    if (obj.filters) for (const item of obj.filters) pbf.writeMessage(3, writeQPFilter, item);
}

export interface QPFilterParameters {
    key?: string;
    value?: string;
}

export function readQPFilterParameters(pbf: Pbf, end?: number) {
    return pbf.readFields(readQPFilterParametersField, {key: "" as string, value: "" as string}, end);
}
function readQPFilterParametersField(tag: number, obj: QPFilterParameters, pbf: Pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readString();
}
export function writeQPFilterParameters(obj: QPFilterParameters, pbf: Pbf) {
    if (obj.key !== undefined) pbf.writeStringField(1, obj.key);
    if (obj.value !== undefined) pbf.writeStringField(2, obj.value);
}

export interface Reaction {
    key?: MessageKey;
    text?: string;
    groupingKey?: string;
    senderTimestampMs?: number;
    unread?: boolean;
}

export function readReaction(pbf: Pbf, end?: number) {
    return pbf.readFields(readReactionField, {key: undefined as unknown as MessageKey, text: "" as string, groupingKey: "" as string, senderTimestampMs: 0 as number, unread: false as boolean}, end);
}
function readReactionField(tag: number, obj: Reaction, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.text = pbf.readString();
    else if (tag === 3) obj.groupingKey = pbf.readString();
    else if (tag === 4) obj.senderTimestampMs = pbf.readVarint(true);
    else if (tag === 5) obj.unread = pbf.readBoolean();
}
export function writeReaction(obj: Reaction, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.text !== undefined) pbf.writeStringField(2, obj.text);
    if (obj.groupingKey !== undefined) pbf.writeStringField(3, obj.groupingKey);
    if (obj.senderTimestampMs !== undefined) pbf.writeVarintField(4, obj.senderTimestampMs);
    if (obj.unread !== undefined) pbf.writeBooleanField(5, obj.unread);
}

export interface RecentEmojiWeight {
    emoji?: string;
    weight?: number;
}

export function readRecentEmojiWeight(pbf: Pbf, end?: number) {
    return pbf.readFields(readRecentEmojiWeightField, {emoji: "" as string, weight: 0 as number}, end);
}
function readRecentEmojiWeightField(tag: number, obj: RecentEmojiWeight, pbf: Pbf) {
    if (tag === 1) obj.emoji = pbf.readString();
    else if (tag === 2) obj.weight = pbf.readFloat();
}
export function writeRecentEmojiWeight(obj: RecentEmojiWeight, pbf: Pbf) {
    if (obj.emoji !== undefined) pbf.writeStringField(1, obj.emoji);
    if (obj.weight !== undefined) pbf.writeFloatField(2, obj.weight);
}

export interface RecordStructure {
    currentSession?: SessionStructure;
    previousSessions?: SessionStructure[];
}

export function readRecordStructure(pbf: Pbf, end?: number) {
    return pbf.readFields(readRecordStructureField, {currentSession: undefined as unknown as SessionStructure, previousSessions: [] as SessionStructure[]}, end);
}
function readRecordStructureField(tag: number, obj: RecordStructure, pbf: Pbf) {
    if (tag === 1) obj.currentSession = readSessionStructure(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.previousSessions?.push(readSessionStructure(pbf, pbf.readVarint() + pbf.pos));
}
export function writeRecordStructure(obj: RecordStructure, pbf: Pbf) {
    if (obj.currentSession) pbf.writeMessage(1, writeSessionStructure, obj.currentSession);
    if (obj.previousSessions) for (const item of obj.previousSessions) pbf.writeMessage(2, writeSessionStructure, item);
}

export interface ReportingTokenInfo {
    reportingTag?: Uint8Array;
}

export function readReportingTokenInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readReportingTokenInfoField, {reportingTag: undefined as unknown as Uint8Array}, end);
}
function readReportingTokenInfoField(tag: number, obj: ReportingTokenInfo, pbf: Pbf) {
    if (tag === 1) obj.reportingTag = pbf.readBytes();
}
export function writeReportingTokenInfo(obj: ReportingTokenInfo, pbf: Pbf) {
    if (obj.reportingTag != null) pbf.writeBytesField(1, obj.reportingTag);
}

export interface SenderKeyDistributionMessage {
    id?: number;
    iteration?: number;
    chainKey?: Uint8Array;
    signingKey?: Uint8Array;
}

export function readSenderKeyDistributionMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readSenderKeyDistributionMessageField, {id: 0 as number, iteration: 0 as number, chainKey: undefined as unknown as Uint8Array, signingKey: undefined as unknown as Uint8Array}, end);
}
function readSenderKeyDistributionMessageField(tag: number, obj: SenderKeyDistributionMessage, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.iteration = pbf.readVarint();
    else if (tag === 3) obj.chainKey = pbf.readBytes();
    else if (tag === 4) obj.signingKey = pbf.readBytes();
}
export function writeSenderKeyDistributionMessage(obj: SenderKeyDistributionMessage, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeVarintField(1, obj.id);
    if (obj.iteration !== undefined) pbf.writeVarintField(2, obj.iteration);
    if (obj.chainKey != null) pbf.writeBytesField(3, obj.chainKey);
    if (obj.signingKey != null) pbf.writeBytesField(4, obj.signingKey);
}

export interface SenderKeyMessage {
    id?: number;
    iteration?: number;
    ciphertext?: Uint8Array;
}

export function readSenderKeyMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readSenderKeyMessageField, {id: 0 as number, iteration: 0 as number, ciphertext: undefined as unknown as Uint8Array}, end);
}
function readSenderKeyMessageField(tag: number, obj: SenderKeyMessage, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.iteration = pbf.readVarint();
    else if (tag === 3) obj.ciphertext = pbf.readBytes();
}
export function writeSenderKeyMessage(obj: SenderKeyMessage, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeVarintField(1, obj.id);
    if (obj.iteration !== undefined) pbf.writeVarintField(2, obj.iteration);
    if (obj.ciphertext != null) pbf.writeBytesField(3, obj.ciphertext);
}

export interface SenderKeyRecordStructure {
    senderKeyStates?: SenderKeyStateStructure[];
}

export function readSenderKeyRecordStructure(pbf: Pbf, end?: number) {
    return pbf.readFields(readSenderKeyRecordStructureField, {senderKeyStates: [] as SenderKeyStateStructure[]}, end);
}
function readSenderKeyRecordStructureField(tag: number, obj: SenderKeyRecordStructure, pbf: Pbf) {
    if (tag === 1) obj.senderKeyStates?.push(readSenderKeyStateStructure(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSenderKeyRecordStructure(obj: SenderKeyRecordStructure, pbf: Pbf) {
    if (obj.senderKeyStates) for (const item of obj.senderKeyStates) pbf.writeMessage(1, writeSenderKeyStateStructure, item);
}

export interface SenderKeyStateStructure {
    senderKeyId?: number;
    senderChainKey?: SenderKeyStateStructureSenderChainKey;
    senderSigningKey?: SenderKeyStateStructureSenderSigningKey;
    senderMessageKeys?: SenderKeyStateStructureSenderMessageKey[];
}

export function readSenderKeyStateStructure(pbf: Pbf, end?: number) {
    return pbf.readFields(readSenderKeyStateStructureField, {senderKeyId: 0 as number, senderChainKey: undefined as unknown as SenderKeyStateStructureSenderChainKey, senderSigningKey: undefined as unknown as SenderKeyStateStructureSenderSigningKey, senderMessageKeys: [] as SenderKeyStateStructureSenderMessageKey[]}, end);
}
function readSenderKeyStateStructureField(tag: number, obj: SenderKeyStateStructure, pbf: Pbf) {
    if (tag === 1) obj.senderKeyId = pbf.readVarint();
    else if (tag === 2) obj.senderChainKey = readSenderKeyStateStructureSenderChainKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.senderSigningKey = readSenderKeyStateStructureSenderSigningKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.senderMessageKeys?.push(readSenderKeyStateStructureSenderMessageKey(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSenderKeyStateStructure(obj: SenderKeyStateStructure, pbf: Pbf) {
    if (obj.senderKeyId !== undefined) pbf.writeVarintField(1, obj.senderKeyId);
    if (obj.senderChainKey) pbf.writeMessage(2, writeSenderKeyStateStructureSenderChainKey, obj.senderChainKey);
    if (obj.senderSigningKey) pbf.writeMessage(3, writeSenderKeyStateStructureSenderSigningKey, obj.senderSigningKey);
    if (obj.senderMessageKeys) for (const item of obj.senderMessageKeys) pbf.writeMessage(4, writeSenderKeyStateStructureSenderMessageKey, item);
}

export interface SenderKeyStateStructureSenderChainKey {
    iteration?: number;
    seed?: Uint8Array;
}

export function readSenderKeyStateStructureSenderChainKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readSenderKeyStateStructureSenderChainKeyField, {iteration: 0 as number, seed: undefined as unknown as Uint8Array}, end);
}
function readSenderKeyStateStructureSenderChainKeyField(tag: number, obj: SenderKeyStateStructureSenderChainKey, pbf: Pbf) {
    if (tag === 1) obj.iteration = pbf.readVarint();
    else if (tag === 2) obj.seed = pbf.readBytes();
}
export function writeSenderKeyStateStructureSenderChainKey(obj: SenderKeyStateStructureSenderChainKey, pbf: Pbf) {
    if (obj.iteration !== undefined) pbf.writeVarintField(1, obj.iteration);
    if (obj.seed != null) pbf.writeBytesField(2, obj.seed);
}

export interface SenderKeyStateStructureSenderMessageKey {
    iteration?: number;
    seed?: Uint8Array;
}

export function readSenderKeyStateStructureSenderMessageKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readSenderKeyStateStructureSenderMessageKeyField, {iteration: 0 as number, seed: undefined as unknown as Uint8Array}, end);
}
function readSenderKeyStateStructureSenderMessageKeyField(tag: number, obj: SenderKeyStateStructureSenderMessageKey, pbf: Pbf) {
    if (tag === 1) obj.iteration = pbf.readVarint();
    else if (tag === 2) obj.seed = pbf.readBytes();
}
export function writeSenderKeyStateStructureSenderMessageKey(obj: SenderKeyStateStructureSenderMessageKey, pbf: Pbf) {
    if (obj.iteration !== undefined) pbf.writeVarintField(1, obj.iteration);
    if (obj.seed != null) pbf.writeBytesField(2, obj.seed);
}

export interface SenderKeyStateStructureSenderSigningKey {
    public?: Uint8Array;
    private?: Uint8Array;
}

export function readSenderKeyStateStructureSenderSigningKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readSenderKeyStateStructureSenderSigningKeyField, {public: undefined as unknown as Uint8Array, private: undefined as unknown as Uint8Array}, end);
}
function readSenderKeyStateStructureSenderSigningKeyField(tag: number, obj: SenderKeyStateStructureSenderSigningKey, pbf: Pbf) {
    if (tag === 1) obj.public = pbf.readBytes();
    else if (tag === 2) obj.private = pbf.readBytes();
}
export function writeSenderKeyStateStructureSenderSigningKey(obj: SenderKeyStateStructureSenderSigningKey, pbf: Pbf) {
    if (obj.public != null) pbf.writeBytesField(1, obj.public);
    if (obj.private != null) pbf.writeBytesField(2, obj.private);
}

export interface ServerErrorReceipt {
    stanzaId?: string;
}

export function readServerErrorReceipt(pbf: Pbf, end?: number) {
    return pbf.readFields(readServerErrorReceiptField, {stanzaId: "" as string}, end);
}
function readServerErrorReceiptField(tag: number, obj: ServerErrorReceipt, pbf: Pbf) {
    if (tag === 1) obj.stanzaId = pbf.readString();
}
export function writeServerErrorReceipt(obj: ServerErrorReceipt, pbf: Pbf) {
    if (obj.stanzaId !== undefined) pbf.writeStringField(1, obj.stanzaId);
}

export interface SessionStructure {
    sessionVersion?: number;
    localIdentityPublic?: Uint8Array;
    remoteIdentityPublic?: Uint8Array;
    rootKey?: Uint8Array;
    previousCounter?: number;
    senderChain?: SessionStructureChain;
    receiverChains?: SessionStructureChain[];
    pendingKeyExchange?: SessionStructurePendingKeyExchange;
    pendingPreKey?: SessionStructurePendingPreKey;
    remoteRegistrationId?: number;
    localRegistrationId?: number;
    needsRefresh?: boolean;
    aliceBaseKey?: Uint8Array;
}

export function readSessionStructure(pbf: Pbf, end?: number) {
    return pbf.readFields(readSessionStructureField, {sessionVersion: 0 as number, localIdentityPublic: undefined as unknown as Uint8Array, remoteIdentityPublic: undefined as unknown as Uint8Array, rootKey: undefined as unknown as Uint8Array, previousCounter: 0 as number, senderChain: undefined as unknown as SessionStructureChain, receiverChains: [] as SessionStructureChain[], pendingKeyExchange: undefined as unknown as SessionStructurePendingKeyExchange, pendingPreKey: undefined as unknown as SessionStructurePendingPreKey, remoteRegistrationId: 0 as number, localRegistrationId: 0 as number, needsRefresh: false as boolean, aliceBaseKey: undefined as unknown as Uint8Array}, end);
}
function readSessionStructureField(tag: number, obj: SessionStructure, pbf: Pbf) {
    if (tag === 1) obj.sessionVersion = pbf.readVarint();
    else if (tag === 2) obj.localIdentityPublic = pbf.readBytes();
    else if (tag === 3) obj.remoteIdentityPublic = pbf.readBytes();
    else if (tag === 4) obj.rootKey = pbf.readBytes();
    else if (tag === 5) obj.previousCounter = pbf.readVarint();
    else if (tag === 6) obj.senderChain = readSessionStructureChain(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.receiverChains?.push(readSessionStructureChain(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.pendingKeyExchange = readSessionStructurePendingKeyExchange(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.pendingPreKey = readSessionStructurePendingPreKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.remoteRegistrationId = pbf.readVarint();
    else if (tag === 11) obj.localRegistrationId = pbf.readVarint();
    else if (tag === 12) obj.needsRefresh = pbf.readBoolean();
    else if (tag === 13) obj.aliceBaseKey = pbf.readBytes();
}
export function writeSessionStructure(obj: SessionStructure, pbf: Pbf) {
    if (obj.sessionVersion !== undefined) pbf.writeVarintField(1, obj.sessionVersion);
    if (obj.localIdentityPublic != null) pbf.writeBytesField(2, obj.localIdentityPublic);
    if (obj.remoteIdentityPublic != null) pbf.writeBytesField(3, obj.remoteIdentityPublic);
    if (obj.rootKey != null) pbf.writeBytesField(4, obj.rootKey);
    if (obj.previousCounter !== undefined) pbf.writeVarintField(5, obj.previousCounter);
    if (obj.senderChain) pbf.writeMessage(6, writeSessionStructureChain, obj.senderChain);
    if (obj.receiverChains) for (const item of obj.receiverChains) pbf.writeMessage(7, writeSessionStructureChain, item);
    if (obj.pendingKeyExchange) pbf.writeMessage(8, writeSessionStructurePendingKeyExchange, obj.pendingKeyExchange);
    if (obj.pendingPreKey) pbf.writeMessage(9, writeSessionStructurePendingPreKey, obj.pendingPreKey);
    if (obj.remoteRegistrationId !== undefined) pbf.writeVarintField(10, obj.remoteRegistrationId);
    if (obj.localRegistrationId !== undefined) pbf.writeVarintField(11, obj.localRegistrationId);
    if (obj.needsRefresh !== undefined) pbf.writeBooleanField(12, obj.needsRefresh);
    if (obj.aliceBaseKey != null) pbf.writeBytesField(13, obj.aliceBaseKey);
}

export interface SessionStructureChain {
    senderRatchetKey?: Uint8Array;
    senderRatchetKeyPrivate?: Uint8Array;
    chainKey?: SessionStructureChainChainKey;
    messageKeys?: SessionStructureChainMessageKey[];
}

export function readSessionStructureChain(pbf: Pbf, end?: number) {
    return pbf.readFields(readSessionStructureChainField, {senderRatchetKey: undefined as unknown as Uint8Array, senderRatchetKeyPrivate: undefined as unknown as Uint8Array, chainKey: undefined as unknown as SessionStructureChainChainKey, messageKeys: [] as SessionStructureChainMessageKey[]}, end);
}
function readSessionStructureChainField(tag: number, obj: SessionStructureChain, pbf: Pbf) {
    if (tag === 1) obj.senderRatchetKey = pbf.readBytes();
    else if (tag === 2) obj.senderRatchetKeyPrivate = pbf.readBytes();
    else if (tag === 3) obj.chainKey = readSessionStructureChainChainKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.messageKeys?.push(readSessionStructureChainMessageKey(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSessionStructureChain(obj: SessionStructureChain, pbf: Pbf) {
    if (obj.senderRatchetKey != null) pbf.writeBytesField(1, obj.senderRatchetKey);
    if (obj.senderRatchetKeyPrivate != null) pbf.writeBytesField(2, obj.senderRatchetKeyPrivate);
    if (obj.chainKey) pbf.writeMessage(3, writeSessionStructureChainChainKey, obj.chainKey);
    if (obj.messageKeys) for (const item of obj.messageKeys) pbf.writeMessage(4, writeSessionStructureChainMessageKey, item);
}

export interface SessionStructureChainChainKey {
    index?: number;
    key?: Uint8Array;
}

export function readSessionStructureChainChainKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readSessionStructureChainChainKeyField, {index: 0 as number, key: undefined as unknown as Uint8Array}, end);
}
function readSessionStructureChainChainKeyField(tag: number, obj: SessionStructureChainChainKey, pbf: Pbf) {
    if (tag === 1) obj.index = pbf.readVarint();
    else if (tag === 2) obj.key = pbf.readBytes();
}
export function writeSessionStructureChainChainKey(obj: SessionStructureChainChainKey, pbf: Pbf) {
    if (obj.index !== undefined) pbf.writeVarintField(1, obj.index);
    if (obj.key != null) pbf.writeBytesField(2, obj.key);
}

export interface SessionStructureChainMessageKey {
    index?: number;
    cipherKey?: Uint8Array;
    macKey?: Uint8Array;
    iv?: Uint8Array;
}

export function readSessionStructureChainMessageKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readSessionStructureChainMessageKeyField, {index: 0 as number, cipherKey: undefined as unknown as Uint8Array, macKey: undefined as unknown as Uint8Array, iv: undefined as unknown as Uint8Array}, end);
}
function readSessionStructureChainMessageKeyField(tag: number, obj: SessionStructureChainMessageKey, pbf: Pbf) {
    if (tag === 1) obj.index = pbf.readVarint();
    else if (tag === 2) obj.cipherKey = pbf.readBytes();
    else if (tag === 3) obj.macKey = pbf.readBytes();
    else if (tag === 4) obj.iv = pbf.readBytes();
}
export function writeSessionStructureChainMessageKey(obj: SessionStructureChainMessageKey, pbf: Pbf) {
    if (obj.index !== undefined) pbf.writeVarintField(1, obj.index);
    if (obj.cipherKey != null) pbf.writeBytesField(2, obj.cipherKey);
    if (obj.macKey != null) pbf.writeBytesField(3, obj.macKey);
    if (obj.iv != null) pbf.writeBytesField(4, obj.iv);
}

export interface SessionStructurePendingKeyExchange {
    sequence?: number;
    localBaseKey?: Uint8Array;
    localBaseKeyPrivate?: Uint8Array;
    localRatchetKey?: Uint8Array;
    localRatchetKeyPrivate?: Uint8Array;
    localIdentityKey?: Uint8Array;
    localIdentityKeyPrivate?: Uint8Array;
}

export function readSessionStructurePendingKeyExchange(pbf: Pbf, end?: number) {
    return pbf.readFields(readSessionStructurePendingKeyExchangeField, {sequence: 0 as number, localBaseKey: undefined as unknown as Uint8Array, localBaseKeyPrivate: undefined as unknown as Uint8Array, localRatchetKey: undefined as unknown as Uint8Array, localRatchetKeyPrivate: undefined as unknown as Uint8Array, localIdentityKey: undefined as unknown as Uint8Array, localIdentityKeyPrivate: undefined as unknown as Uint8Array}, end);
}
function readSessionStructurePendingKeyExchangeField(tag: number, obj: SessionStructurePendingKeyExchange, pbf: Pbf) {
    if (tag === 1) obj.sequence = pbf.readVarint();
    else if (tag === 2) obj.localBaseKey = pbf.readBytes();
    else if (tag === 3) obj.localBaseKeyPrivate = pbf.readBytes();
    else if (tag === 4) obj.localRatchetKey = pbf.readBytes();
    else if (tag === 5) obj.localRatchetKeyPrivate = pbf.readBytes();
    else if (tag === 7) obj.localIdentityKey = pbf.readBytes();
    else if (tag === 8) obj.localIdentityKeyPrivate = pbf.readBytes();
}
export function writeSessionStructurePendingKeyExchange(obj: SessionStructurePendingKeyExchange, pbf: Pbf) {
    if (obj.sequence !== undefined) pbf.writeVarintField(1, obj.sequence);
    if (obj.localBaseKey != null) pbf.writeBytesField(2, obj.localBaseKey);
    if (obj.localBaseKeyPrivate != null) pbf.writeBytesField(3, obj.localBaseKeyPrivate);
    if (obj.localRatchetKey != null) pbf.writeBytesField(4, obj.localRatchetKey);
    if (obj.localRatchetKeyPrivate != null) pbf.writeBytesField(5, obj.localRatchetKeyPrivate);
    if (obj.localIdentityKey != null) pbf.writeBytesField(7, obj.localIdentityKey);
    if (obj.localIdentityKeyPrivate != null) pbf.writeBytesField(8, obj.localIdentityKeyPrivate);
}

export interface SessionStructurePendingPreKey {
    preKeyId?: number;
    signedPreKeyId?: number;
    baseKey?: Uint8Array;
}

export function readSessionStructurePendingPreKey(pbf: Pbf, end?: number) {
    return pbf.readFields(readSessionStructurePendingPreKeyField, {preKeyId: 0 as number, signedPreKeyId: 0 as number, baseKey: undefined as unknown as Uint8Array}, end);
}
function readSessionStructurePendingPreKeyField(tag: number, obj: SessionStructurePendingPreKey, pbf: Pbf) {
    if (tag === 1) obj.preKeyId = pbf.readVarint();
    else if (tag === 3) obj.signedPreKeyId = pbf.readVarint(true);
    else if (tag === 2) obj.baseKey = pbf.readBytes();
}
export function writeSessionStructurePendingPreKey(obj: SessionStructurePendingPreKey, pbf: Pbf) {
    if (obj.preKeyId !== undefined) pbf.writeVarintField(1, obj.preKeyId);
    if (obj.signedPreKeyId !== undefined) pbf.writeVarintField(3, obj.signedPreKeyId);
    if (obj.baseKey != null) pbf.writeBytesField(2, obj.baseKey);
}

export interface SignalMessage {
    ratchetKey?: Uint8Array;
    counter?: number;
    previousCounter?: number;
    ciphertext?: Uint8Array;
}

export function readSignalMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readSignalMessageField, {ratchetKey: undefined as unknown as Uint8Array, counter: 0 as number, previousCounter: 0 as number, ciphertext: undefined as unknown as Uint8Array}, end);
}
function readSignalMessageField(tag: number, obj: SignalMessage, pbf: Pbf) {
    if (tag === 1) obj.ratchetKey = pbf.readBytes();
    else if (tag === 2) obj.counter = pbf.readVarint();
    else if (tag === 3) obj.previousCounter = pbf.readVarint();
    else if (tag === 4) obj.ciphertext = pbf.readBytes();
}
export function writeSignalMessage(obj: SignalMessage, pbf: Pbf) {
    if (obj.ratchetKey != null) pbf.writeBytesField(1, obj.ratchetKey);
    if (obj.counter !== undefined) pbf.writeVarintField(2, obj.counter);
    if (obj.previousCounter !== undefined) pbf.writeVarintField(3, obj.previousCounter);
    if (obj.ciphertext != null) pbf.writeBytesField(4, obj.ciphertext);
}

export interface SignedPreKeyRecordStructure {
    id?: number;
    publicKey?: Uint8Array;
    privateKey?: Uint8Array;
    signature?: Uint8Array;
    timestamp?: number;
}

export function readSignedPreKeyRecordStructure(pbf: Pbf, end?: number) {
    return pbf.readFields(readSignedPreKeyRecordStructureField, {id: 0 as number, publicKey: undefined as unknown as Uint8Array, privateKey: undefined as unknown as Uint8Array, signature: undefined as unknown as Uint8Array, timestamp: 0 as number}, end);
}
function readSignedPreKeyRecordStructureField(tag: number, obj: SignedPreKeyRecordStructure, pbf: Pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.publicKey = pbf.readBytes();
    else if (tag === 3) obj.privateKey = pbf.readBytes();
    else if (tag === 4) obj.signature = pbf.readBytes();
    else if (tag === 5) obj.timestamp = pbf.readFixed64();
}
export function writeSignedPreKeyRecordStructure(obj: SignedPreKeyRecordStructure, pbf: Pbf) {
    if (obj.id !== undefined) pbf.writeVarintField(1, obj.id);
    if (obj.publicKey != null) pbf.writeBytesField(2, obj.publicKey);
    if (obj.privateKey != null) pbf.writeBytesField(3, obj.privateKey);
    if (obj.signature != null) pbf.writeBytesField(4, obj.signature);
    if (obj.timestamp !== undefined) pbf.writeFixed64Field(5, obj.timestamp);
}

export interface StatusPSA {
    campaignId: number;
    campaignExpirationTimestamp?: number;
}

export function readStatusPSA(pbf: Pbf, end?: number) {
    return pbf.readFields(readStatusPSAField, {campaignId: 0 as number, campaignExpirationTimestamp: 0 as number}, end);
}
function readStatusPSAField(tag: number, obj: StatusPSA, pbf: Pbf) {
    if (tag === 44) obj.campaignId = pbf.readVarint();
    else if (tag === 45) obj.campaignExpirationTimestamp = pbf.readVarint();
}
export function writeStatusPSA(obj: StatusPSA, pbf: Pbf) {
    if (obj.campaignId !== undefined) pbf.writeVarintField(44, obj.campaignId);
    if (obj.campaignExpirationTimestamp !== undefined) pbf.writeVarintField(45, obj.campaignExpirationTimestamp);
}

export interface StickerMetadata {
    url?: string;
    fileSha256?: Uint8Array;
    fileEncSha256?: Uint8Array;
    mediaKey?: Uint8Array;
    mimetype?: string;
    height?: number;
    width?: number;
    directPath?: string;
    fileLength?: number;
    weight?: number;
    lastStickerSentTs?: number;
}

export function readStickerMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readStickerMetadataField, {url: "" as string, fileSha256: undefined as unknown as Uint8Array, fileEncSha256: undefined as unknown as Uint8Array, mediaKey: undefined as unknown as Uint8Array, mimetype: "" as string, height: 0 as number, width: 0 as number, directPath: "" as string, fileLength: 0 as number, weight: 0 as number, lastStickerSentTs: 0 as number}, end);
}
function readStickerMetadataField(tag: number, obj: StickerMetadata, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.fileSha256 = pbf.readBytes();
    else if (tag === 3) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 4) obj.mediaKey = pbf.readBytes();
    else if (tag === 5) obj.mimetype = pbf.readString();
    else if (tag === 6) obj.height = pbf.readVarint();
    else if (tag === 7) obj.width = pbf.readVarint();
    else if (tag === 8) obj.directPath = pbf.readString();
    else if (tag === 9) obj.fileLength = pbf.readVarint();
    else if (tag === 10) obj.weight = pbf.readFloat();
    else if (tag === 11) obj.lastStickerSentTs = pbf.readVarint(true);
}
export function writeStickerMetadata(obj: StickerMetadata, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.fileSha256 != null) pbf.writeBytesField(2, obj.fileSha256);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(3, obj.fileEncSha256);
    if (obj.mediaKey != null) pbf.writeBytesField(4, obj.mediaKey);
    if (obj.mimetype !== undefined) pbf.writeStringField(5, obj.mimetype);
    if (obj.height !== undefined) pbf.writeVarintField(6, obj.height);
    if (obj.width !== undefined) pbf.writeVarintField(7, obj.width);
    if (obj.directPath !== undefined) pbf.writeStringField(8, obj.directPath);
    if (obj.fileLength !== undefined) pbf.writeVarintField(9, obj.fileLength);
    if (obj.weight !== undefined) pbf.writeFloatField(10, obj.weight);
    if (obj.lastStickerSentTs !== undefined) pbf.writeVarintField(11, obj.lastStickerSentTs);
}

export interface SyncActionData {
    index?: Uint8Array;
    value?: SyncActionValue;
    padding?: Uint8Array;
    version?: number;
}

export function readSyncActionData(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionDataField, {index: undefined as unknown as Uint8Array, value: undefined as unknown as SyncActionValue, padding: undefined as unknown as Uint8Array, version: 0 as number}, end);
}
function readSyncActionDataField(tag: number, obj: SyncActionData, pbf: Pbf) {
    if (tag === 1) obj.index = pbf.readBytes();
    else if (tag === 2) obj.value = readSyncActionValue(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.padding = pbf.readBytes();
    else if (tag === 4) obj.version = pbf.readVarint(true);
}
export function writeSyncActionData(obj: SyncActionData, pbf: Pbf) {
    if (obj.index != null) pbf.writeBytesField(1, obj.index);
    if (obj.value) pbf.writeMessage(2, writeSyncActionValue, obj.value);
    if (obj.padding != null) pbf.writeBytesField(3, obj.padding);
    if (obj.version !== undefined) pbf.writeVarintField(4, obj.version);
}

export interface SyncActionValue {
    timestamp?: number;
    starAction?: SyncActionValueStarAction;
    contactAction?: SyncActionValueContactAction;
    muteAction?: SyncActionValueMuteAction;
    pinAction?: SyncActionValuePinAction;
    securityNotificationSetting?: SyncActionValueSecurityNotificationSetting;
    pushNameSetting?: SyncActionValuePushNameSetting;
    quickReplyAction?: SyncActionValueQuickReplyAction;
    recentEmojiWeightsAction?: SyncActionValueRecentEmojiWeightsAction;
    labelEditAction?: SyncActionValueLabelEditAction;
    labelAssociationAction?: SyncActionValueLabelAssociationAction;
    localeSetting?: SyncActionValueLocaleSetting;
    archiveChatAction?: SyncActionValueArchiveChatAction;
    deleteMessageForMeAction?: SyncActionValueDeleteMessageForMeAction;
    keyExpiration?: SyncActionValueKeyExpiration;
    markChatAsReadAction?: SyncActionValueMarkChatAsReadAction;
    clearChatAction?: SyncActionValueClearChatAction;
    deleteChatAction?: SyncActionValueDeleteChatAction;
    unarchiveChatsSetting?: SyncActionValueUnarchiveChatsSetting;
    primaryFeature?: SyncActionValuePrimaryFeature;
    androidUnsupportedActions?: SyncActionValueAndroidUnsupportedActions;
    agentAction?: SyncActionValueAgentAction;
    subscriptionAction?: SyncActionValueSubscriptionAction;
    userStatusMuteAction?: SyncActionValueUserStatusMuteAction;
    timeFormatAction?: SyncActionValueTimeFormatAction;
    nuxAction?: SyncActionValueNuxAction;
    primaryVersionAction?: SyncActionValuePrimaryVersionAction;
    stickerAction?: SyncActionValueStickerAction;
    removeRecentStickerAction?: SyncActionValueRemoveRecentStickerAction;
    chatAssignment?: SyncActionValueChatAssignmentAction;
    chatAssignmentOpenedStatus?: SyncActionValueChatAssignmentOpenedStatusAction;
    pnForLidChatAction?: SyncActionValuePnForLidChatAction;
    marketingMessageAction?: SyncActionValueMarketingMessageAction;
    marketingMessageBroadcastAction?: SyncActionValueMarketingMessageBroadcastAction;
    externalWebBetaAction?: SyncActionValueExternalWebBetaAction;
    privacySettingRelayAllCalls?: SyncActionValuePrivacySettingRelayAllCalls;
    callLogAction?: SyncActionValueCallLogAction;
    statusPrivacy?: SyncActionValueStatusPrivacyAction;
    botWelcomeRequestAction?: SyncActionValueBotWelcomeRequestAction;
    deleteIndividualCallLog?: SyncActionValueDeleteIndividualCallLogAction;
    labelReorderingAction?: SyncActionValueLabelReorderingAction;
    paymentInfoAction?: SyncActionValuePaymentInfoAction;
    customPaymentMethodsAction?: SyncActionValueCustomPaymentMethodsAction;
}

export function readSyncActionValue(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueField, {timestamp: 0 as number, starAction: undefined as unknown as SyncActionValueStarAction, contactAction: undefined as unknown as SyncActionValueContactAction, muteAction: undefined as unknown as SyncActionValueMuteAction, pinAction: undefined as unknown as SyncActionValuePinAction, securityNotificationSetting: undefined as unknown as SyncActionValueSecurityNotificationSetting, pushNameSetting: undefined as unknown as SyncActionValuePushNameSetting, quickReplyAction: undefined as unknown as SyncActionValueQuickReplyAction, recentEmojiWeightsAction: undefined as unknown as SyncActionValueRecentEmojiWeightsAction, labelEditAction: undefined as unknown as SyncActionValueLabelEditAction, labelAssociationAction: undefined as unknown as SyncActionValueLabelAssociationAction, localeSetting: undefined as unknown as SyncActionValueLocaleSetting, archiveChatAction: undefined as unknown as SyncActionValueArchiveChatAction, deleteMessageForMeAction: undefined as unknown as SyncActionValueDeleteMessageForMeAction, keyExpiration: undefined as unknown as SyncActionValueKeyExpiration, markChatAsReadAction: undefined as unknown as SyncActionValueMarkChatAsReadAction, clearChatAction: undefined as unknown as SyncActionValueClearChatAction, deleteChatAction: undefined as unknown as SyncActionValueDeleteChatAction, unarchiveChatsSetting: undefined as unknown as SyncActionValueUnarchiveChatsSetting, primaryFeature: undefined as unknown as SyncActionValuePrimaryFeature, androidUnsupportedActions: undefined as unknown as SyncActionValueAndroidUnsupportedActions, agentAction: undefined as unknown as SyncActionValueAgentAction, subscriptionAction: undefined as unknown as SyncActionValueSubscriptionAction, userStatusMuteAction: undefined as unknown as SyncActionValueUserStatusMuteAction, timeFormatAction: undefined as unknown as SyncActionValueTimeFormatAction, nuxAction: undefined as unknown as SyncActionValueNuxAction, primaryVersionAction: undefined as unknown as SyncActionValuePrimaryVersionAction, stickerAction: undefined as unknown as SyncActionValueStickerAction, removeRecentStickerAction: undefined as unknown as SyncActionValueRemoveRecentStickerAction, chatAssignment: undefined as unknown as SyncActionValueChatAssignmentAction, chatAssignmentOpenedStatus: undefined as unknown as SyncActionValueChatAssignmentOpenedStatusAction, pnForLidChatAction: undefined as unknown as SyncActionValuePnForLidChatAction, marketingMessageAction: undefined as unknown as SyncActionValueMarketingMessageAction, marketingMessageBroadcastAction: undefined as unknown as SyncActionValueMarketingMessageBroadcastAction, externalWebBetaAction: undefined as unknown as SyncActionValueExternalWebBetaAction, privacySettingRelayAllCalls: undefined as unknown as SyncActionValuePrivacySettingRelayAllCalls, callLogAction: undefined as unknown as SyncActionValueCallLogAction, statusPrivacy: undefined as unknown as SyncActionValueStatusPrivacyAction, botWelcomeRequestAction: undefined as unknown as SyncActionValueBotWelcomeRequestAction, deleteIndividualCallLog: undefined as unknown as SyncActionValueDeleteIndividualCallLogAction, labelReorderingAction: undefined as unknown as SyncActionValueLabelReorderingAction, paymentInfoAction: undefined as unknown as SyncActionValuePaymentInfoAction, customPaymentMethodsAction: undefined as unknown as SyncActionValueCustomPaymentMethodsAction}, end);
}
function readSyncActionValueField(tag: number, obj: SyncActionValue, pbf: Pbf) {
    if (tag === 1) obj.timestamp = pbf.readVarint(true);
    else if (tag === 2) obj.starAction = readSyncActionValueStarAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.contactAction = readSyncActionValueContactAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.muteAction = readSyncActionValueMuteAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.pinAction = readSyncActionValuePinAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.securityNotificationSetting = readSyncActionValueSecurityNotificationSetting(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.pushNameSetting = readSyncActionValuePushNameSetting(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.quickReplyAction = readSyncActionValueQuickReplyAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 11) obj.recentEmojiWeightsAction = readSyncActionValueRecentEmojiWeightsAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 14) obj.labelEditAction = readSyncActionValueLabelEditAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 15) obj.labelAssociationAction = readSyncActionValueLabelAssociationAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 16) obj.localeSetting = readSyncActionValueLocaleSetting(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 17) obj.archiveChatAction = readSyncActionValueArchiveChatAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 18) obj.deleteMessageForMeAction = readSyncActionValueDeleteMessageForMeAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 19) obj.keyExpiration = readSyncActionValueKeyExpiration(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 20) obj.markChatAsReadAction = readSyncActionValueMarkChatAsReadAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 21) obj.clearChatAction = readSyncActionValueClearChatAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 22) obj.deleteChatAction = readSyncActionValueDeleteChatAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 23) obj.unarchiveChatsSetting = readSyncActionValueUnarchiveChatsSetting(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 24) obj.primaryFeature = readSyncActionValuePrimaryFeature(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 26) obj.androidUnsupportedActions = readSyncActionValueAndroidUnsupportedActions(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 27) obj.agentAction = readSyncActionValueAgentAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 28) obj.subscriptionAction = readSyncActionValueSubscriptionAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 29) obj.userStatusMuteAction = readSyncActionValueUserStatusMuteAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 30) obj.timeFormatAction = readSyncActionValueTimeFormatAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 31) obj.nuxAction = readSyncActionValueNuxAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 32) obj.primaryVersionAction = readSyncActionValuePrimaryVersionAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 33) obj.stickerAction = readSyncActionValueStickerAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 34) obj.removeRecentStickerAction = readSyncActionValueRemoveRecentStickerAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 35) obj.chatAssignment = readSyncActionValueChatAssignmentAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 36) obj.chatAssignmentOpenedStatus = readSyncActionValueChatAssignmentOpenedStatusAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 37) obj.pnForLidChatAction = readSyncActionValuePnForLidChatAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 38) obj.marketingMessageAction = readSyncActionValueMarketingMessageAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 39) obj.marketingMessageBroadcastAction = readSyncActionValueMarketingMessageBroadcastAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 40) obj.externalWebBetaAction = readSyncActionValueExternalWebBetaAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 41) obj.privacySettingRelayAllCalls = readSyncActionValuePrivacySettingRelayAllCalls(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 42) obj.callLogAction = readSyncActionValueCallLogAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 44) obj.statusPrivacy = readSyncActionValueStatusPrivacyAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 45) obj.botWelcomeRequestAction = readSyncActionValueBotWelcomeRequestAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 46) obj.deleteIndividualCallLog = readSyncActionValueDeleteIndividualCallLogAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 47) obj.labelReorderingAction = readSyncActionValueLabelReorderingAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 48) obj.paymentInfoAction = readSyncActionValuePaymentInfoAction(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 49) obj.customPaymentMethodsAction = readSyncActionValueCustomPaymentMethodsAction(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncActionValue(obj: SyncActionValue, pbf: Pbf) {
    if (obj.timestamp !== undefined) pbf.writeVarintField(1, obj.timestamp);
    if (obj.starAction) pbf.writeMessage(2, writeSyncActionValueStarAction, obj.starAction);
    if (obj.contactAction) pbf.writeMessage(3, writeSyncActionValueContactAction, obj.contactAction);
    if (obj.muteAction) pbf.writeMessage(4, writeSyncActionValueMuteAction, obj.muteAction);
    if (obj.pinAction) pbf.writeMessage(5, writeSyncActionValuePinAction, obj.pinAction);
    if (obj.securityNotificationSetting) pbf.writeMessage(6, writeSyncActionValueSecurityNotificationSetting, obj.securityNotificationSetting);
    if (obj.pushNameSetting) pbf.writeMessage(7, writeSyncActionValuePushNameSetting, obj.pushNameSetting);
    if (obj.quickReplyAction) pbf.writeMessage(8, writeSyncActionValueQuickReplyAction, obj.quickReplyAction);
    if (obj.recentEmojiWeightsAction) pbf.writeMessage(11, writeSyncActionValueRecentEmojiWeightsAction, obj.recentEmojiWeightsAction);
    if (obj.labelEditAction) pbf.writeMessage(14, writeSyncActionValueLabelEditAction, obj.labelEditAction);
    if (obj.labelAssociationAction) pbf.writeMessage(15, writeSyncActionValueLabelAssociationAction, obj.labelAssociationAction);
    if (obj.localeSetting) pbf.writeMessage(16, writeSyncActionValueLocaleSetting, obj.localeSetting);
    if (obj.archiveChatAction) pbf.writeMessage(17, writeSyncActionValueArchiveChatAction, obj.archiveChatAction);
    if (obj.deleteMessageForMeAction) pbf.writeMessage(18, writeSyncActionValueDeleteMessageForMeAction, obj.deleteMessageForMeAction);
    if (obj.keyExpiration) pbf.writeMessage(19, writeSyncActionValueKeyExpiration, obj.keyExpiration);
    if (obj.markChatAsReadAction) pbf.writeMessage(20, writeSyncActionValueMarkChatAsReadAction, obj.markChatAsReadAction);
    if (obj.clearChatAction) pbf.writeMessage(21, writeSyncActionValueClearChatAction, obj.clearChatAction);
    if (obj.deleteChatAction) pbf.writeMessage(22, writeSyncActionValueDeleteChatAction, obj.deleteChatAction);
    if (obj.unarchiveChatsSetting) pbf.writeMessage(23, writeSyncActionValueUnarchiveChatsSetting, obj.unarchiveChatsSetting);
    if (obj.primaryFeature) pbf.writeMessage(24, writeSyncActionValuePrimaryFeature, obj.primaryFeature);
    if (obj.androidUnsupportedActions) pbf.writeMessage(26, writeSyncActionValueAndroidUnsupportedActions, obj.androidUnsupportedActions);
    if (obj.agentAction) pbf.writeMessage(27, writeSyncActionValueAgentAction, obj.agentAction);
    if (obj.subscriptionAction) pbf.writeMessage(28, writeSyncActionValueSubscriptionAction, obj.subscriptionAction);
    if (obj.userStatusMuteAction) pbf.writeMessage(29, writeSyncActionValueUserStatusMuteAction, obj.userStatusMuteAction);
    if (obj.timeFormatAction) pbf.writeMessage(30, writeSyncActionValueTimeFormatAction, obj.timeFormatAction);
    if (obj.nuxAction) pbf.writeMessage(31, writeSyncActionValueNuxAction, obj.nuxAction);
    if (obj.primaryVersionAction) pbf.writeMessage(32, writeSyncActionValuePrimaryVersionAction, obj.primaryVersionAction);
    if (obj.stickerAction) pbf.writeMessage(33, writeSyncActionValueStickerAction, obj.stickerAction);
    if (obj.removeRecentStickerAction) pbf.writeMessage(34, writeSyncActionValueRemoveRecentStickerAction, obj.removeRecentStickerAction);
    if (obj.chatAssignment) pbf.writeMessage(35, writeSyncActionValueChatAssignmentAction, obj.chatAssignment);
    if (obj.chatAssignmentOpenedStatus) pbf.writeMessage(36, writeSyncActionValueChatAssignmentOpenedStatusAction, obj.chatAssignmentOpenedStatus);
    if (obj.pnForLidChatAction) pbf.writeMessage(37, writeSyncActionValuePnForLidChatAction, obj.pnForLidChatAction);
    if (obj.marketingMessageAction) pbf.writeMessage(38, writeSyncActionValueMarketingMessageAction, obj.marketingMessageAction);
    if (obj.marketingMessageBroadcastAction) pbf.writeMessage(39, writeSyncActionValueMarketingMessageBroadcastAction, obj.marketingMessageBroadcastAction);
    if (obj.externalWebBetaAction) pbf.writeMessage(40, writeSyncActionValueExternalWebBetaAction, obj.externalWebBetaAction);
    if (obj.privacySettingRelayAllCalls) pbf.writeMessage(41, writeSyncActionValuePrivacySettingRelayAllCalls, obj.privacySettingRelayAllCalls);
    if (obj.callLogAction) pbf.writeMessage(42, writeSyncActionValueCallLogAction, obj.callLogAction);
    if (obj.statusPrivacy) pbf.writeMessage(44, writeSyncActionValueStatusPrivacyAction, obj.statusPrivacy);
    if (obj.botWelcomeRequestAction) pbf.writeMessage(45, writeSyncActionValueBotWelcomeRequestAction, obj.botWelcomeRequestAction);
    if (obj.deleteIndividualCallLog) pbf.writeMessage(46, writeSyncActionValueDeleteIndividualCallLogAction, obj.deleteIndividualCallLog);
    if (obj.labelReorderingAction) pbf.writeMessage(47, writeSyncActionValueLabelReorderingAction, obj.labelReorderingAction);
    if (obj.paymentInfoAction) pbf.writeMessage(48, writeSyncActionValuePaymentInfoAction, obj.paymentInfoAction);
    if (obj.customPaymentMethodsAction) pbf.writeMessage(49, writeSyncActionValueCustomPaymentMethodsAction, obj.customPaymentMethodsAction);
}

export interface SyncActionValueAgentAction {
    name?: string;
    deviceID?: number;
    isDeleted?: boolean;
}

export function readSyncActionValueAgentAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueAgentActionField, {name: "" as string, deviceID: 0 as number, isDeleted: false as boolean}, end);
}
function readSyncActionValueAgentActionField(tag: number, obj: SyncActionValueAgentAction, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.deviceID = pbf.readVarint(true);
    else if (tag === 3) obj.isDeleted = pbf.readBoolean();
}
export function writeSyncActionValueAgentAction(obj: SyncActionValueAgentAction, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
    if (obj.deviceID !== undefined) pbf.writeVarintField(2, obj.deviceID);
    if (obj.isDeleted !== undefined) pbf.writeBooleanField(3, obj.isDeleted);
}

export interface SyncActionValueAndroidUnsupportedActions {
    allowed?: boolean;
}

export function readSyncActionValueAndroidUnsupportedActions(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueAndroidUnsupportedActionsField, {allowed: false as boolean}, end);
}
function readSyncActionValueAndroidUnsupportedActionsField(tag: number, obj: SyncActionValueAndroidUnsupportedActions, pbf: Pbf) {
    if (tag === 1) obj.allowed = pbf.readBoolean();
}
export function writeSyncActionValueAndroidUnsupportedActions(obj: SyncActionValueAndroidUnsupportedActions, pbf: Pbf) {
    if (obj.allowed !== undefined) pbf.writeBooleanField(1, obj.allowed);
}

export interface SyncActionValueArchiveChatAction {
    archived?: boolean;
    messageRange?: SyncActionValueSyncActionMessageRange;
}

export function readSyncActionValueArchiveChatAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueArchiveChatActionField, {archived: false as boolean, messageRange: undefined as unknown as SyncActionValueSyncActionMessageRange}, end);
}
function readSyncActionValueArchiveChatActionField(tag: number, obj: SyncActionValueArchiveChatAction, pbf: Pbf) {
    if (tag === 1) obj.archived = pbf.readBoolean();
    else if (tag === 2) obj.messageRange = readSyncActionValueSyncActionMessageRange(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncActionValueArchiveChatAction(obj: SyncActionValueArchiveChatAction, pbf: Pbf) {
    if (obj.archived !== undefined) pbf.writeBooleanField(1, obj.archived);
    if (obj.messageRange) pbf.writeMessage(2, writeSyncActionValueSyncActionMessageRange, obj.messageRange);
}

export interface SyncActionValueBotWelcomeRequestAction {
    isSent?: boolean;
}

export function readSyncActionValueBotWelcomeRequestAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueBotWelcomeRequestActionField, {isSent: false as boolean}, end);
}
function readSyncActionValueBotWelcomeRequestActionField(tag: number, obj: SyncActionValueBotWelcomeRequestAction, pbf: Pbf) {
    if (tag === 1) obj.isSent = pbf.readBoolean();
}
export function writeSyncActionValueBotWelcomeRequestAction(obj: SyncActionValueBotWelcomeRequestAction, pbf: Pbf) {
    if (obj.isSent !== undefined) pbf.writeBooleanField(1, obj.isSent);
}

export interface SyncActionValueCallLogAction {
    callLogRecord?: CallLogRecord;
}

export function readSyncActionValueCallLogAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueCallLogActionField, {callLogRecord: undefined as unknown as CallLogRecord}, end);
}
function readSyncActionValueCallLogActionField(tag: number, obj: SyncActionValueCallLogAction, pbf: Pbf) {
    if (tag === 1) obj.callLogRecord = readCallLogRecord(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncActionValueCallLogAction(obj: SyncActionValueCallLogAction, pbf: Pbf) {
    if (obj.callLogRecord) pbf.writeMessage(1, writeCallLogRecord, obj.callLogRecord);
}

export interface SyncActionValueChatAssignmentAction {
    deviceAgentID?: string;
}

export function readSyncActionValueChatAssignmentAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueChatAssignmentActionField, {deviceAgentID: "" as string}, end);
}
function readSyncActionValueChatAssignmentActionField(tag: number, obj: SyncActionValueChatAssignmentAction, pbf: Pbf) {
    if (tag === 1) obj.deviceAgentID = pbf.readString();
}
export function writeSyncActionValueChatAssignmentAction(obj: SyncActionValueChatAssignmentAction, pbf: Pbf) {
    if (obj.deviceAgentID !== undefined) pbf.writeStringField(1, obj.deviceAgentID);
}

export interface SyncActionValueChatAssignmentOpenedStatusAction {
    chatOpened?: boolean;
}

export function readSyncActionValueChatAssignmentOpenedStatusAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueChatAssignmentOpenedStatusActionField, {chatOpened: false as boolean}, end);
}
function readSyncActionValueChatAssignmentOpenedStatusActionField(tag: number, obj: SyncActionValueChatAssignmentOpenedStatusAction, pbf: Pbf) {
    if (tag === 1) obj.chatOpened = pbf.readBoolean();
}
export function writeSyncActionValueChatAssignmentOpenedStatusAction(obj: SyncActionValueChatAssignmentOpenedStatusAction, pbf: Pbf) {
    if (obj.chatOpened !== undefined) pbf.writeBooleanField(1, obj.chatOpened);
}

export interface SyncActionValueClearChatAction {
    messageRange?: SyncActionValueSyncActionMessageRange;
}

export function readSyncActionValueClearChatAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueClearChatActionField, {messageRange: undefined as unknown as SyncActionValueSyncActionMessageRange}, end);
}
function readSyncActionValueClearChatActionField(tag: number, obj: SyncActionValueClearChatAction, pbf: Pbf) {
    if (tag === 1) obj.messageRange = readSyncActionValueSyncActionMessageRange(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncActionValueClearChatAction(obj: SyncActionValueClearChatAction, pbf: Pbf) {
    if (obj.messageRange) pbf.writeMessage(1, writeSyncActionValueSyncActionMessageRange, obj.messageRange);
}

export interface SyncActionValueContactAction {
    fullName?: string;
    firstName?: string;
    lidJid?: string;
    saveOnPrimaryAddressbook?: boolean;
}

export function readSyncActionValueContactAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueContactActionField, {fullName: "" as string, firstName: "" as string, lidJid: "" as string, saveOnPrimaryAddressbook: false as boolean}, end);
}
function readSyncActionValueContactActionField(tag: number, obj: SyncActionValueContactAction, pbf: Pbf) {
    if (tag === 1) obj.fullName = pbf.readString();
    else if (tag === 2) obj.firstName = pbf.readString();
    else if (tag === 3) obj.lidJid = pbf.readString();
    else if (tag === 4) obj.saveOnPrimaryAddressbook = pbf.readBoolean();
}
export function writeSyncActionValueContactAction(obj: SyncActionValueContactAction, pbf: Pbf) {
    if (obj.fullName !== undefined) pbf.writeStringField(1, obj.fullName);
    if (obj.firstName !== undefined) pbf.writeStringField(2, obj.firstName);
    if (obj.lidJid !== undefined) pbf.writeStringField(3, obj.lidJid);
    if (obj.saveOnPrimaryAddressbook !== undefined) pbf.writeBooleanField(4, obj.saveOnPrimaryAddressbook);
}

export interface SyncActionValueCustomPaymentMethod {
    credentialId: string;
    country: string;
    type: string;
    metadata?: SyncActionValueCustomPaymentMethodMetadata[];
}

export function readSyncActionValueCustomPaymentMethod(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueCustomPaymentMethodField, {credentialId: "" as string, country: "" as string, type: "" as string, metadata: [] as SyncActionValueCustomPaymentMethodMetadata[]}, end);
}
function readSyncActionValueCustomPaymentMethodField(tag: number, obj: SyncActionValueCustomPaymentMethod, pbf: Pbf) {
    if (tag === 1) obj.credentialId = pbf.readString();
    else if (tag === 2) obj.country = pbf.readString();
    else if (tag === 3) obj.type = pbf.readString();
    else if (tag === 4) obj.metadata?.push(readSyncActionValueCustomPaymentMethodMetadata(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSyncActionValueCustomPaymentMethod(obj: SyncActionValueCustomPaymentMethod, pbf: Pbf) {
    if (obj.credentialId !== undefined) pbf.writeStringField(1, obj.credentialId);
    if (obj.country !== undefined) pbf.writeStringField(2, obj.country);
    if (obj.type !== undefined) pbf.writeStringField(3, obj.type);
    if (obj.metadata) for (const item of obj.metadata) pbf.writeMessage(4, writeSyncActionValueCustomPaymentMethodMetadata, item);
}

export interface SyncActionValueCustomPaymentMethodMetadata {
    key: string;
    value: string;
}

export function readSyncActionValueCustomPaymentMethodMetadata(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueCustomPaymentMethodMetadataField, {key: "" as string, value: "" as string}, end);
}
function readSyncActionValueCustomPaymentMethodMetadataField(tag: number, obj: SyncActionValueCustomPaymentMethodMetadata, pbf: Pbf) {
    if (tag === 1) obj.key = pbf.readString();
    else if (tag === 2) obj.value = pbf.readString();
}
export function writeSyncActionValueCustomPaymentMethodMetadata(obj: SyncActionValueCustomPaymentMethodMetadata, pbf: Pbf) {
    if (obj.key !== undefined) pbf.writeStringField(1, obj.key);
    if (obj.value !== undefined) pbf.writeStringField(2, obj.value);
}

export interface SyncActionValueCustomPaymentMethodsAction {
    customPaymentMethods?: SyncActionValueCustomPaymentMethod[];
}

export function readSyncActionValueCustomPaymentMethodsAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueCustomPaymentMethodsActionField, {customPaymentMethods: [] as SyncActionValueCustomPaymentMethod[]}, end);
}
function readSyncActionValueCustomPaymentMethodsActionField(tag: number, obj: SyncActionValueCustomPaymentMethodsAction, pbf: Pbf) {
    if (tag === 1) obj.customPaymentMethods?.push(readSyncActionValueCustomPaymentMethod(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSyncActionValueCustomPaymentMethodsAction(obj: SyncActionValueCustomPaymentMethodsAction, pbf: Pbf) {
    if (obj.customPaymentMethods) for (const item of obj.customPaymentMethods) pbf.writeMessage(1, writeSyncActionValueCustomPaymentMethod, item);
}

export interface SyncActionValueDeleteChatAction {
    messageRange?: SyncActionValueSyncActionMessageRange;
}

export function readSyncActionValueDeleteChatAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueDeleteChatActionField, {messageRange: undefined as unknown as SyncActionValueSyncActionMessageRange}, end);
}
function readSyncActionValueDeleteChatActionField(tag: number, obj: SyncActionValueDeleteChatAction, pbf: Pbf) {
    if (tag === 1) obj.messageRange = readSyncActionValueSyncActionMessageRange(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncActionValueDeleteChatAction(obj: SyncActionValueDeleteChatAction, pbf: Pbf) {
    if (obj.messageRange) pbf.writeMessage(1, writeSyncActionValueSyncActionMessageRange, obj.messageRange);
}

export interface SyncActionValueDeleteIndividualCallLogAction {
    peerJid?: string;
    isIncoming?: boolean;
}

export function readSyncActionValueDeleteIndividualCallLogAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueDeleteIndividualCallLogActionField, {peerJid: "" as string, isIncoming: false as boolean}, end);
}
function readSyncActionValueDeleteIndividualCallLogActionField(tag: number, obj: SyncActionValueDeleteIndividualCallLogAction, pbf: Pbf) {
    if (tag === 1) obj.peerJid = pbf.readString();
    else if (tag === 2) obj.isIncoming = pbf.readBoolean();
}
export function writeSyncActionValueDeleteIndividualCallLogAction(obj: SyncActionValueDeleteIndividualCallLogAction, pbf: Pbf) {
    if (obj.peerJid !== undefined) pbf.writeStringField(1, obj.peerJid);
    if (obj.isIncoming !== undefined) pbf.writeBooleanField(2, obj.isIncoming);
}

export interface SyncActionValueDeleteMessageForMeAction {
    deleteMedia?: boolean;
    messageTimestamp?: number;
}

export function readSyncActionValueDeleteMessageForMeAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueDeleteMessageForMeActionField, {deleteMedia: false as boolean, messageTimestamp: 0 as number}, end);
}
function readSyncActionValueDeleteMessageForMeActionField(tag: number, obj: SyncActionValueDeleteMessageForMeAction, pbf: Pbf) {
    if (tag === 1) obj.deleteMedia = pbf.readBoolean();
    else if (tag === 2) obj.messageTimestamp = pbf.readVarint(true);
}
export function writeSyncActionValueDeleteMessageForMeAction(obj: SyncActionValueDeleteMessageForMeAction, pbf: Pbf) {
    if (obj.deleteMedia !== undefined) pbf.writeBooleanField(1, obj.deleteMedia);
    if (obj.messageTimestamp !== undefined) pbf.writeVarintField(2, obj.messageTimestamp);
}

export interface SyncActionValueExternalWebBetaAction {
    isOptIn?: boolean;
}

export function readSyncActionValueExternalWebBetaAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueExternalWebBetaActionField, {isOptIn: false as boolean}, end);
}
function readSyncActionValueExternalWebBetaActionField(tag: number, obj: SyncActionValueExternalWebBetaAction, pbf: Pbf) {
    if (tag === 1) obj.isOptIn = pbf.readBoolean();
}
export function writeSyncActionValueExternalWebBetaAction(obj: SyncActionValueExternalWebBetaAction, pbf: Pbf) {
    if (obj.isOptIn !== undefined) pbf.writeBooleanField(1, obj.isOptIn);
}

export interface SyncActionValueKeyExpiration {
    expiredKeyEpoch?: number;
}

export function readSyncActionValueKeyExpiration(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueKeyExpirationField, {expiredKeyEpoch: 0 as number}, end);
}
function readSyncActionValueKeyExpirationField(tag: number, obj: SyncActionValueKeyExpiration, pbf: Pbf) {
    if (tag === 1) obj.expiredKeyEpoch = pbf.readVarint(true);
}
export function writeSyncActionValueKeyExpiration(obj: SyncActionValueKeyExpiration, pbf: Pbf) {
    if (obj.expiredKeyEpoch !== undefined) pbf.writeVarintField(1, obj.expiredKeyEpoch);
}

export interface SyncActionValueLabelAssociationAction {
    labeled?: boolean;
}

export function readSyncActionValueLabelAssociationAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueLabelAssociationActionField, {labeled: false as boolean}, end);
}
function readSyncActionValueLabelAssociationActionField(tag: number, obj: SyncActionValueLabelAssociationAction, pbf: Pbf) {
    if (tag === 1) obj.labeled = pbf.readBoolean();
}
export function writeSyncActionValueLabelAssociationAction(obj: SyncActionValueLabelAssociationAction, pbf: Pbf) {
    if (obj.labeled !== undefined) pbf.writeBooleanField(1, obj.labeled);
}

export interface SyncActionValueLabelEditAction {
    name?: string;
    color?: number;
    predefinedId?: number;
    deleted?: boolean;
    orderIndex?: number;
}

export function readSyncActionValueLabelEditAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueLabelEditActionField, {name: "" as string, color: 0 as number, predefinedId: 0 as number, deleted: false as boolean, orderIndex: 0 as number}, end);
}
function readSyncActionValueLabelEditActionField(tag: number, obj: SyncActionValueLabelEditAction, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.color = pbf.readVarint(true);
    else if (tag === 3) obj.predefinedId = pbf.readVarint(true);
    else if (tag === 4) obj.deleted = pbf.readBoolean();
    else if (tag === 5) obj.orderIndex = pbf.readVarint(true);
}
export function writeSyncActionValueLabelEditAction(obj: SyncActionValueLabelEditAction, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
    if (obj.color !== undefined) pbf.writeVarintField(2, obj.color);
    if (obj.predefinedId !== undefined) pbf.writeVarintField(3, obj.predefinedId);
    if (obj.deleted !== undefined) pbf.writeBooleanField(4, obj.deleted);
    if (obj.orderIndex !== undefined) pbf.writeVarintField(5, obj.orderIndex);
}

export interface SyncActionValueLabelReorderingAction {
    sortedLabelIds?: number[];
}

export function readSyncActionValueLabelReorderingAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueLabelReorderingActionField, {sortedLabelIds: [] as number[]}, end);
}
function readSyncActionValueLabelReorderingActionField(tag: number, obj: SyncActionValueLabelReorderingAction, pbf: Pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.sortedLabelIds, true);
}
export function writeSyncActionValueLabelReorderingAction(obj: SyncActionValueLabelReorderingAction, pbf: Pbf) {
    if (obj.sortedLabelIds) for (const item of obj.sortedLabelIds) pbf.writeVarintField(1, item);
}

export interface SyncActionValueLocaleSetting {
    locale?: string;
}

export function readSyncActionValueLocaleSetting(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueLocaleSettingField, {locale: "" as string}, end);
}
function readSyncActionValueLocaleSettingField(tag: number, obj: SyncActionValueLocaleSetting, pbf: Pbf) {
    if (tag === 1) obj.locale = pbf.readString();
}
export function writeSyncActionValueLocaleSetting(obj: SyncActionValueLocaleSetting, pbf: Pbf) {
    if (obj.locale !== undefined) pbf.writeStringField(1, obj.locale);
}

export interface SyncActionValueMarkChatAsReadAction {
    read?: boolean;
    messageRange?: SyncActionValueSyncActionMessageRange;
}

export function readSyncActionValueMarkChatAsReadAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueMarkChatAsReadActionField, {read: false as boolean, messageRange: undefined as unknown as SyncActionValueSyncActionMessageRange}, end);
}
function readSyncActionValueMarkChatAsReadActionField(tag: number, obj: SyncActionValueMarkChatAsReadAction, pbf: Pbf) {
    if (tag === 1) obj.read = pbf.readBoolean();
    else if (tag === 2) obj.messageRange = readSyncActionValueSyncActionMessageRange(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncActionValueMarkChatAsReadAction(obj: SyncActionValueMarkChatAsReadAction, pbf: Pbf) {
    if (obj.read !== undefined) pbf.writeBooleanField(1, obj.read);
    if (obj.messageRange) pbf.writeMessage(2, writeSyncActionValueSyncActionMessageRange, obj.messageRange);
}

export interface SyncActionValueMarketingMessageAction {
    name?: string;
    message?: string;
    type?: SyncActionValueMarketingMessageActionMarketingMessagePrototypeType;
    createdAt?: number;
    lastSentAt?: number;
    isDeleted?: boolean;
    mediaId?: string;
}

export function readSyncActionValueMarketingMessageAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueMarketingMessageActionField, {name: "" as string, message: "" as string, type: 0 as SyncActionValueMarketingMessageActionMarketingMessagePrototypeType, createdAt: 0 as number, lastSentAt: 0 as number, isDeleted: false as boolean, mediaId: "" as string}, end);
}
function readSyncActionValueMarketingMessageActionField(tag: number, obj: SyncActionValueMarketingMessageAction, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.message = pbf.readString();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.createdAt = pbf.readVarint(true);
    else if (tag === 5) obj.lastSentAt = pbf.readVarint(true);
    else if (tag === 6) obj.isDeleted = pbf.readBoolean();
    else if (tag === 7) obj.mediaId = pbf.readString();
}
export function writeSyncActionValueMarketingMessageAction(obj: SyncActionValueMarketingMessageAction, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
    if (obj.message !== undefined) pbf.writeStringField(2, obj.message);
    if (obj.type !== undefined) pbf.writeVarintField(3, obj.type);
    if (obj.createdAt !== undefined) pbf.writeVarintField(4, obj.createdAt);
    if (obj.lastSentAt !== undefined) pbf.writeVarintField(5, obj.lastSentAt);
    if (obj.isDeleted !== undefined) pbf.writeBooleanField(6, obj.isDeleted);
    if (obj.mediaId !== undefined) pbf.writeStringField(7, obj.mediaId);
}

export enum SyncActionValueMarketingMessageActionMarketingMessagePrototypeType {
    PERSONALIZED = 0,
}

export interface SyncActionValueMarketingMessageBroadcastAction {
    repliedCount?: number;
}

export function readSyncActionValueMarketingMessageBroadcastAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueMarketingMessageBroadcastActionField, {repliedCount: 0 as number}, end);
}
function readSyncActionValueMarketingMessageBroadcastActionField(tag: number, obj: SyncActionValueMarketingMessageBroadcastAction, pbf: Pbf) {
    if (tag === 1) obj.repliedCount = pbf.readVarint(true);
}
export function writeSyncActionValueMarketingMessageBroadcastAction(obj: SyncActionValueMarketingMessageBroadcastAction, pbf: Pbf) {
    if (obj.repliedCount !== undefined) pbf.writeVarintField(1, obj.repliedCount);
}

export interface SyncActionValueMuteAction {
    muted?: boolean;
    muteEndTimestamp?: number;
    autoMuted?: boolean;
}

export function readSyncActionValueMuteAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueMuteActionField, {muted: false as boolean, muteEndTimestamp: 0 as number, autoMuted: false as boolean}, end);
}
function readSyncActionValueMuteActionField(tag: number, obj: SyncActionValueMuteAction, pbf: Pbf) {
    if (tag === 1) obj.muted = pbf.readBoolean();
    else if (tag === 2) obj.muteEndTimestamp = pbf.readVarint(true);
    else if (tag === 3) obj.autoMuted = pbf.readBoolean();
}
export function writeSyncActionValueMuteAction(obj: SyncActionValueMuteAction, pbf: Pbf) {
    if (obj.muted !== undefined) pbf.writeBooleanField(1, obj.muted);
    if (obj.muteEndTimestamp !== undefined) pbf.writeVarintField(2, obj.muteEndTimestamp);
    if (obj.autoMuted !== undefined) pbf.writeBooleanField(3, obj.autoMuted);
}

export interface SyncActionValueNuxAction {
    acknowledged?: boolean;
}

export function readSyncActionValueNuxAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueNuxActionField, {acknowledged: false as boolean}, end);
}
function readSyncActionValueNuxActionField(tag: number, obj: SyncActionValueNuxAction, pbf: Pbf) {
    if (tag === 1) obj.acknowledged = pbf.readBoolean();
}
export function writeSyncActionValueNuxAction(obj: SyncActionValueNuxAction, pbf: Pbf) {
    if (obj.acknowledged !== undefined) pbf.writeBooleanField(1, obj.acknowledged);
}

export interface SyncActionValuePaymentInfoAction {
    cpi?: string;
}

export function readSyncActionValuePaymentInfoAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValuePaymentInfoActionField, {cpi: "" as string}, end);
}
function readSyncActionValuePaymentInfoActionField(tag: number, obj: SyncActionValuePaymentInfoAction, pbf: Pbf) {
    if (tag === 1) obj.cpi = pbf.readString();
}
export function writeSyncActionValuePaymentInfoAction(obj: SyncActionValuePaymentInfoAction, pbf: Pbf) {
    if (obj.cpi !== undefined) pbf.writeStringField(1, obj.cpi);
}

export interface SyncActionValuePinAction {
    pinned?: boolean;
}

export function readSyncActionValuePinAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValuePinActionField, {pinned: false as boolean}, end);
}
function readSyncActionValuePinActionField(tag: number, obj: SyncActionValuePinAction, pbf: Pbf) {
    if (tag === 1) obj.pinned = pbf.readBoolean();
}
export function writeSyncActionValuePinAction(obj: SyncActionValuePinAction, pbf: Pbf) {
    if (obj.pinned !== undefined) pbf.writeBooleanField(1, obj.pinned);
}

export interface SyncActionValuePnForLidChatAction {
    pnJid?: string;
}

export function readSyncActionValuePnForLidChatAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValuePnForLidChatActionField, {pnJid: "" as string}, end);
}
function readSyncActionValuePnForLidChatActionField(tag: number, obj: SyncActionValuePnForLidChatAction, pbf: Pbf) {
    if (tag === 1) obj.pnJid = pbf.readString();
}
export function writeSyncActionValuePnForLidChatAction(obj: SyncActionValuePnForLidChatAction, pbf: Pbf) {
    if (obj.pnJid !== undefined) pbf.writeStringField(1, obj.pnJid);
}

export interface SyncActionValuePrimaryFeature {
    flags?: string[];
}

export function readSyncActionValuePrimaryFeature(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValuePrimaryFeatureField, {flags: [] as string[]}, end);
}
function readSyncActionValuePrimaryFeatureField(tag: number, obj: SyncActionValuePrimaryFeature, pbf: Pbf) {
    if (tag === 1) obj.flags?.push(pbf.readString());
}
export function writeSyncActionValuePrimaryFeature(obj: SyncActionValuePrimaryFeature, pbf: Pbf) {
    if (obj.flags) for (const item of obj.flags) pbf.writeStringField(1, item);
}

export interface SyncActionValuePrimaryVersionAction {
    version?: string;
}

export function readSyncActionValuePrimaryVersionAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValuePrimaryVersionActionField, {version: "" as string}, end);
}
function readSyncActionValuePrimaryVersionActionField(tag: number, obj: SyncActionValuePrimaryVersionAction, pbf: Pbf) {
    if (tag === 1) obj.version = pbf.readString();
}
export function writeSyncActionValuePrimaryVersionAction(obj: SyncActionValuePrimaryVersionAction, pbf: Pbf) {
    if (obj.version !== undefined) pbf.writeStringField(1, obj.version);
}

export interface SyncActionValuePrivacySettingRelayAllCalls {
    isEnabled?: boolean;
}

export function readSyncActionValuePrivacySettingRelayAllCalls(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValuePrivacySettingRelayAllCallsField, {isEnabled: false as boolean}, end);
}
function readSyncActionValuePrivacySettingRelayAllCallsField(tag: number, obj: SyncActionValuePrivacySettingRelayAllCalls, pbf: Pbf) {
    if (tag === 1) obj.isEnabled = pbf.readBoolean();
}
export function writeSyncActionValuePrivacySettingRelayAllCalls(obj: SyncActionValuePrivacySettingRelayAllCalls, pbf: Pbf) {
    if (obj.isEnabled !== undefined) pbf.writeBooleanField(1, obj.isEnabled);
}

export interface SyncActionValuePushNameSetting {
    name?: string;
}

export function readSyncActionValuePushNameSetting(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValuePushNameSettingField, {name: "" as string}, end);
}
function readSyncActionValuePushNameSettingField(tag: number, obj: SyncActionValuePushNameSetting, pbf: Pbf) {
    if (tag === 1) obj.name = pbf.readString();
}
export function writeSyncActionValuePushNameSetting(obj: SyncActionValuePushNameSetting, pbf: Pbf) {
    if (obj.name !== undefined) pbf.writeStringField(1, obj.name);
}

export interface SyncActionValueQuickReplyAction {
    shortcut?: string;
    message?: string;
    keywords?: string[];
    count?: number;
    deleted?: boolean;
}

export function readSyncActionValueQuickReplyAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueQuickReplyActionField, {shortcut: "" as string, message: "" as string, keywords: [] as string[], count: 0 as number, deleted: false as boolean}, end);
}
function readSyncActionValueQuickReplyActionField(tag: number, obj: SyncActionValueQuickReplyAction, pbf: Pbf) {
    if (tag === 1) obj.shortcut = pbf.readString();
    else if (tag === 2) obj.message = pbf.readString();
    else if (tag === 3) obj.keywords?.push(pbf.readString());
    else if (tag === 4) obj.count = pbf.readVarint(true);
    else if (tag === 5) obj.deleted = pbf.readBoolean();
}
export function writeSyncActionValueQuickReplyAction(obj: SyncActionValueQuickReplyAction, pbf: Pbf) {
    if (obj.shortcut !== undefined) pbf.writeStringField(1, obj.shortcut);
    if (obj.message !== undefined) pbf.writeStringField(2, obj.message);
    if (obj.keywords) for (const item of obj.keywords) pbf.writeStringField(3, item);
    if (obj.count !== undefined) pbf.writeVarintField(4, obj.count);
    if (obj.deleted !== undefined) pbf.writeBooleanField(5, obj.deleted);
}

export interface SyncActionValueRecentEmojiWeightsAction {
    weights?: RecentEmojiWeight[];
}

export function readSyncActionValueRecentEmojiWeightsAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueRecentEmojiWeightsActionField, {weights: [] as RecentEmojiWeight[]}, end);
}
function readSyncActionValueRecentEmojiWeightsActionField(tag: number, obj: SyncActionValueRecentEmojiWeightsAction, pbf: Pbf) {
    if (tag === 1) obj.weights?.push(readRecentEmojiWeight(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSyncActionValueRecentEmojiWeightsAction(obj: SyncActionValueRecentEmojiWeightsAction, pbf: Pbf) {
    if (obj.weights) for (const item of obj.weights) pbf.writeMessage(1, writeRecentEmojiWeight, item);
}

export interface SyncActionValueRemoveRecentStickerAction {
    lastStickerSentTs?: number;
}

export function readSyncActionValueRemoveRecentStickerAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueRemoveRecentStickerActionField, {lastStickerSentTs: 0 as number}, end);
}
function readSyncActionValueRemoveRecentStickerActionField(tag: number, obj: SyncActionValueRemoveRecentStickerAction, pbf: Pbf) {
    if (tag === 1) obj.lastStickerSentTs = pbf.readVarint(true);
}
export function writeSyncActionValueRemoveRecentStickerAction(obj: SyncActionValueRemoveRecentStickerAction, pbf: Pbf) {
    if (obj.lastStickerSentTs !== undefined) pbf.writeVarintField(1, obj.lastStickerSentTs);
}

export interface SyncActionValueSecurityNotificationSetting {
    showNotification?: boolean;
}

export function readSyncActionValueSecurityNotificationSetting(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueSecurityNotificationSettingField, {showNotification: false as boolean}, end);
}
function readSyncActionValueSecurityNotificationSettingField(tag: number, obj: SyncActionValueSecurityNotificationSetting, pbf: Pbf) {
    if (tag === 1) obj.showNotification = pbf.readBoolean();
}
export function writeSyncActionValueSecurityNotificationSetting(obj: SyncActionValueSecurityNotificationSetting, pbf: Pbf) {
    if (obj.showNotification !== undefined) pbf.writeBooleanField(1, obj.showNotification);
}

export interface SyncActionValueStarAction {
    starred?: boolean;
}

export function readSyncActionValueStarAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueStarActionField, {starred: false as boolean}, end);
}
function readSyncActionValueStarActionField(tag: number, obj: SyncActionValueStarAction, pbf: Pbf) {
    if (tag === 1) obj.starred = pbf.readBoolean();
}
export function writeSyncActionValueStarAction(obj: SyncActionValueStarAction, pbf: Pbf) {
    if (obj.starred !== undefined) pbf.writeBooleanField(1, obj.starred);
}

export interface SyncActionValueStatusPrivacyAction {
    mode?: SyncActionValueStatusPrivacyActionStatusDistributionMode;
    userJid?: string[];
}

export function readSyncActionValueStatusPrivacyAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueStatusPrivacyActionField, {mode: 0 as SyncActionValueStatusPrivacyActionStatusDistributionMode, userJid: [] as string[]}, end);
}
function readSyncActionValueStatusPrivacyActionField(tag: number, obj: SyncActionValueStatusPrivacyAction, pbf: Pbf) {
    if (tag === 1) obj.mode = pbf.readVarint();
    else if (tag === 2) obj.userJid?.push(pbf.readString());
}
export function writeSyncActionValueStatusPrivacyAction(obj: SyncActionValueStatusPrivacyAction, pbf: Pbf) {
    if (obj.mode !== undefined) pbf.writeVarintField(1, obj.mode);
    if (obj.userJid) for (const item of obj.userJid) pbf.writeStringField(2, item);
}

export enum SyncActionValueStatusPrivacyActionStatusDistributionMode {
    ALLOW_LIST = 0,
    DENY_LIST = 1,
    CONTACTS = 2,
}

export interface SyncActionValueStickerAction {
    url?: string;
    fileEncSha256?: Uint8Array;
    mediaKey?: Uint8Array;
    mimetype?: string;
    height?: number;
    width?: number;
    directPath?: string;
    fileLength?: number;
    isFavorite?: boolean;
    deviceIdHint?: number;
}

export function readSyncActionValueStickerAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueStickerActionField, {url: "" as string, fileEncSha256: undefined as unknown as Uint8Array, mediaKey: undefined as unknown as Uint8Array, mimetype: "" as string, height: 0 as number, width: 0 as number, directPath: "" as string, fileLength: 0 as number, isFavorite: false as boolean, deviceIdHint: 0 as number}, end);
}
function readSyncActionValueStickerActionField(tag: number, obj: SyncActionValueStickerAction, pbf: Pbf) {
    if (tag === 1) obj.url = pbf.readString();
    else if (tag === 2) obj.fileEncSha256 = pbf.readBytes();
    else if (tag === 3) obj.mediaKey = pbf.readBytes();
    else if (tag === 4) obj.mimetype = pbf.readString();
    else if (tag === 5) obj.height = pbf.readVarint();
    else if (tag === 6) obj.width = pbf.readVarint();
    else if (tag === 7) obj.directPath = pbf.readString();
    else if (tag === 8) obj.fileLength = pbf.readVarint();
    else if (tag === 9) obj.isFavorite = pbf.readBoolean();
    else if (tag === 10) obj.deviceIdHint = pbf.readVarint();
}
export function writeSyncActionValueStickerAction(obj: SyncActionValueStickerAction, pbf: Pbf) {
    if (obj.url !== undefined) pbf.writeStringField(1, obj.url);
    if (obj.fileEncSha256 != null) pbf.writeBytesField(2, obj.fileEncSha256);
    if (obj.mediaKey != null) pbf.writeBytesField(3, obj.mediaKey);
    if (obj.mimetype !== undefined) pbf.writeStringField(4, obj.mimetype);
    if (obj.height !== undefined) pbf.writeVarintField(5, obj.height);
    if (obj.width !== undefined) pbf.writeVarintField(6, obj.width);
    if (obj.directPath !== undefined) pbf.writeStringField(7, obj.directPath);
    if (obj.fileLength !== undefined) pbf.writeVarintField(8, obj.fileLength);
    if (obj.isFavorite !== undefined) pbf.writeBooleanField(9, obj.isFavorite);
    if (obj.deviceIdHint !== undefined) pbf.writeVarintField(10, obj.deviceIdHint);
}

export interface SyncActionValueSubscriptionAction {
    isDeactivated?: boolean;
    isAutoRenewing?: boolean;
    expirationDate?: number;
}

export function readSyncActionValueSubscriptionAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueSubscriptionActionField, {isDeactivated: false as boolean, isAutoRenewing: false as boolean, expirationDate: 0 as number}, end);
}
function readSyncActionValueSubscriptionActionField(tag: number, obj: SyncActionValueSubscriptionAction, pbf: Pbf) {
    if (tag === 1) obj.isDeactivated = pbf.readBoolean();
    else if (tag === 2) obj.isAutoRenewing = pbf.readBoolean();
    else if (tag === 3) obj.expirationDate = pbf.readVarint(true);
}
export function writeSyncActionValueSubscriptionAction(obj: SyncActionValueSubscriptionAction, pbf: Pbf) {
    if (obj.isDeactivated !== undefined) pbf.writeBooleanField(1, obj.isDeactivated);
    if (obj.isAutoRenewing !== undefined) pbf.writeBooleanField(2, obj.isAutoRenewing);
    if (obj.expirationDate !== undefined) pbf.writeVarintField(3, obj.expirationDate);
}

export interface SyncActionValueSyncActionMessage {
    key?: MessageKey;
    timestamp?: number;
}

export function readSyncActionValueSyncActionMessage(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueSyncActionMessageField, {key: undefined as unknown as MessageKey, timestamp: 0 as number}, end);
}
function readSyncActionValueSyncActionMessageField(tag: number, obj: SyncActionValueSyncActionMessage, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.timestamp = pbf.readVarint(true);
}
export function writeSyncActionValueSyncActionMessage(obj: SyncActionValueSyncActionMessage, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.timestamp !== undefined) pbf.writeVarintField(2, obj.timestamp);
}

export interface SyncActionValueSyncActionMessageRange {
    lastMessageTimestamp?: number;
    lastSystemMessageTimestamp?: number;
    messages?: SyncActionValueSyncActionMessage[];
}

export function readSyncActionValueSyncActionMessageRange(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueSyncActionMessageRangeField, {lastMessageTimestamp: 0 as number, lastSystemMessageTimestamp: 0 as number, messages: [] as SyncActionValueSyncActionMessage[]}, end);
}
function readSyncActionValueSyncActionMessageRangeField(tag: number, obj: SyncActionValueSyncActionMessageRange, pbf: Pbf) {
    if (tag === 1) obj.lastMessageTimestamp = pbf.readVarint(true);
    else if (tag === 2) obj.lastSystemMessageTimestamp = pbf.readVarint(true);
    else if (tag === 3) obj.messages?.push(readSyncActionValueSyncActionMessage(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSyncActionValueSyncActionMessageRange(obj: SyncActionValueSyncActionMessageRange, pbf: Pbf) {
    if (obj.lastMessageTimestamp !== undefined) pbf.writeVarintField(1, obj.lastMessageTimestamp);
    if (obj.lastSystemMessageTimestamp !== undefined) pbf.writeVarintField(2, obj.lastSystemMessageTimestamp);
    if (obj.messages) for (const item of obj.messages) pbf.writeMessage(3, writeSyncActionValueSyncActionMessage, item);
}

export interface SyncActionValueTimeFormatAction {
    isTwentyFourHourFormatEnabled?: boolean;
}

export function readSyncActionValueTimeFormatAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueTimeFormatActionField, {isTwentyFourHourFormatEnabled: false as boolean}, end);
}
function readSyncActionValueTimeFormatActionField(tag: number, obj: SyncActionValueTimeFormatAction, pbf: Pbf) {
    if (tag === 1) obj.isTwentyFourHourFormatEnabled = pbf.readBoolean();
}
export function writeSyncActionValueTimeFormatAction(obj: SyncActionValueTimeFormatAction, pbf: Pbf) {
    if (obj.isTwentyFourHourFormatEnabled !== undefined) pbf.writeBooleanField(1, obj.isTwentyFourHourFormatEnabled);
}

export interface SyncActionValueUnarchiveChatsSetting {
    unarchiveChats?: boolean;
}

export function readSyncActionValueUnarchiveChatsSetting(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueUnarchiveChatsSettingField, {unarchiveChats: false as boolean}, end);
}
function readSyncActionValueUnarchiveChatsSettingField(tag: number, obj: SyncActionValueUnarchiveChatsSetting, pbf: Pbf) {
    if (tag === 1) obj.unarchiveChats = pbf.readBoolean();
}
export function writeSyncActionValueUnarchiveChatsSetting(obj: SyncActionValueUnarchiveChatsSetting, pbf: Pbf) {
    if (obj.unarchiveChats !== undefined) pbf.writeBooleanField(1, obj.unarchiveChats);
}

export interface SyncActionValueUserStatusMuteAction {
    muted?: boolean;
}

export function readSyncActionValueUserStatusMuteAction(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncActionValueUserStatusMuteActionField, {muted: false as boolean}, end);
}
function readSyncActionValueUserStatusMuteActionField(tag: number, obj: SyncActionValueUserStatusMuteAction, pbf: Pbf) {
    if (tag === 1) obj.muted = pbf.readBoolean();
}
export function writeSyncActionValueUserStatusMuteAction(obj: SyncActionValueUserStatusMuteAction, pbf: Pbf) {
    if (obj.muted !== undefined) pbf.writeBooleanField(1, obj.muted);
}

export interface SyncdIndex {
    blob?: Uint8Array;
}

export function readSyncdIndex(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdIndexField, {blob: undefined as unknown as Uint8Array}, end);
}
function readSyncdIndexField(tag: number, obj: SyncdIndex, pbf: Pbf) {
    if (tag === 1) obj.blob = pbf.readBytes();
}
export function writeSyncdIndex(obj: SyncdIndex, pbf: Pbf) {
    if (obj.blob != null) pbf.writeBytesField(1, obj.blob);
}

export interface SyncdMutation {
    operation?: SyncdMutationSyncdOperation;
    record?: SyncdRecord;
}

export function readSyncdMutation(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdMutationField, {operation: 0 as SyncdMutationSyncdOperation, record: undefined as unknown as SyncdRecord}, end);
}
function readSyncdMutationField(tag: number, obj: SyncdMutation, pbf: Pbf) {
    if (tag === 1) obj.operation = pbf.readVarint();
    else if (tag === 2) obj.record = readSyncdRecord(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncdMutation(obj: SyncdMutation, pbf: Pbf) {
    if (obj.operation !== undefined) pbf.writeVarintField(1, obj.operation);
    if (obj.record) pbf.writeMessage(2, writeSyncdRecord, obj.record);
}

export enum SyncdMutationSyncdOperation {
    SET = 0,
    REMOVE = 1,
}

export interface SyncdMutations {
    mutations?: SyncdMutation[];
}

export function readSyncdMutations(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdMutationsField, {mutations: [] as SyncdMutation[]}, end);
}
function readSyncdMutationsField(tag: number, obj: SyncdMutations, pbf: Pbf) {
    if (tag === 1) obj.mutations?.push(readSyncdMutation(pbf, pbf.readVarint() + pbf.pos));
}
export function writeSyncdMutations(obj: SyncdMutations, pbf: Pbf) {
    if (obj.mutations) for (const item of obj.mutations) pbf.writeMessage(1, writeSyncdMutation, item);
}

export interface SyncdPatch {
    version?: SyncdVersion;
    mutations?: SyncdMutation[];
    externalMutations?: ExternalBlobReference;
    snapshotMac?: Uint8Array;
    patchMac?: Uint8Array;
    keyId?: KeyId;
    exitCode?: ExitCode;
    deviceIndex?: number;
    clientDebugData?: Uint8Array;
}

export function readSyncdPatch(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdPatchField, {version: undefined as unknown as SyncdVersion, mutations: [] as SyncdMutation[], externalMutations: undefined as unknown as ExternalBlobReference, snapshotMac: undefined as unknown as Uint8Array, patchMac: undefined as unknown as Uint8Array, keyId: undefined as unknown as KeyId, exitCode: undefined as unknown as ExitCode, deviceIndex: 0 as number, clientDebugData: undefined as unknown as Uint8Array}, end);
}
function readSyncdPatchField(tag: number, obj: SyncdPatch, pbf: Pbf) {
    if (tag === 1) obj.version = readSyncdVersion(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.mutations?.push(readSyncdMutation(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.externalMutations = readExternalBlobReference(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.snapshotMac = pbf.readBytes();
    else if (tag === 5) obj.patchMac = pbf.readBytes();
    else if (tag === 6) obj.keyId = readKeyId(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.exitCode = readExitCode(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.deviceIndex = pbf.readVarint();
    else if (tag === 9) obj.clientDebugData = pbf.readBytes();
}
export function writeSyncdPatch(obj: SyncdPatch, pbf: Pbf) {
    if (obj.version) pbf.writeMessage(1, writeSyncdVersion, obj.version);
    if (obj.mutations) for (const item of obj.mutations) pbf.writeMessage(2, writeSyncdMutation, item);
    if (obj.externalMutations) pbf.writeMessage(3, writeExternalBlobReference, obj.externalMutations);
    if (obj.snapshotMac != null) pbf.writeBytesField(4, obj.snapshotMac);
    if (obj.patchMac != null) pbf.writeBytesField(5, obj.patchMac);
    if (obj.keyId) pbf.writeMessage(6, writeKeyId, obj.keyId);
    if (obj.exitCode) pbf.writeMessage(7, writeExitCode, obj.exitCode);
    if (obj.deviceIndex !== undefined) pbf.writeVarintField(8, obj.deviceIndex);
    if (obj.clientDebugData != null) pbf.writeBytesField(9, obj.clientDebugData);
}

export interface SyncdRecord {
    index?: SyncdIndex;
    value?: SyncdValue;
    keyId?: KeyId;
}

export function readSyncdRecord(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdRecordField, {index: undefined as unknown as SyncdIndex, value: undefined as unknown as SyncdValue, keyId: undefined as unknown as KeyId}, end);
}
function readSyncdRecordField(tag: number, obj: SyncdRecord, pbf: Pbf) {
    if (tag === 1) obj.index = readSyncdIndex(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.value = readSyncdValue(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.keyId = readKeyId(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncdRecord(obj: SyncdRecord, pbf: Pbf) {
    if (obj.index) pbf.writeMessage(1, writeSyncdIndex, obj.index);
    if (obj.value) pbf.writeMessage(2, writeSyncdValue, obj.value);
    if (obj.keyId) pbf.writeMessage(3, writeKeyId, obj.keyId);
}

export interface SyncdSnapshot {
    version?: SyncdVersion;
    records?: SyncdRecord[];
    mac?: Uint8Array;
    keyId?: KeyId;
}

export function readSyncdSnapshot(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdSnapshotField, {version: undefined as unknown as SyncdVersion, records: [] as SyncdRecord[], mac: undefined as unknown as Uint8Array, keyId: undefined as unknown as KeyId}, end);
}
function readSyncdSnapshotField(tag: number, obj: SyncdSnapshot, pbf: Pbf) {
    if (tag === 1) obj.version = readSyncdVersion(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.records?.push(readSyncdRecord(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.mac = pbf.readBytes();
    else if (tag === 4) obj.keyId = readKeyId(pbf, pbf.readVarint() + pbf.pos);
}
export function writeSyncdSnapshot(obj: SyncdSnapshot, pbf: Pbf) {
    if (obj.version) pbf.writeMessage(1, writeSyncdVersion, obj.version);
    if (obj.records) for (const item of obj.records) pbf.writeMessage(2, writeSyncdRecord, item);
    if (obj.mac != null) pbf.writeBytesField(3, obj.mac);
    if (obj.keyId) pbf.writeMessage(4, writeKeyId, obj.keyId);
}

export interface SyncdValue {
    blob?: Uint8Array;
}

export function readSyncdValue(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdValueField, {blob: undefined as unknown as Uint8Array}, end);
}
function readSyncdValueField(tag: number, obj: SyncdValue, pbf: Pbf) {
    if (tag === 1) obj.blob = pbf.readBytes();
}
export function writeSyncdValue(obj: SyncdValue, pbf: Pbf) {
    if (obj.blob != null) pbf.writeBytesField(1, obj.blob);
}

export interface SyncdVersion {
    version?: number;
}

export function readSyncdVersion(pbf: Pbf, end?: number) {
    return pbf.readFields(readSyncdVersionField, {version: 0 as number}, end);
}
function readSyncdVersionField(tag: number, obj: SyncdVersion, pbf: Pbf) {
    if (tag === 1) obj.version = pbf.readVarint();
}
export function writeSyncdVersion(obj: SyncdVersion, pbf: Pbf) {
    if (obj.version !== undefined) pbf.writeVarintField(1, obj.version);
}

export interface TemplateButton {
    index?: number;
    quickReplyButton?: TemplateButtonQuickReplyButton;
    urlButton?: TemplateButtonURLButton;
    callButton?: TemplateButtonCallButton;
}

export function readTemplateButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readTemplateButtonField, {index: 0 as number, quickReplyButton: undefined as unknown as TemplateButtonQuickReplyButton, urlButton: undefined as unknown as TemplateButtonURLButton, callButton: undefined as unknown as TemplateButtonCallButton}, end);
}
function readTemplateButtonField(tag: number, obj: TemplateButton, pbf: Pbf) {
    if (tag === 4) obj.index = pbf.readVarint();
    else if (tag === 1) { obj.quickReplyButton = readTemplateButtonQuickReplyButton(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.button = "quickReplyButton"
; }
    else if (tag === 2) { obj.urlButton = readTemplateButtonURLButton(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.button = "urlButton"
; }
    else if (tag === 3) { obj.callButton = readTemplateButtonCallButton(pbf, pbf.readVarint() + pbf.pos);
//@ts-ignore 
obj.button = "callButton"
; }
}
export function writeTemplateButton(obj: TemplateButton, pbf: Pbf) {
    if (obj.index !== undefined) pbf.writeVarintField(4, obj.index);
    if (obj.quickReplyButton) pbf.writeMessage(1, writeTemplateButtonQuickReplyButton, obj.quickReplyButton);
    if (obj.urlButton) pbf.writeMessage(2, writeTemplateButtonURLButton, obj.urlButton);
    if (obj.callButton) pbf.writeMessage(3, writeTemplateButtonCallButton, obj.callButton);
}

export interface TemplateButtonCallButton {
    displayText?: MessageHighlyStructuredMessage;
    phoneNumber?: MessageHighlyStructuredMessage;
}

export function readTemplateButtonCallButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readTemplateButtonCallButtonField, {displayText: undefined as unknown as MessageHighlyStructuredMessage, phoneNumber: undefined as unknown as MessageHighlyStructuredMessage}, end);
}
function readTemplateButtonCallButtonField(tag: number, obj: TemplateButtonCallButton, pbf: Pbf) {
    if (tag === 1) obj.displayText = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.phoneNumber = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeTemplateButtonCallButton(obj: TemplateButtonCallButton, pbf: Pbf) {
    if (obj.displayText) pbf.writeMessage(1, writeMessageHighlyStructuredMessage, obj.displayText);
    if (obj.phoneNumber) pbf.writeMessage(2, writeMessageHighlyStructuredMessage, obj.phoneNumber);
}

export interface TemplateButtonQuickReplyButton {
    displayText?: MessageHighlyStructuredMessage;
    id?: string;
}

export function readTemplateButtonQuickReplyButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readTemplateButtonQuickReplyButtonField, {displayText: undefined as unknown as MessageHighlyStructuredMessage, id: "" as string}, end);
}
function readTemplateButtonQuickReplyButtonField(tag: number, obj: TemplateButtonQuickReplyButton, pbf: Pbf) {
    if (tag === 1) obj.displayText = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.id = pbf.readString();
}
export function writeTemplateButtonQuickReplyButton(obj: TemplateButtonQuickReplyButton, pbf: Pbf) {
    if (obj.displayText) pbf.writeMessage(1, writeMessageHighlyStructuredMessage, obj.displayText);
    if (obj.id !== undefined) pbf.writeStringField(2, obj.id);
}

export interface TemplateButtonURLButton {
    displayText?: MessageHighlyStructuredMessage;
    url?: MessageHighlyStructuredMessage;
}

export function readTemplateButtonURLButton(pbf: Pbf, end?: number) {
    return pbf.readFields(readTemplateButtonURLButtonField, {displayText: undefined as unknown as MessageHighlyStructuredMessage, url: undefined as unknown as MessageHighlyStructuredMessage}, end);
}
function readTemplateButtonURLButtonField(tag: number, obj: TemplateButtonURLButton, pbf: Pbf) {
    if (tag === 1) obj.displayText = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.url = readMessageHighlyStructuredMessage(pbf, pbf.readVarint() + pbf.pos);
}
export function writeTemplateButtonURLButton(obj: TemplateButtonURLButton, pbf: Pbf) {
    if (obj.displayText) pbf.writeMessage(1, writeMessageHighlyStructuredMessage, obj.displayText);
    if (obj.url) pbf.writeMessage(2, writeMessageHighlyStructuredMessage, obj.url);
}

export interface UserReceipt {
    userJid: string;
    receiptTimestamp?: number;
    readTimestamp?: number;
    playedTimestamp?: number;
    pendingDeviceJid?: string[];
    deliveredDeviceJid?: string[];
}

export function readUserReceipt(pbf: Pbf, end?: number) {
    return pbf.readFields(readUserReceiptField, {userJid: "" as string, receiptTimestamp: 0 as number, readTimestamp: 0 as number, playedTimestamp: 0 as number, pendingDeviceJid: [] as string[], deliveredDeviceJid: [] as string[]}, end);
}
function readUserReceiptField(tag: number, obj: UserReceipt, pbf: Pbf) {
    if (tag === 1) obj.userJid = pbf.readString();
    else if (tag === 2) obj.receiptTimestamp = pbf.readVarint(true);
    else if (tag === 3) obj.readTimestamp = pbf.readVarint(true);
    else if (tag === 4) obj.playedTimestamp = pbf.readVarint(true);
    else if (tag === 5) obj.pendingDeviceJid?.push(pbf.readString());
    else if (tag === 6) obj.deliveredDeviceJid?.push(pbf.readString());
}
export function writeUserReceipt(obj: UserReceipt, pbf: Pbf) {
    if (obj.userJid !== undefined) pbf.writeStringField(1, obj.userJid);
    if (obj.receiptTimestamp !== undefined) pbf.writeVarintField(2, obj.receiptTimestamp);
    if (obj.readTimestamp !== undefined) pbf.writeVarintField(3, obj.readTimestamp);
    if (obj.playedTimestamp !== undefined) pbf.writeVarintField(4, obj.playedTimestamp);
    if (obj.pendingDeviceJid) for (const item of obj.pendingDeviceJid) pbf.writeStringField(5, item);
    if (obj.deliveredDeviceJid) for (const item of obj.deliveredDeviceJid) pbf.writeStringField(6, item);
}

export interface VerifiedNameCertificate {
    details?: Uint8Array;
    signature?: Uint8Array;
    serverSignature?: Uint8Array;
}

export function readVerifiedNameCertificate(pbf: Pbf, end?: number) {
    return pbf.readFields(readVerifiedNameCertificateField, {details: undefined as unknown as Uint8Array, signature: undefined as unknown as Uint8Array, serverSignature: undefined as unknown as Uint8Array}, end);
}
function readVerifiedNameCertificateField(tag: number, obj: VerifiedNameCertificate, pbf: Pbf) {
    if (tag === 1) obj.details = pbf.readBytes();
    else if (tag === 2) obj.signature = pbf.readBytes();
    else if (tag === 3) obj.serverSignature = pbf.readBytes();
}
export function writeVerifiedNameCertificate(obj: VerifiedNameCertificate, pbf: Pbf) {
    if (obj.details != null) pbf.writeBytesField(1, obj.details);
    if (obj.signature != null) pbf.writeBytesField(2, obj.signature);
    if (obj.serverSignature != null) pbf.writeBytesField(3, obj.serverSignature);
}

export interface VerifiedNameCertificateDetails {
    serial?: number;
    issuer?: string;
    verifiedName?: string;
    localizedNames?: LocalizedName[];
    issueTime?: number;
}

export function readVerifiedNameCertificateDetails(pbf: Pbf, end?: number) {
    return pbf.readFields(readVerifiedNameCertificateDetailsField, {serial: 0 as number, issuer: "" as string, verifiedName: "" as string, localizedNames: [] as LocalizedName[], issueTime: 0 as number}, end);
}
function readVerifiedNameCertificateDetailsField(tag: number, obj: VerifiedNameCertificateDetails, pbf: Pbf) {
    if (tag === 1) obj.serial = pbf.readVarint();
    else if (tag === 2) obj.issuer = pbf.readString();
    else if (tag === 4) obj.verifiedName = pbf.readString();
    else if (tag === 8) obj.localizedNames?.push(readLocalizedName(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 10) obj.issueTime = pbf.readVarint();
}
export function writeVerifiedNameCertificateDetails(obj: VerifiedNameCertificateDetails, pbf: Pbf) {
    if (obj.serial !== undefined) pbf.writeVarintField(1, obj.serial);
    if (obj.issuer !== undefined) pbf.writeStringField(2, obj.issuer);
    if (obj.verifiedName !== undefined) pbf.writeStringField(4, obj.verifiedName);
    if (obj.localizedNames) for (const item of obj.localizedNames) pbf.writeMessage(8, writeLocalizedName, item);
    if (obj.issueTime !== undefined) pbf.writeVarintField(10, obj.issueTime);
}

export interface WallpaperSettings {
    filename?: string;
    opacity?: number;
}

export function readWallpaperSettings(pbf: Pbf, end?: number) {
    return pbf.readFields(readWallpaperSettingsField, {filename: "" as string, opacity: 0 as number}, end);
}
function readWallpaperSettingsField(tag: number, obj: WallpaperSettings, pbf: Pbf) {
    if (tag === 1) obj.filename = pbf.readString();
    else if (tag === 2) obj.opacity = pbf.readVarint();
}
export function writeWallpaperSettings(obj: WallpaperSettings, pbf: Pbf) {
    if (obj.filename !== undefined) pbf.writeStringField(1, obj.filename);
    if (obj.opacity !== undefined) pbf.writeVarintField(2, obj.opacity);
}

export interface WebFeatures {
    labelsDisplay?: WebFeaturesFlag;
    voipIndividualOutgoing?: WebFeaturesFlag;
    groupsV3?: WebFeaturesFlag;
    groupsV3Create?: WebFeaturesFlag;
    changeNumberV2?: WebFeaturesFlag;
    queryStatusV3Thumbnail?: WebFeaturesFlag;
    liveLocations?: WebFeaturesFlag;
    queryVname?: WebFeaturesFlag;
    voipIndividualIncoming?: WebFeaturesFlag;
    quickRepliesQuery?: WebFeaturesFlag;
    payments?: WebFeaturesFlag;
    stickerPackQuery?: WebFeaturesFlag;
    liveLocationsFinal?: WebFeaturesFlag;
    labelsEdit?: WebFeaturesFlag;
    mediaUpload?: WebFeaturesFlag;
    mediaUploadRichQuickReplies?: WebFeaturesFlag;
    vnameV2?: WebFeaturesFlag;
    videoPlaybackUrl?: WebFeaturesFlag;
    statusRanking?: WebFeaturesFlag;
    voipIndividualVideo?: WebFeaturesFlag;
    thirdPartyStickers?: WebFeaturesFlag;
    frequentlyForwardedSetting?: WebFeaturesFlag;
    groupsV4JoinPermission?: WebFeaturesFlag;
    recentStickers?: WebFeaturesFlag;
    catalog?: WebFeaturesFlag;
    starredStickers?: WebFeaturesFlag;
    voipGroupCall?: WebFeaturesFlag;
    templateMessage?: WebFeaturesFlag;
    templateMessageInteractivity?: WebFeaturesFlag;
    ephemeralMessages?: WebFeaturesFlag;
    e2ENotificationSync?: WebFeaturesFlag;
    recentStickersV2?: WebFeaturesFlag;
    recentStickersV3?: WebFeaturesFlag;
    userNotice?: WebFeaturesFlag;
    support?: WebFeaturesFlag;
    groupUiiCleanup?: WebFeaturesFlag;
    groupDogfoodingInternalOnly?: WebFeaturesFlag;
    settingsSync?: WebFeaturesFlag;
    archiveV2?: WebFeaturesFlag;
    ephemeralAllowGroupMembers?: WebFeaturesFlag;
    ephemeral24HDuration?: WebFeaturesFlag;
    mdForceUpgrade?: WebFeaturesFlag;
    disappearingMode?: WebFeaturesFlag;
    externalMdOptInAvailable?: WebFeaturesFlag;
    noDeleteMessageTimeLimit?: WebFeaturesFlag;
}

export function readWebFeatures(pbf: Pbf, end?: number) {
    return pbf.readFields(readWebFeaturesField, {labelsDisplay: 0 as WebFeaturesFlag, voipIndividualOutgoing: 0 as WebFeaturesFlag, groupsV3: 0 as WebFeaturesFlag, groupsV3Create: 0 as WebFeaturesFlag, changeNumberV2: 0 as WebFeaturesFlag, queryStatusV3Thumbnail: 0 as WebFeaturesFlag, liveLocations: 0 as WebFeaturesFlag, queryVname: 0 as WebFeaturesFlag, voipIndividualIncoming: 0 as WebFeaturesFlag, quickRepliesQuery: 0 as WebFeaturesFlag, payments: 0 as WebFeaturesFlag, stickerPackQuery: 0 as WebFeaturesFlag, liveLocationsFinal: 0 as WebFeaturesFlag, labelsEdit: 0 as WebFeaturesFlag, mediaUpload: 0 as WebFeaturesFlag, mediaUploadRichQuickReplies: 0 as WebFeaturesFlag, vnameV2: 0 as WebFeaturesFlag, videoPlaybackUrl: 0 as WebFeaturesFlag, statusRanking: 0 as WebFeaturesFlag, voipIndividualVideo: 0 as WebFeaturesFlag, thirdPartyStickers: 0 as WebFeaturesFlag, frequentlyForwardedSetting: 0 as WebFeaturesFlag, groupsV4JoinPermission: 0 as WebFeaturesFlag, recentStickers: 0 as WebFeaturesFlag, catalog: 0 as WebFeaturesFlag, starredStickers: 0 as WebFeaturesFlag, voipGroupCall: 0 as WebFeaturesFlag, templateMessage: 0 as WebFeaturesFlag, templateMessageInteractivity: 0 as WebFeaturesFlag, ephemeralMessages: 0 as WebFeaturesFlag, e2ENotificationSync: 0 as WebFeaturesFlag, recentStickersV2: 0 as WebFeaturesFlag, recentStickersV3: 0 as WebFeaturesFlag, userNotice: 0 as WebFeaturesFlag, support: 0 as WebFeaturesFlag, groupUiiCleanup: 0 as WebFeaturesFlag, groupDogfoodingInternalOnly: 0 as WebFeaturesFlag, settingsSync: 0 as WebFeaturesFlag, archiveV2: 0 as WebFeaturesFlag, ephemeralAllowGroupMembers: 0 as WebFeaturesFlag, ephemeral24HDuration: 0 as WebFeaturesFlag, mdForceUpgrade: 0 as WebFeaturesFlag, disappearingMode: 0 as WebFeaturesFlag, externalMdOptInAvailable: 0 as WebFeaturesFlag, noDeleteMessageTimeLimit: 0 as WebFeaturesFlag}, end);
}
function readWebFeaturesField(tag: number, obj: WebFeatures, pbf: Pbf) {
    if (tag === 1) obj.labelsDisplay = pbf.readVarint();
    else if (tag === 2) obj.voipIndividualOutgoing = pbf.readVarint();
    else if (tag === 3) obj.groupsV3 = pbf.readVarint();
    else if (tag === 4) obj.groupsV3Create = pbf.readVarint();
    else if (tag === 5) obj.changeNumberV2 = pbf.readVarint();
    else if (tag === 6) obj.queryStatusV3Thumbnail = pbf.readVarint();
    else if (tag === 7) obj.liveLocations = pbf.readVarint();
    else if (tag === 8) obj.queryVname = pbf.readVarint();
    else if (tag === 9) obj.voipIndividualIncoming = pbf.readVarint();
    else if (tag === 10) obj.quickRepliesQuery = pbf.readVarint();
    else if (tag === 11) obj.payments = pbf.readVarint();
    else if (tag === 12) obj.stickerPackQuery = pbf.readVarint();
    else if (tag === 13) obj.liveLocationsFinal = pbf.readVarint();
    else if (tag === 14) obj.labelsEdit = pbf.readVarint();
    else if (tag === 15) obj.mediaUpload = pbf.readVarint();
    else if (tag === 18) obj.mediaUploadRichQuickReplies = pbf.readVarint();
    else if (tag === 19) obj.vnameV2 = pbf.readVarint();
    else if (tag === 20) obj.videoPlaybackUrl = pbf.readVarint();
    else if (tag === 21) obj.statusRanking = pbf.readVarint();
    else if (tag === 22) obj.voipIndividualVideo = pbf.readVarint();
    else if (tag === 23) obj.thirdPartyStickers = pbf.readVarint();
    else if (tag === 24) obj.frequentlyForwardedSetting = pbf.readVarint();
    else if (tag === 25) obj.groupsV4JoinPermission = pbf.readVarint();
    else if (tag === 26) obj.recentStickers = pbf.readVarint();
    else if (tag === 27) obj.catalog = pbf.readVarint();
    else if (tag === 28) obj.starredStickers = pbf.readVarint();
    else if (tag === 29) obj.voipGroupCall = pbf.readVarint();
    else if (tag === 30) obj.templateMessage = pbf.readVarint();
    else if (tag === 31) obj.templateMessageInteractivity = pbf.readVarint();
    else if (tag === 32) obj.ephemeralMessages = pbf.readVarint();
    else if (tag === 33) obj.e2ENotificationSync = pbf.readVarint();
    else if (tag === 34) obj.recentStickersV2 = pbf.readVarint();
    else if (tag === 36) obj.recentStickersV3 = pbf.readVarint();
    else if (tag === 37) obj.userNotice = pbf.readVarint();
    else if (tag === 39) obj.support = pbf.readVarint();
    else if (tag === 40) obj.groupUiiCleanup = pbf.readVarint();
    else if (tag === 41) obj.groupDogfoodingInternalOnly = pbf.readVarint();
    else if (tag === 42) obj.settingsSync = pbf.readVarint();
    else if (tag === 43) obj.archiveV2 = pbf.readVarint();
    else if (tag === 44) obj.ephemeralAllowGroupMembers = pbf.readVarint();
    else if (tag === 45) obj.ephemeral24HDuration = pbf.readVarint();
    else if (tag === 46) obj.mdForceUpgrade = pbf.readVarint();
    else if (tag === 47) obj.disappearingMode = pbf.readVarint();
    else if (tag === 48) obj.externalMdOptInAvailable = pbf.readVarint();
    else if (tag === 49) obj.noDeleteMessageTimeLimit = pbf.readVarint();
}
export function writeWebFeatures(obj: WebFeatures, pbf: Pbf) {
    if (obj.labelsDisplay !== undefined) pbf.writeVarintField(1, obj.labelsDisplay);
    if (obj.voipIndividualOutgoing !== undefined) pbf.writeVarintField(2, obj.voipIndividualOutgoing);
    if (obj.groupsV3 !== undefined) pbf.writeVarintField(3, obj.groupsV3);
    if (obj.groupsV3Create !== undefined) pbf.writeVarintField(4, obj.groupsV3Create);
    if (obj.changeNumberV2 !== undefined) pbf.writeVarintField(5, obj.changeNumberV2);
    if (obj.queryStatusV3Thumbnail !== undefined) pbf.writeVarintField(6, obj.queryStatusV3Thumbnail);
    if (obj.liveLocations !== undefined) pbf.writeVarintField(7, obj.liveLocations);
    if (obj.queryVname !== undefined) pbf.writeVarintField(8, obj.queryVname);
    if (obj.voipIndividualIncoming !== undefined) pbf.writeVarintField(9, obj.voipIndividualIncoming);
    if (obj.quickRepliesQuery !== undefined) pbf.writeVarintField(10, obj.quickRepliesQuery);
    if (obj.payments !== undefined) pbf.writeVarintField(11, obj.payments);
    if (obj.stickerPackQuery !== undefined) pbf.writeVarintField(12, obj.stickerPackQuery);
    if (obj.liveLocationsFinal !== undefined) pbf.writeVarintField(13, obj.liveLocationsFinal);
    if (obj.labelsEdit !== undefined) pbf.writeVarintField(14, obj.labelsEdit);
    if (obj.mediaUpload !== undefined) pbf.writeVarintField(15, obj.mediaUpload);
    if (obj.mediaUploadRichQuickReplies !== undefined) pbf.writeVarintField(18, obj.mediaUploadRichQuickReplies);
    if (obj.vnameV2 !== undefined) pbf.writeVarintField(19, obj.vnameV2);
    if (obj.videoPlaybackUrl !== undefined) pbf.writeVarintField(20, obj.videoPlaybackUrl);
    if (obj.statusRanking !== undefined) pbf.writeVarintField(21, obj.statusRanking);
    if (obj.voipIndividualVideo !== undefined) pbf.writeVarintField(22, obj.voipIndividualVideo);
    if (obj.thirdPartyStickers !== undefined) pbf.writeVarintField(23, obj.thirdPartyStickers);
    if (obj.frequentlyForwardedSetting !== undefined) pbf.writeVarintField(24, obj.frequentlyForwardedSetting);
    if (obj.groupsV4JoinPermission !== undefined) pbf.writeVarintField(25, obj.groupsV4JoinPermission);
    if (obj.recentStickers !== undefined) pbf.writeVarintField(26, obj.recentStickers);
    if (obj.catalog !== undefined) pbf.writeVarintField(27, obj.catalog);
    if (obj.starredStickers !== undefined) pbf.writeVarintField(28, obj.starredStickers);
    if (obj.voipGroupCall !== undefined) pbf.writeVarintField(29, obj.voipGroupCall);
    if (obj.templateMessage !== undefined) pbf.writeVarintField(30, obj.templateMessage);
    if (obj.templateMessageInteractivity !== undefined) pbf.writeVarintField(31, obj.templateMessageInteractivity);
    if (obj.ephemeralMessages !== undefined) pbf.writeVarintField(32, obj.ephemeralMessages);
    if (obj.e2ENotificationSync !== undefined) pbf.writeVarintField(33, obj.e2ENotificationSync);
    if (obj.recentStickersV2 !== undefined) pbf.writeVarintField(34, obj.recentStickersV2);
    if (obj.recentStickersV3 !== undefined) pbf.writeVarintField(36, obj.recentStickersV3);
    if (obj.userNotice !== undefined) pbf.writeVarintField(37, obj.userNotice);
    if (obj.support !== undefined) pbf.writeVarintField(39, obj.support);
    if (obj.groupUiiCleanup !== undefined) pbf.writeVarintField(40, obj.groupUiiCleanup);
    if (obj.groupDogfoodingInternalOnly !== undefined) pbf.writeVarintField(41, obj.groupDogfoodingInternalOnly);
    if (obj.settingsSync !== undefined) pbf.writeVarintField(42, obj.settingsSync);
    if (obj.archiveV2 !== undefined) pbf.writeVarintField(43, obj.archiveV2);
    if (obj.ephemeralAllowGroupMembers !== undefined) pbf.writeVarintField(44, obj.ephemeralAllowGroupMembers);
    if (obj.ephemeral24HDuration !== undefined) pbf.writeVarintField(45, obj.ephemeral24HDuration);
    if (obj.mdForceUpgrade !== undefined) pbf.writeVarintField(46, obj.mdForceUpgrade);
    if (obj.disappearingMode !== undefined) pbf.writeVarintField(47, obj.disappearingMode);
    if (obj.externalMdOptInAvailable !== undefined) pbf.writeVarintField(48, obj.externalMdOptInAvailable);
    if (obj.noDeleteMessageTimeLimit !== undefined) pbf.writeVarintField(49, obj.noDeleteMessageTimeLimit);
}

export enum WebFeaturesFlag {
    NOT_STARTED = 0,
    FORCE_UPGRADE = 1,
    DEVELOPMENT = 2,
    PRODUCTION = 3,
}

export interface WebMessageInfo {
    key: MessageKey;
    message?: Message;
    messageTimestamp?: number;
    status?: WebMessageInfoStatus;
    participant?: string;
    messageC2STimestamp?: number;
    ignore?: boolean;
    starred?: boolean;
    broadcast?: boolean;
    pushName?: string;
    mediaCiphertextSha256?: Uint8Array;
    multicast?: boolean;
    urlText?: boolean;
    urlNumber?: boolean;
    messageStubType?: WebMessageInfoStubType;
    clearMedia?: boolean;
    messageStubParameters?: string[];
    duration?: number;
    labels?: string[];
    paymentInfo?: PaymentInfo;
    finalLiveLocation?: MessageLiveLocationMessage;
    quotedPaymentInfo?: PaymentInfo;
    ephemeralStartTimestamp?: number;
    ephemeralDuration?: number;
    ephemeralOffToOn?: boolean;
    ephemeralOutOfSync?: boolean;
    bizPrivacyStatus?: WebMessageInfoBizPrivacyStatus;
    verifiedBizName?: string;
    mediaData?: MediaData;
    photoChange?: PhotoChange;
    userReceipt?: UserReceipt[];
    reactions?: Reaction[];
    quotedStickerData?: MediaData;
    futureproofData?: Uint8Array;
    statusPsa?: StatusPSA;
    pollUpdates?: PollUpdate[];
    pollAdditionalMetadata?: PollAdditionalMetadata;
    agentId?: string;
    statusAlreadyViewed?: boolean;
    messageSecret?: Uint8Array;
    keepInChat?: KeepInChat;
    originalSelfAuthorUserJidString?: string;
    revokeMessageTimestamp?: number;
    pinInChat?: PinInChat;
    premiumMessageInfo?: PremiumMessageInfo;
    is1PBizBotMessage?: boolean;
    isGroupHistoryMessage?: boolean;
    botMessageInvokerJid?: string;
    commentMetadata?: CommentMetadata;
    eventResponses?: EventResponse[];
    reportingTokenInfo?: ReportingTokenInfo;
    newsletterServerId?: number;
}

export function readWebMessageInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readWebMessageInfoField, {key: undefined as unknown as MessageKey, message: undefined as unknown as Message, messageTimestamp: 0 as number, status: 0 as WebMessageInfoStatus, participant: "" as string, messageC2STimestamp: 0 as number, ignore: false as boolean, starred: false as boolean, broadcast: false as boolean, pushName: "" as string, mediaCiphertextSha256: undefined as unknown as Uint8Array, multicast: false as boolean, urlText: false as boolean, urlNumber: false as boolean, messageStubType: 0 as WebMessageInfoStubType, clearMedia: false as boolean, messageStubParameters: [] as string[], duration: 0 as number, labels: [] as string[], paymentInfo: undefined as unknown as PaymentInfo, finalLiveLocation: undefined as unknown as MessageLiveLocationMessage, quotedPaymentInfo: undefined as unknown as PaymentInfo, ephemeralStartTimestamp: 0 as number, ephemeralDuration: 0 as number, ephemeralOffToOn: false as boolean, ephemeralOutOfSync: false as boolean, bizPrivacyStatus: 0 as WebMessageInfoBizPrivacyStatus, verifiedBizName: "" as string, mediaData: undefined as unknown as MediaData, photoChange: undefined as unknown as PhotoChange, userReceipt: [] as UserReceipt[], reactions: [] as Reaction[], quotedStickerData: undefined as unknown as MediaData, futureproofData: undefined as unknown as Uint8Array, statusPsa: undefined as unknown as StatusPSA, pollUpdates: [] as PollUpdate[], pollAdditionalMetadata: undefined as unknown as PollAdditionalMetadata, agentId: "" as string, statusAlreadyViewed: false as boolean, messageSecret: undefined as unknown as Uint8Array, keepInChat: undefined as unknown as KeepInChat, originalSelfAuthorUserJidString: "" as string, revokeMessageTimestamp: 0 as number, pinInChat: undefined as unknown as PinInChat, premiumMessageInfo: undefined as unknown as PremiumMessageInfo, is1PBizBotMessage: false as boolean, isGroupHistoryMessage: false as boolean, botMessageInvokerJid: "" as string, commentMetadata: undefined as unknown as CommentMetadata, eventResponses: [] as EventResponse[], reportingTokenInfo: undefined as unknown as ReportingTokenInfo, newsletterServerId: 0 as number}, end);
}
function readWebMessageInfoField(tag: number, obj: WebMessageInfo, pbf: Pbf) {
    if (tag === 1) obj.key = readMessageKey(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.message = readMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.messageTimestamp = pbf.readVarint();
    else if (tag === 4) obj.status = pbf.readVarint();
    else if (tag === 5) obj.participant = pbf.readString();
    else if (tag === 6) obj.messageC2STimestamp = pbf.readVarint();
    else if (tag === 16) obj.ignore = pbf.readBoolean();
    else if (tag === 17) obj.starred = pbf.readBoolean();
    else if (tag === 18) obj.broadcast = pbf.readBoolean();
    else if (tag === 19) obj.pushName = pbf.readString();
    else if (tag === 20) obj.mediaCiphertextSha256 = pbf.readBytes();
    else if (tag === 21) obj.multicast = pbf.readBoolean();
    else if (tag === 22) obj.urlText = pbf.readBoolean();
    else if (tag === 23) obj.urlNumber = pbf.readBoolean();
    else if (tag === 24) obj.messageStubType = pbf.readVarint();
    else if (tag === 25) obj.clearMedia = pbf.readBoolean();
    else if (tag === 26) obj.messageStubParameters?.push(pbf.readString());
    else if (tag === 27) obj.duration = pbf.readVarint();
    else if (tag === 28) obj.labels?.push(pbf.readString());
    else if (tag === 29) obj.paymentInfo = readPaymentInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 30) obj.finalLiveLocation = readMessageLiveLocationMessage(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 31) obj.quotedPaymentInfo = readPaymentInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 32) obj.ephemeralStartTimestamp = pbf.readVarint();
    else if (tag === 33) obj.ephemeralDuration = pbf.readVarint();
    else if (tag === 34) obj.ephemeralOffToOn = pbf.readBoolean();
    else if (tag === 35) obj.ephemeralOutOfSync = pbf.readBoolean();
    else if (tag === 36) obj.bizPrivacyStatus = pbf.readVarint();
    else if (tag === 37) obj.verifiedBizName = pbf.readString();
    else if (tag === 38) obj.mediaData = readMediaData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 39) obj.photoChange = readPhotoChange(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 40) obj.userReceipt?.push(readUserReceipt(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 41) obj.reactions?.push(readReaction(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 42) obj.quotedStickerData = readMediaData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 43) obj.futureproofData = pbf.readBytes();
    else if (tag === 44) obj.statusPsa = readStatusPSA(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 45) obj.pollUpdates?.push(readPollUpdate(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 46) obj.pollAdditionalMetadata = readPollAdditionalMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 47) obj.agentId = pbf.readString();
    else if (tag === 48) obj.statusAlreadyViewed = pbf.readBoolean();
    else if (tag === 49) obj.messageSecret = pbf.readBytes();
    else if (tag === 50) obj.keepInChat = readKeepInChat(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 51) obj.originalSelfAuthorUserJidString = pbf.readString();
    else if (tag === 52) obj.revokeMessageTimestamp = pbf.readVarint();
    else if (tag === 54) obj.pinInChat = readPinInChat(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 55) obj.premiumMessageInfo = readPremiumMessageInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 56) obj.is1PBizBotMessage = pbf.readBoolean();
    else if (tag === 57) obj.isGroupHistoryMessage = pbf.readBoolean();
    else if (tag === 58) obj.botMessageInvokerJid = pbf.readString();
    else if (tag === 59) obj.commentMetadata = readCommentMetadata(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 61) obj.eventResponses?.push(readEventResponse(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 62) obj.reportingTokenInfo = readReportingTokenInfo(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 63) obj.newsletterServerId = pbf.readVarint();
}
export function writeWebMessageInfo(obj: WebMessageInfo, pbf: Pbf) {
    if (obj.key) pbf.writeMessage(1, writeMessageKey, obj.key);
    if (obj.message) pbf.writeMessage(2, writeMessage, obj.message);
    if (obj.messageTimestamp !== undefined) pbf.writeVarintField(3, obj.messageTimestamp);
    if (obj.status !== undefined) pbf.writeVarintField(4, obj.status);
    if (obj.participant !== undefined) pbf.writeStringField(5, obj.participant);
    if (obj.messageC2STimestamp !== undefined) pbf.writeVarintField(6, obj.messageC2STimestamp);
    if (obj.ignore !== undefined) pbf.writeBooleanField(16, obj.ignore);
    if (obj.starred !== undefined) pbf.writeBooleanField(17, obj.starred);
    if (obj.broadcast !== undefined) pbf.writeBooleanField(18, obj.broadcast);
    if (obj.pushName !== undefined) pbf.writeStringField(19, obj.pushName);
    if (obj.mediaCiphertextSha256 != null) pbf.writeBytesField(20, obj.mediaCiphertextSha256);
    if (obj.multicast !== undefined) pbf.writeBooleanField(21, obj.multicast);
    if (obj.urlText !== undefined) pbf.writeBooleanField(22, obj.urlText);
    if (obj.urlNumber !== undefined) pbf.writeBooleanField(23, obj.urlNumber);
    if (obj.messageStubType !== undefined) pbf.writeVarintField(24, obj.messageStubType);
    if (obj.clearMedia !== undefined) pbf.writeBooleanField(25, obj.clearMedia);
    if (obj.messageStubParameters) for (const item of obj.messageStubParameters) pbf.writeStringField(26, item);
    if (obj.duration !== undefined) pbf.writeVarintField(27, obj.duration);
    if (obj.labels) for (const item of obj.labels) pbf.writeStringField(28, item);
    if (obj.paymentInfo) pbf.writeMessage(29, writePaymentInfo, obj.paymentInfo);
    if (obj.finalLiveLocation) pbf.writeMessage(30, writeMessageLiveLocationMessage, obj.finalLiveLocation);
    if (obj.quotedPaymentInfo) pbf.writeMessage(31, writePaymentInfo, obj.quotedPaymentInfo);
    if (obj.ephemeralStartTimestamp !== undefined) pbf.writeVarintField(32, obj.ephemeralStartTimestamp);
    if (obj.ephemeralDuration !== undefined) pbf.writeVarintField(33, obj.ephemeralDuration);
    if (obj.ephemeralOffToOn !== undefined) pbf.writeBooleanField(34, obj.ephemeralOffToOn);
    if (obj.ephemeralOutOfSync !== undefined) pbf.writeBooleanField(35, obj.ephemeralOutOfSync);
    if (obj.bizPrivacyStatus !== undefined) pbf.writeVarintField(36, obj.bizPrivacyStatus);
    if (obj.verifiedBizName !== undefined) pbf.writeStringField(37, obj.verifiedBizName);
    if (obj.mediaData) pbf.writeMessage(38, writeMediaData, obj.mediaData);
    if (obj.photoChange) pbf.writeMessage(39, writePhotoChange, obj.photoChange);
    if (obj.userReceipt) for (const item of obj.userReceipt) pbf.writeMessage(40, writeUserReceipt, item);
    if (obj.reactions) for (const item of obj.reactions) pbf.writeMessage(41, writeReaction, item);
    if (obj.quotedStickerData) pbf.writeMessage(42, writeMediaData, obj.quotedStickerData);
    if (obj.futureproofData != null) pbf.writeBytesField(43, obj.futureproofData);
    if (obj.statusPsa) pbf.writeMessage(44, writeStatusPSA, obj.statusPsa);
    if (obj.pollUpdates) for (const item of obj.pollUpdates) pbf.writeMessage(45, writePollUpdate, item);
    if (obj.pollAdditionalMetadata) pbf.writeMessage(46, writePollAdditionalMetadata, obj.pollAdditionalMetadata);
    if (obj.agentId !== undefined) pbf.writeStringField(47, obj.agentId);
    if (obj.statusAlreadyViewed !== undefined) pbf.writeBooleanField(48, obj.statusAlreadyViewed);
    if (obj.messageSecret != null) pbf.writeBytesField(49, obj.messageSecret);
    if (obj.keepInChat) pbf.writeMessage(50, writeKeepInChat, obj.keepInChat);
    if (obj.originalSelfAuthorUserJidString !== undefined) pbf.writeStringField(51, obj.originalSelfAuthorUserJidString);
    if (obj.revokeMessageTimestamp !== undefined) pbf.writeVarintField(52, obj.revokeMessageTimestamp);
    if (obj.pinInChat) pbf.writeMessage(54, writePinInChat, obj.pinInChat);
    if (obj.premiumMessageInfo) pbf.writeMessage(55, writePremiumMessageInfo, obj.premiumMessageInfo);
    if (obj.is1PBizBotMessage !== undefined) pbf.writeBooleanField(56, obj.is1PBizBotMessage);
    if (obj.isGroupHistoryMessage !== undefined) pbf.writeBooleanField(57, obj.isGroupHistoryMessage);
    if (obj.botMessageInvokerJid !== undefined) pbf.writeStringField(58, obj.botMessageInvokerJid);
    if (obj.commentMetadata) pbf.writeMessage(59, writeCommentMetadata, obj.commentMetadata);
    if (obj.eventResponses) for (const item of obj.eventResponses) pbf.writeMessage(61, writeEventResponse, item);
    if (obj.reportingTokenInfo) pbf.writeMessage(62, writeReportingTokenInfo, obj.reportingTokenInfo);
    if (obj.newsletterServerId !== undefined) pbf.writeVarintField(63, obj.newsletterServerId);
}

export enum WebMessageInfoBizPrivacyStatus {
    E2EE = 0,
    FB = 2,
    BSP = 1,
    BSP_AND_FB = 3,
}

export enum WebMessageInfoStatus {
    ERROR = 0,
    PENDING = 1,
    SERVER_ACK = 2,
    DELIVERY_ACK = 3,
    READ = 4,
    PLAYED = 5,
}

export enum WebMessageInfoStubType {
    UNKNOWN = 0,
    REVOKE = 1,
    CIPHERTEXT = 2,
    FUTUREPROOF = 3,
    NON_VERIFIED_TRANSITION = 4,
    UNVERIFIED_TRANSITION = 5,
    VERIFIED_TRANSITION = 6,
    VERIFIED_LOW_UNKNOWN = 7,
    VERIFIED_HIGH = 8,
    VERIFIED_INITIAL_UNKNOWN = 9,
    VERIFIED_INITIAL_LOW = 10,
    VERIFIED_INITIAL_HIGH = 11,
    VERIFIED_TRANSITION_ANY_TO_NONE = 12,
    VERIFIED_TRANSITION_ANY_TO_HIGH = 13,
    VERIFIED_TRANSITION_HIGH_TO_LOW = 14,
    VERIFIED_TRANSITION_HIGH_TO_UNKNOWN = 15,
    VERIFIED_TRANSITION_UNKNOWN_TO_LOW = 16,
    VERIFIED_TRANSITION_LOW_TO_UNKNOWN = 17,
    VERIFIED_TRANSITION_NONE_TO_LOW = 18,
    VERIFIED_TRANSITION_NONE_TO_UNKNOWN = 19,
    GROUP_CREATE = 20,
    GROUP_CHANGE_SUBJECT = 21,
    GROUP_CHANGE_ICON = 22,
    GROUP_CHANGE_INVITE_LINK = 23,
    GROUP_CHANGE_DESCRIPTION = 24,
    GROUP_CHANGE_RESTRICT = 25,
    GROUP_CHANGE_ANNOUNCE = 26,
    GROUP_PARTICIPANT_ADD = 27,
    GROUP_PARTICIPANT_REMOVE = 28,
    GROUP_PARTICIPANT_PROMOTE = 29,
    GROUP_PARTICIPANT_DEMOTE = 30,
    GROUP_PARTICIPANT_INVITE = 31,
    GROUP_PARTICIPANT_LEAVE = 32,
    GROUP_PARTICIPANT_CHANGE_NUMBER = 33,
    BROADCAST_CREATE = 34,
    BROADCAST_ADD = 35,
    BROADCAST_REMOVE = 36,
    GENERIC_NOTIFICATION = 37,
    E2E_IDENTITY_CHANGED = 38,
    E2E_ENCRYPTED = 39,
    CALL_MISSED_VOICE = 40,
    CALL_MISSED_VIDEO = 41,
    INDIVIDUAL_CHANGE_NUMBER = 42,
    GROUP_DELETE = 43,
    GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE = 44,
    CALL_MISSED_GROUP_VOICE = 45,
    CALL_MISSED_GROUP_VIDEO = 46,
    PAYMENT_CIPHERTEXT = 47,
    PAYMENT_FUTUREPROOF = 48,
    PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED = 49,
    PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED = 50,
    PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED = 51,
    PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP = 52,
    PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP = 53,
    PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER = 54,
    PAYMENT_ACTION_SEND_PAYMENT_REMINDER = 55,
    PAYMENT_ACTION_SEND_PAYMENT_INVITATION = 56,
    PAYMENT_ACTION_REQUEST_DECLINED = 57,
    PAYMENT_ACTION_REQUEST_EXPIRED = 58,
    PAYMENT_ACTION_REQUEST_CANCELLED = 59,
    BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM = 60,
    BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP = 61,
    BIZ_INTRO_TOP = 62,
    BIZ_INTRO_BOTTOM = 63,
    BIZ_NAME_CHANGE = 64,
    BIZ_MOVE_TO_CONSUMER_APP = 65,
    BIZ_TWO_TIER_MIGRATION_TOP = 66,
    BIZ_TWO_TIER_MIGRATION_BOTTOM = 67,
    OVERSIZED = 68,
    GROUP_CHANGE_NO_FREQUENTLY_FORWARDED = 69,
    GROUP_V4_ADD_INVITE_SENT = 70,
    GROUP_PARTICIPANT_ADD_REQUEST_JOIN = 71,
    CHANGE_EPHEMERAL_SETTING = 72,
    E2E_DEVICE_CHANGED = 73,
    VIEWED_ONCE = 74,
    E2E_ENCRYPTED_NOW = 75,
    BLUE_MSG_BSP_FB_TO_BSP_PREMISE = 76,
    BLUE_MSG_BSP_FB_TO_SELF_FB = 77,
    BLUE_MSG_BSP_FB_TO_SELF_PREMISE = 78,
    BLUE_MSG_BSP_FB_UNVERIFIED = 79,
    BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED = 80,
    BLUE_MSG_BSP_FB_VERIFIED = 81,
    BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED = 82,
    BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE = 83,
    BLUE_MSG_BSP_PREMISE_UNVERIFIED = 84,
    BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED = 85,
    BLUE_MSG_BSP_PREMISE_VERIFIED = 86,
    BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED = 87,
    BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED = 88,
    BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED = 89,
    BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED = 90,
    BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED = 91,
    BLUE_MSG_SELF_FB_TO_BSP_PREMISE = 92,
    BLUE_MSG_SELF_FB_TO_SELF_PREMISE = 93,
    BLUE_MSG_SELF_FB_UNVERIFIED = 94,
    BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED = 95,
    BLUE_MSG_SELF_FB_VERIFIED = 96,
    BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED = 97,
    BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE = 98,
    BLUE_MSG_SELF_PREMISE_UNVERIFIED = 99,
    BLUE_MSG_SELF_PREMISE_VERIFIED = 100,
    BLUE_MSG_TO_BSP_FB = 101,
    BLUE_MSG_TO_CONSUMER = 102,
    BLUE_MSG_TO_SELF_FB = 103,
    BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED = 104,
    BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED = 105,
    BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED = 106,
    BLUE_MSG_UNVERIFIED_TO_VERIFIED = 107,
    BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED = 108,
    BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED = 109,
    BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED = 110,
    BLUE_MSG_VERIFIED_TO_UNVERIFIED = 111,
    BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED = 112,
    BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED = 113,
    BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED = 114,
    BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED = 115,
    BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED = 116,
    BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED = 117,
    E2E_IDENTITY_UNAVAILABLE = 118,
    GROUP_CREATING = 119,
    GROUP_CREATE_FAILED = 120,
    GROUP_BOUNCED = 121,
    BLOCK_CONTACT = 122,
    EPHEMERAL_SETTING_NOT_APPLIED = 123,
    SYNC_FAILED = 124,
    SYNCING = 125,
    BIZ_PRIVACY_MODE_INIT_FB = 126,
    BIZ_PRIVACY_MODE_INIT_BSP = 127,
    BIZ_PRIVACY_MODE_TO_FB = 128,
    BIZ_PRIVACY_MODE_TO_BSP = 129,
    DISAPPEARING_MODE = 130,
    E2E_DEVICE_FETCH_FAILED = 131,
    ADMIN_REVOKE = 132,
    GROUP_INVITE_LINK_GROWTH_LOCKED = 133,
    COMMUNITY_LINK_PARENT_GROUP = 134,
    COMMUNITY_LINK_SIBLING_GROUP = 135,
    COMMUNITY_LINK_SUB_GROUP = 136,
    COMMUNITY_UNLINK_PARENT_GROUP = 137,
    COMMUNITY_UNLINK_SIBLING_GROUP = 138,
    COMMUNITY_UNLINK_SUB_GROUP = 139,
    GROUP_PARTICIPANT_ACCEPT = 140,
    GROUP_PARTICIPANT_LINKED_GROUP_JOIN = 141,
    COMMUNITY_CREATE = 142,
    EPHEMERAL_KEEP_IN_CHAT = 143,
    GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST = 144,
    GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE = 145,
    INTEGRITY_UNLINK_PARENT_GROUP = 146,
    COMMUNITY_PARTICIPANT_PROMOTE = 147,
    COMMUNITY_PARTICIPANT_DEMOTE = 148,
    COMMUNITY_PARENT_GROUP_DELETED = 149,
    COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL = 150,
    GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP = 151,
    MASKED_THREAD_CREATED = 152,
    MASKED_THREAD_UNMASKED = 153,
    BIZ_CHAT_ASSIGNMENT = 154,
    CHAT_PSA = 155,
    CHAT_POLL_CREATION_MESSAGE = 156,
    CAG_MASKED_THREAD_CREATED = 157,
    COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED = 158,
    CAG_INVITE_AUTO_ADD = 159,
    BIZ_CHAT_ASSIGNMENT_UNASSIGN = 160,
    CAG_INVITE_AUTO_JOINED = 161,
    SCHEDULED_CALL_START_MESSAGE = 162,
    COMMUNITY_INVITE_RICH = 163,
    COMMUNITY_INVITE_AUTO_ADD_RICH = 164,
    SUB_GROUP_INVITE_RICH = 165,
    SUB_GROUP_PARTICIPANT_ADD_RICH = 166,
    COMMUNITY_LINK_PARENT_GROUP_RICH = 167,
    COMMUNITY_PARTICIPANT_ADD_RICH = 168,
    SILENCED_UNKNOWN_CALLER_AUDIO = 169,
    SILENCED_UNKNOWN_CALLER_VIDEO = 170,
    GROUP_MEMBER_ADD_MODE = 171,
    GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD = 172,
    COMMUNITY_CHANGE_DESCRIPTION = 173,
    SENDER_INVITE = 174,
    RECEIVER_INVITE = 175,
    COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS = 176,
    PINNED_MESSAGE_IN_CHAT = 177,
    PAYMENT_INVITE_SETUP_INVITER = 178,
    PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY = 179,
    PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE = 180,
    LINKED_GROUP_CALL_START = 181,
    REPORT_TO_ADMIN_ENABLED_STATUS = 182,
    EMPTY_SUBGROUP_CREATE = 183,
    SCHEDULED_CALL_CANCEL = 184,
    SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH = 185,
    GROUP_CHANGE_RECENT_HISTORY_SHARING = 186,
    PAID_MESSAGE_SERVER_CAMPAIGN_ID = 187,
    GENERAL_CHAT_CREATE = 188,
    GENERAL_CHAT_ADD = 189,
    GENERAL_CHAT_AUTO_ADD_DISABLED = 190,
    SUGGESTED_SUBGROUP_ANNOUNCE = 191,
    BIZ_BOT_1P_MESSAGING_ENABLED = 192,
    CHANGE_USERNAME = 193,
    BIZ_COEX_PRIVACY_INIT_SELF = 194,
    BIZ_COEX_PRIVACY_TRANSITION_SELF = 195,
    SUPPORT_AI_EDUCATION = 196,
    BIZ_BOT_3P_MESSAGING_ENABLED = 197,
    REMINDER_SETUP_MESSAGE = 198,
    REMINDER_SENT_MESSAGE = 199,
    REMINDER_CANCEL_MESSAGE = 200,
}

export interface WebNotificationsInfo {
    timestamp?: number;
    unreadChats?: number;
    notifyMessageCount?: number;
    notifyMessages?: WebMessageInfo[];
}

export function readWebNotificationsInfo(pbf: Pbf, end?: number) {
    return pbf.readFields(readWebNotificationsInfoField, {timestamp: 0 as number, unreadChats: 0 as number, notifyMessageCount: 0 as number, notifyMessages: [] as WebMessageInfo[]}, end);
}
function readWebNotificationsInfoField(tag: number, obj: WebNotificationsInfo, pbf: Pbf) {
    if (tag === 2) obj.timestamp = pbf.readVarint();
    else if (tag === 3) obj.unreadChats = pbf.readVarint();
    else if (tag === 4) obj.notifyMessageCount = pbf.readVarint();
    else if (tag === 5) obj.notifyMessages?.push(readWebMessageInfo(pbf, pbf.readVarint() + pbf.pos));
}
export function writeWebNotificationsInfo(obj: WebNotificationsInfo, pbf: Pbf) {
    if (obj.timestamp !== undefined) pbf.writeVarintField(2, obj.timestamp);
    if (obj.unreadChats !== undefined) pbf.writeVarintField(3, obj.unreadChats);
    if (obj.notifyMessageCount !== undefined) pbf.writeVarintField(4, obj.notifyMessageCount);
    if (obj.notifyMessages) for (const item of obj.notifyMessages) pbf.writeMessage(5, writeWebMessageInfo, item);
}
